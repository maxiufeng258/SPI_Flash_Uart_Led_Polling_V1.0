
SPI_Flash_Uart_Led_Polling_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a3c  08008a3c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a44  08008a44  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08008a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          0000425c  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000431c  2000431c  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015737  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b8f  00000000  00000000  00035827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  000383b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  000390e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a98  00000000  00000000  00039d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011776  00000000  00000000  0005f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d706f  00000000  00000000  00070f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147f7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f9c  00000000  00000000  00147fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008704 	.word	0x08008704

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08008704 	.word	0x08008704

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <ff_getCapacity>:
  * @param	*free_byte :[OUT] kByte of free Capacity
  * @param  *total_byte:[OUT] kByte of total Capacity
  * @retval DRESULT: Operation result
  */
FRESULT ff_getCapacity (const TCHAR* path, DWORD* free_byte, DWORD* total_byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	FRESULT fRes = FR_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DWORD fre_clust;
	DWORD sect_size = _MIN_SS;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	double fre_sect, tot_sect, coef;
	FATFS *fs;

    fRes = f_getfree(path, &fre_clust, &fs);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f006 f9d3 	bl	8007142 <f_getfree>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fRes != FR_OK)
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <ff_getCapacity+0x3c>
    {
    	return fRes;
 8000daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dae:	e048      	b.n	8000e42 <ff_getCapacity+0xce>
    }

#if _MAX_SS != _MIN_SS
    sect_size = fs->ssize;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

    /* Get total sectors and free sectors */
    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	8952      	ldrh	r2, [r2, #10]
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbad 	bl	8000524 <__aeabi_ui2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fre_sect = fre_clust * fs->csize;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fba0 	bl	8000524 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    coef = ((double)sect_size)/(1024.0);
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f7ff fb99 	bl	8000524 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ff_getCapacity+0xd8>)
 8000df8:	f7ff fd38 	bl	800086c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *total_byte = tot_sect * coef;
 8000e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e0c:	f7ff fc04 	bl	8000618 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe10 	bl	8000a3c <__aeabi_d2uiz>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    *free_byte  = fre_sect * coef;
 8000e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2a:	f7ff fbf5 	bl	8000618 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe01 	bl	8000a3c <__aeabi_d2uiz>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]

    return FR_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40900000 	.word	0x40900000

08000e50 <ff_scanDisk>:
  *		// ff_scanDisk(path)
  * @param	*path  :[IN]  Start node to be scanned
  * @retval DRESULT: Operation result
  */
FRESULT ff_scanDisk (TCHAR* path)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       	   /* Open the directory */
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 f899 	bl	8006f96 <f_opendir>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8000e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13e      	bne.n	8000ef0 <ff_scanDisk+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <ff_scanDisk+0xac>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 f925 	bl	80070c8 <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12c      	bne.n	8000ee6 <ff_scanDisk+0x96>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <ff_scanDisk+0xac>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d028      	beq.n	8000ee6 <ff_scanDisk+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <ff_scanDisk+0xac>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <ff_scanDisk+0x88>
                i = strlen(path);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	4413      	add	r3, r2
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <ff_scanDisk+0xb4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fb16 	bl	80074e4 <siprintf>
                res = ff_scanDisk(path);                    /* Enter the directory */
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffc9 	bl	8000e50 <ff_scanDisk>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <ff_scanDisk+0x94>
                path[i] = 0;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e7cc      	b.n	8000e72 <ff_scanDisk+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ff_scanDisk+0xb8>)
 8000ede:	f006 fa73 	bl	80073c8 <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ee2:	e7c6      	b.n	8000e72 <ff_scanDisk+0x22>
                if (res != FR_OK) break;
 8000ee4:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f006 f8c6 	bl	800707c <f_closedir>
    }

    return res;
 8000ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000dc 	.word	0x200000dc
 8000f00:	200000e5 	.word	0x200000e5
 8000f04:	0800871c 	.word	0x0800871c
 8000f08:	08008720 	.word	0x08008720

08000f0c <_write>:
FATFS fs;
FIL   fp;
DIR   dp;

int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_write+0x24>)
 8000f22:	f002 fea6 	bl	8003c72 <HAL_UART_Transmit>
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200021f0 	.word	0x200021f0

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b6      	sub	sp, #216	; 0xd8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 f901 	bl	8002140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f903 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f9cb 	bl	80012dc <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f46:	f000 f969 	bl	800121c <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 f99d 	bl	8001288 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f4e:	f003 f959 	bl	8004204 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8000f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f56:	f001 f965 	bl	8002224 <HAL_Delay>

  fres = f_mount(&fs, "0:", 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4965      	ldr	r1, [pc, #404]	; (80010f4 <main+0x1c0>)
 8000f5e:	4866      	ldr	r0, [pc, #408]	; (80010f8 <main+0x1c4>)
 8000f60:	f005 f848 	bl	8005ff4 <f_mount>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <main+0x1c8>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8000f6c:	4b63      	ldr	r3, [pc, #396]	; (80010fc <main+0x1c8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f040 80b2 	bne.w	80010da <main+0x1a6>
  {
	  printf("mount w25qxxx flash passed...\r\n");
 8000f76:	4862      	ldr	r0, [pc, #392]	; (8001100 <main+0x1cc>)
 8000f78:	f006 faac 	bl	80074d4 <puts>

	  //fres = f_opendir(&dp, "0:/dataInfo");

	  fres = f_open(&fp, "0:/dataInfo/info.txt", FA_OPEN_ALWAYS|FA_WRITE);
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	4961      	ldr	r1, [pc, #388]	; (8001104 <main+0x1d0>)
 8000f80:	4861      	ldr	r0, [pc, #388]	; (8001108 <main+0x1d4>)
 8000f82:	f005 f87d 	bl	8006080 <f_open>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x1c8>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <main+0x1c8>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <main+0xba>
	  {
		  printf("open file ok...\r\n");
 8000f96:	485d      	ldr	r0, [pc, #372]	; (800110c <main+0x1d8>)
 8000f98:	f006 fa9c 	bl	80074d4 <puts>
		  static uint8_t buff[] = "1234567890\r\nabcdefghijklmnopqrstuvwxyz\r\n!@#$%^&*()...";
		  UINT bw[1];
		  fres = f_write(&fp, buff, sizeof(buff), bw);
 8000f9c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fa0:	2236      	movs	r2, #54	; 0x36
 8000fa2:	495b      	ldr	r1, [pc, #364]	; (8001110 <main+0x1dc>)
 8000fa4:	4858      	ldr	r0, [pc, #352]	; (8001108 <main+0x1d4>)
 8000fa6:	f005 fb96 	bl	80066d6 <f_write>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <main+0x1c8>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK)
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <main+0x1c8>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d115      	bne.n	8000fe6 <main+0xb2>
		  {
			  printf("write file passed...\r\n");
 8000fba:	4856      	ldr	r0, [pc, #344]	; (8001114 <main+0x1e0>)
 8000fbc:	f006 fa8a 	bl	80074d4 <puts>

			  fres = f_close(&fp);
 8000fc0:	4851      	ldr	r0, [pc, #324]	; (8001108 <main+0x1d4>)
 8000fc2:	f005 fd9a 	bl	8006afa <f_close>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <main+0x1c8>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			  if (fres == FR_OK)
 8000fce:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <main+0x1c8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <main+0xaa>
				  printf("close file passed...\r\n");
 8000fd6:	4850      	ldr	r0, [pc, #320]	; (8001118 <main+0x1e4>)
 8000fd8:	f006 fa7c 	bl	80074d4 <puts>
 8000fdc:	e00a      	b.n	8000ff4 <main+0xc0>
			  else
				  printf("close file failed...\r\n");
 8000fde:	484f      	ldr	r0, [pc, #316]	; (800111c <main+0x1e8>)
 8000fe0:	f006 fa78 	bl	80074d4 <puts>
 8000fe4:	e006      	b.n	8000ff4 <main+0xc0>

//			  f_closedir(&dp);
		  }
		  else
			  printf("write file failed...\r\n");
 8000fe6:	484e      	ldr	r0, [pc, #312]	; (8001120 <main+0x1ec>)
 8000fe8:	f006 fa74 	bl	80074d4 <puts>
 8000fec:	e002      	b.n	8000ff4 <main+0xc0>
	  }
	  else
		  printf("open file failed...\r\n");
 8000fee:	484d      	ldr	r0, [pc, #308]	; (8001124 <main+0x1f0>)
 8000ff0:	f006 fa70 	bl	80074d4 <puts>


	  DWORD free_byte[1], total_byte[1];
	  fres = ff_getCapacity("0:", free_byte, total_byte);
 8000ff4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000ff8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	483d      	ldr	r0, [pc, #244]	; (80010f4 <main+0x1c0>)
 8001000:	f7ff feb8 	bl	8000d74 <ff_getCapacity>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <main+0x1c8>)
 800100a:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 800100c:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <main+0x1c8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d129      	bne.n	8001068 <main+0x134>
	  {
		  printf("##################################\r\n");
 8001014:	4844      	ldr	r0, [pc, #272]	; (8001128 <main+0x1f4>)
 8001016:	f006 fa5d 	bl	80074d4 <puts>
		  printf(" total capacity : %ld KiByte\r\n", total_byte[0]);
 800101a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800101e:	4619      	mov	r1, r3
 8001020:	4842      	ldr	r0, [pc, #264]	; (800112c <main+0x1f8>)
 8001022:	f006 f9d1 	bl	80073c8 <iprintf>
		  printf(" free  capacity : %ld KiByte\r\n",  free_byte[0]);
 8001026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800102a:	4619      	mov	r1, r3
 800102c:	4840      	ldr	r0, [pc, #256]	; (8001130 <main+0x1fc>)
 800102e:	f006 f9cb 	bl	80073c8 <iprintf>
		  printf("##################################\r\n");
 8001032:	483d      	ldr	r0, [pc, #244]	; (8001128 <main+0x1f4>)
 8001034:	f006 fa4e 	bl	80074d4 <puts>

		  TCHAR path[50] = "0:";
 8001038:	f643 2330 	movw	r3, #14896	; 0x3a30
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	222e      	movs	r2, #46	; 0x2e
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f9b7 	bl	80073b8 <memset>
		  fres = ff_scanDisk(path);
 800104a:	463b      	mov	r3, r7
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff feff 	bl	8000e50 <ff_scanDisk>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <main+0x1c8>)
 8001058:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK)
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <main+0x1c8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <main+0x134>
			  printf("scan flash disk end...\r\n");
 8001062:	4834      	ldr	r0, [pc, #208]	; (8001134 <main+0x200>)
 8001064:	f006 fa36 	bl	80074d4 <puts>


	  }


	  fres = f_open(&fp, "0:/dataInfo/info.txt", FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 8001068:	2213      	movs	r2, #19
 800106a:	4926      	ldr	r1, [pc, #152]	; (8001104 <main+0x1d0>)
 800106c:	4826      	ldr	r0, [pc, #152]	; (8001108 <main+0x1d4>)
 800106e:	f005 f807 	bl	8006080 <f_open>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <main+0x1c8>)
 8001078:	701a      	strb	r2, [r3, #0]
	  fres = f_lseek(&fp, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <main+0x1d4>)
 800107e:	f005 fd66 	bl	8006b4e <f_lseek>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <main+0x1c8>)
 8001088:	701a      	strb	r2, [r3, #0]
	  uint8_t buffer[200];
	  UINT bw[1];
	  fres = f_read(&fp, buffer, f_size(&fp), bw);
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <main+0x1d4>)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001092:	4639      	mov	r1, r7
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <main+0x1d4>)
 8001096:	f005 f9bf 	bl	8006418 <f_read>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <main+0x1c8>)
 80010a0:	701a      	strb	r2, [r3, #0]
	  fres = f_close(&fp);
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <main+0x1d4>)
 80010a4:	f005 fd29 	bl	8006afa <f_close>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <main+0x1c8>)
 80010ae:	701a      	strb	r2, [r3, #0]

	  fres = f_mount(NULL, "0:", 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	4910      	ldr	r1, [pc, #64]	; (80010f4 <main+0x1c0>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f004 ff9d 	bl	8005ff4 <f_mount>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <main+0x1c8>)
 80010c0:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <main+0x1c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <main+0x19e>
	  {
		  printf("unmount passed...\r\n");
 80010ca:	481b      	ldr	r0, [pc, #108]	; (8001138 <main+0x204>)
 80010cc:	f006 fa02 	bl	80074d4 <puts>
 80010d0:	e006      	b.n	80010e0 <main+0x1ac>
	  }
	  else {
		printf("unmount failed...\r\n");
 80010d2:	481a      	ldr	r0, [pc, #104]	; (800113c <main+0x208>)
 80010d4:	f006 f9fe 	bl	80074d4 <puts>
 80010d8:	e002      	b.n	80010e0 <main+0x1ac>
	}
  }
  else
	  printf("mount w25qxxx flash failed...\r\n");
 80010da:	4819      	ldr	r0, [pc, #100]	; (8001140 <main+0x20c>)
 80010dc:	f006 f9fa 	bl	80074d4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <main+0x210>)
 80010e6:	f001 fb6c 	bl	80027c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ee:	f001 f899 	bl	8002224 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 80010f2:	e7f5      	b.n	80010e0 <main+0x1ac>
 80010f4:	08008728 	.word	0x08008728
 80010f8:	200011bc 	.word	0x200011bc
 80010fc:	20002264 	.word	0x20002264
 8001100:	0800872c 	.word	0x0800872c
 8001104:	0800874c 	.word	0x0800874c
 8001108:	20000134 	.word	0x20000134
 800110c:	08008764 	.word	0x08008764
 8001110:	20000000 	.word	0x20000000
 8001114:	08008778 	.word	0x08008778
 8001118:	08008790 	.word	0x08008790
 800111c:	080087a8 	.word	0x080087a8
 8001120:	080087c0 	.word	0x080087c0
 8001124:	080087d8 	.word	0x080087d8
 8001128:	080087f0 	.word	0x080087f0
 800112c:	08008814 	.word	0x08008814
 8001130:	08008834 	.word	0x08008834
 8001134:	08008854 	.word	0x08008854
 8001138:	0800886c 	.word	0x0800886c
 800113c:	08008880 	.word	0x08008880
 8001140:	08008894 	.word	0x08008894
 8001144:	40021c00 	.word	0x40021c00

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 f92e 	bl	80073b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <SystemClock_Config+0xcc>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <SystemClock_Config+0xcc>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <SystemClock_Config+0xcc>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <SystemClock_Config+0xd0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <SystemClock_Config+0xd0>)
 8001192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <SystemClock_Config+0xd0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011bc:	23a8      	movs	r3, #168	; 0xa8
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c4:	2304      	movs	r3, #4
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fb13 	bl	80027f8 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d8:	f000 f8e8 	bl	80013ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fd74 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001206:	f000 f8d1 	bl	80013ac <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	; 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000

0800121c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_SPI5_Init+0x64>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <MX_SPI5_Init+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_SPI5_Init+0x64>)
 8001228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_SPI5_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_SPI5_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_SPI5_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_SPI5_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_SPI5_Init+0x64>)
 8001248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_SPI5_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_SPI5_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_SPI5_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_SPI5_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_SPI5_Init+0x64>)
 8001268:	220a      	movs	r2, #10
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_SPI5_Init+0x64>)
 800126e:	f001 ff0b 	bl	8003088 <HAL_SPI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001278:	f000 f898 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20001164 	.word	0x20001164
 8001284:	40015000 	.word	0x40015000

08001288 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <MX_USART1_UART_Init+0x50>)
 8001290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART1_UART_Init+0x4c>)
 80012c0:	f002 fc8a 	bl	8003bd8 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ca:	f000 f86f 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200021f0 	.word	0x200021f0
 80012d8:	40011000 	.word	0x40011000

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_GPIO_Init+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <MX_GPIO_Init+0xc4>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_GPIO_Init+0xc4>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_GPIO_Init+0xc4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	4816      	ldr	r0, [pc, #88]	; (80013a4 <MX_GPIO_Init+0xc8>)
 800134c:	f001 fa20 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001358:	f001 fa1a 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 800135c:	2340      	movs	r3, #64	; 0x40
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0xc8>)
 8001374:	f001 f860 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 8001378:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0xcc>)
 8001392:	f001 f851 	bl	8002438 <HAL_GPIO_Init>

}
 8001396:	bf00      	nop
 8001398:	3720      	adds	r7, #32
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021c00 	.word	0x40021c00

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_SPI_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12c      	bne.n	8001484 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_SPI_MspInit+0x88>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_SPI_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_SPI_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001462:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001474:	2305      	movs	r3, #5
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SPI_MspInit+0x8c>)
 8001480:	f000 ffda 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40015000 	.word	0x40015000
 8001490:	40023800 	.word	0x40023800
 8001494:	40021400 	.word	0x40021400

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_UART_MspInit+0x84>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12c      	bne.n	8001514 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_UART_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_UART_MspInit+0x8c>)
 8001510:	f000 ff92 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40011000 	.word	0x40011000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 fe36 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e00a      	b.n	80015a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800158e:	f3af 8000 	nop.w
 8001592:	4601      	mov	r1, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf0      	blt.n	800158e <_read+0x12>
	}

return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	605a      	str	r2, [r3, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_isatty>:

int _isatty(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	return 1;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f005 fe88 	bl	8007364 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20030000 	.word	0x20030000
 8001680:	00000400 	.word	0x00000400
 8001684:	200000f4 	.word	0x200000f4
 8001688:	20004320 	.word	0x20004320

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <W25Qxxx_SPI>:
/** ############################################################################################
  * @brief spi transmit and receive
  * @retval return received data [Byte]
  */
static uint8_t W25Qxxx_SPI(uint8_t data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&hspi_flash, &data, &ret, 1, SPI_FLASH_TIMEOUT);
 80016ba:	f107 020f 	add.w	r2, r7, #15
 80016be:	1df9      	adds	r1, r7, #7
 80016c0:	f247 5330 	movw	r3, #30000	; 0x7530
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <W25Qxxx_SPI+0x28>)
 80016ca:	f001 ffb3 	bl	8003634 <HAL_SPI_TransmitReceive>
	return ret;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20001164 	.word	0x20001164

080016dc <W25Qxxx_Enable>:
  * 	Used before other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Enable(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2140      	movs	r1, #64	; 0x40
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <W25Qxxx_Enable+0x14>)
 80016e6:	f001 f853 	bl	8002790 <HAL_GPIO_WritePin>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021400 	.word	0x40021400

080016f4 <W25Qxxx_Disable>:
  * 	Used after other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Disable(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <W25Qxxx_Disable+0x14>)
 80016fe:	f001 f847 	bl	8002790 <HAL_GPIO_WritePin>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40021400 	.word	0x40021400

0800170c <W25Qxxx_Power_Up>:


static void W25Qxxx_Power_Up(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001710:	f7ff ffe4 	bl	80016dc <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Device_ID);
 8001714:	20ab      	movs	r0, #171	; 0xab
 8001716:	f7ff ffcb 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ffc8 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ffc5 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff ffc2 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_Device_ID = W25Qxxx_SPI(CMD_DUMMY);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff ffbf 	bl	80016b0 <W25Qxxx_SPI>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <W25Qxxx_Power_Up+0x38>)
 8001738:	701a      	strb	r2, [r3, #0]

	W25Qxxx_Disable();
 800173a:	f7ff ffdb 	bl	80016f4 <W25Qxxx_Disable>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000227c 	.word	0x2000227c

08001748 <W25Qxxx_Read_Manu_Dev_ID>:

/** ############################################################################################
  * @brief get W25Qxxx Manufacturer + Device ID [16-bit]
  */
static void W25Qxxx_Read_Manu_Dev_ID(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	uint16_t Temp0 = 0, Temp1 = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	80fb      	strh	r3, [r7, #6]
 8001752:	2300      	movs	r3, #0
 8001754:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Enable();
 8001756:	f7ff ffc1 	bl	80016dc <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Manufacture_ID);
 800175a:	2090      	movs	r0, #144	; 0x90
 800175c:	f7ff ffa8 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff ffa5 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ffa2 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff ff9f 	bl	80016b0 <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff ff9c 	bl	80016b0 <W25Qxxx_SPI>
 8001778:	4603      	mov	r3, r0
 800177a:	80fb      	strh	r3, [r7, #6]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff ff97 	bl	80016b0 <W25Qxxx_SPI>
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Disable();
 8001786:	f7ff ffb5 	bl	80016f4 <W25Qxxx_Disable>
	W25Qxxx_Manufacturer_Device_ID = (Temp0 << 8) | Temp1;
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	b29a      	uxth	r2, r3
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <W25Qxxx_Read_Manu_Dev_ID+0x60>)
 800179c:	801a      	strh	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20002290 	.word	0x20002290

080017ac <W25Qxxx_Read_JEDEC_ID>:

/** ############################################################################################
  * @brief get W25Qxxx JEDEC ID [24-bit]
  */
static void W25Qxxx_Read_JEDEC_ID(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
	uint32_t JEDEC_ID = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]

	W25Qxxx_Enable();
 80017c2:	f7ff ff8b 	bl	80016dc <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_JEDEC_ID);
 80017c6:	209f      	movs	r0, #159	; 0x9f
 80017c8:	f7ff ff72 	bl	80016b0 <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff ff6f 	bl	80016b0 <W25Qxxx_SPI>
 80017d2:	4603      	mov	r3, r0
 80017d4:	60bb      	str	r3, [r7, #8]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff ff6a 	bl	80016b0 <W25Qxxx_SPI>
 80017dc:	4603      	mov	r3, r0
 80017de:	607b      	str	r3, [r7, #4]
	Temp2 = W25Qxxx_SPI(CMD_DUMMY);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff ff65 	bl	80016b0 <W25Qxxx_SPI>
 80017e6:	4603      	mov	r3, r0
 80017e8:	603b      	str	r3, [r7, #0]

	W25Qxxx_Disable();
 80017ea:	f7ff ff83 	bl	80016f4 <W25Qxxx_Disable>
	JEDEC_ID = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	041a      	lsls	r2, r3, #16
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4313      	orrs	r3, r2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
	W25Qxxx_JEDEC_ID = JEDEC_ID;
 80017fe:	4a03      	ldr	r2, [pc, #12]	; (800180c <W25Qxxx_Read_JEDEC_ID+0x60>)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20002270 	.word	0x20002270

08001810 <W25Qxxx_Read_Unique_ID>:

/** ############################################################################################
  * @brief  get W25Qxxx Unique ID [64-bit 8Byte-array]
  */
static void W25Qxxx_Read_Unique_ID(void)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001816:	f7ff ff61 	bl	80016dc <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Unique_ID);
 800181a:	204b      	movs	r0, #75	; 0x4b
 800181c:	f7ff ff48 	bl	80016b0 <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	e005      	b.n	8001832 <W25Qxxx_Read_Unique_ID+0x22>
		W25Qxxx_SPI(CMD_DUMMY);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff ff42 	bl	80016b0 <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d9f6      	bls.n	8001826 <W25Qxxx_Read_Unique_ID+0x16>
	for (uint8_t i = 0; i < 8; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	71bb      	strb	r3, [r7, #6]
 800183c:	e00a      	b.n	8001854 <W25Qxxx_Read_Unique_ID+0x44>
		W25Qxxx_UniqID[i] = W25Qxxx_SPI(CMD_DUMMY);
 800183e:	79bc      	ldrb	r4, [r7, #6]
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff ff35 	bl	80016b0 <W25Qxxx_SPI>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <W25Qxxx_Read_Unique_ID+0x58>)
 800184c:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < 8; i++)
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	3301      	adds	r3, #1
 8001852:	71bb      	strb	r3, [r7, #6]
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d9f1      	bls.n	800183e <W25Qxxx_Read_Unique_ID+0x2e>

	W25Qxxx_Disable();
 800185a:	f7ff ff4b 	bl	80016f4 <W25Qxxx_Disable>
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	20002274 	.word	0x20002274

0800186c <W25Qxxx_Write_Enable>:
	instruction is entered by driving /CS low, shifting the instruction code “06h” into the Data Input (DI) pin on
	the rising edge of CLK, and then driving /CS high.
  * @param  none
  */
static void W25Qxxx_Write_Enable(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001870:	f7ff ff34 	bl	80016dc <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Write_Enable);
 8001874:	2006      	movs	r0, #6
 8001876:	f7ff ff1b 	bl	80016b0 <W25Qxxx_SPI>

	W25Qxxx_Disable();
 800187a:	f7ff ff3b 	bl	80016f4 <W25Qxxx_Disable>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <W25Qxxx_WaitForWriteEnd>:
/** ############################################################################################
  * @brief detect SR1-bit0 BUSY bit
  *
  */
static int8_t W25Qxxx_WaitForWriteEnd(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001888:	f7ff ff28 	bl	80016dc <W25Qxxx_Enable>

	uint32_t sTime = HAL_GetTick();
 800188c:	f000 fcbe 	bl	800220c <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]
	uint32_t useTime = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
	uint8_t reg_res;
	W25Qxxx_SPI(CMD_Reg_1_Read);
 8001896:	2005      	movs	r0, #5
 8001898:	f7ff ff0a 	bl	80016b0 <W25Qxxx_SPI>
	do
	{
		reg_res = W25Qxxx_SPI(CMD_DUMMY);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff07 	bl	80016b0 <W25Qxxx_SPI>
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]

		useTime = HAL_GetTick() - sTime;
 80018a6:	f000 fcb1 	bl	800220c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	60bb      	str	r3, [r7, #8]
	} while (((reg_res & SR1_S0_BUSY) == SR1_S0_BUSY) && (useTime < SPI_FLASH_TIMEOUT));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <W25Qxxx_WaitForWriteEnd+0x44>
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f247 522f 	movw	r2, #29999	; 0x752f
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d9ea      	bls.n	800189c <W25Qxxx_WaitForWriteEnd+0x1a>

	W25Qxxx_Disable();
 80018c6:	f7ff ff15 	bl	80016f4 <W25Qxxx_Disable>

	if (useTime >= SPI_FLASH_TIMEOUT)	// timeOut return 1
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <W25Qxxx_WaitForWriteEnd+0x56>
		return 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <W25Qxxx_WaitForWriteEnd+0x58>
	return 0;	// passed return 0
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <W25Qxxx_SectorToPage>:
/** ############################################################################################
  * @brief  sector convert to pageAddr
  * @retval return pageAddr
  */
static uint32_t W25Qxxx_SectorToPage(uint32_t SectorAddress)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	return (SectorAddress * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <W25Qxxx_SectorToPage+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <W25Qxxx_SectorToPage+0x2c>)
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20002294 	.word	0x20002294
 8001910:	20002268 	.word	0x20002268

08001914 <W25Qxxx_Read_REG_x>:
  * @brief  Read Status Register-1, 2, 3(05h, 35h, 15h)
  * @param  reg_x: [in] 1,2,3
  * @retval retrun SR_x value [Byte]
  */
uint8_t W25Qxxx_Read_REG_x(uint8_t reg_x)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	W25Qxxx_Enable();
 800191e:	f7ff fedd 	bl	80016dc <W25Qxxx_Enable>

	uint8_t res;

	switch(reg_x)
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d018      	beq.n	800195a <W25Qxxx_Read_REG_x+0x46>
 8001928:	2b03      	cmp	r3, #3
 800192a:	dc1f      	bgt.n	800196c <W25Qxxx_Read_REG_x+0x58>
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <W25Qxxx_Read_REG_x+0x22>
 8001930:	2b02      	cmp	r3, #2
 8001932:	d009      	beq.n	8001948 <W25Qxxx_Read_REG_x+0x34>
		case 3:	// reg 3
			W25Qxxx_SPI(CMD_Reg_3_Read);
			res = W25Qxxx_SPI(CMD_DUMMY);
			break;
		default:
			break;
 8001934:	e01a      	b.n	800196c <W25Qxxx_Read_REG_x+0x58>
			W25Qxxx_SPI(CMD_Reg_1_Read);
 8001936:	2005      	movs	r0, #5
 8001938:	f7ff feba 	bl	80016b0 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff feb7 	bl	80016b0 <W25Qxxx_SPI>
 8001942:	4603      	mov	r3, r0
 8001944:	73fb      	strb	r3, [r7, #15]
			break;
 8001946:	e012      	b.n	800196e <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_2_Read);
 8001948:	2035      	movs	r0, #53	; 0x35
 800194a:	f7ff feb1 	bl	80016b0 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff feae 	bl	80016b0 <W25Qxxx_SPI>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
			break;
 8001958:	e009      	b.n	800196e <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_3_Read);
 800195a:	2015      	movs	r0, #21
 800195c:	f7ff fea8 	bl	80016b0 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fea5 	bl	80016b0 <W25Qxxx_SPI>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
			break;
 800196a:	e000      	b.n	800196e <W25Qxxx_Read_REG_x+0x5a>
			break;
 800196c:	bf00      	nop
	}

	W25Qxxx_Disable();
 800196e:	f7ff fec1 	bl	80016f4 <W25Qxxx_Disable>

	return res;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <W25Qxxx_Init>:
/** ############################################################################################
  * @brief W25Qxxx Init global static variable
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	while (HAL_GetTick() < 20)
 8001982:	e002      	b.n	800198a <W25Qxxx_Init+0xe>
		HAL_Delay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 fc4d 	bl	8002224 <HAL_Delay>
	while (HAL_GetTick() < 20)
 800198a:	f000 fc3f 	bl	800220c <HAL_GetTick>
 800198e:	4603      	mov	r3, r0
 8001990:	2b13      	cmp	r3, #19
 8001992:	d9f7      	bls.n	8001984 <W25Qxxx_Init+0x8>
	W25Qxxx_Disable();
 8001994:	f7ff feae 	bl	80016f4 <W25Qxxx_Disable>
	HAL_Delay(20);
 8001998:	2014      	movs	r0, #20
 800199a:	f000 fc43 	bl	8002224 <HAL_Delay>

	W25Qxxx_Power_Up();
 800199e:	f7ff feb5 	bl	800170c <W25Qxxx_Power_Up>
	W25Qxxx_Read_Manu_Dev_ID();
 80019a2:	f7ff fed1 	bl	8001748 <W25Qxxx_Read_Manu_Dev_ID>
	W25Qxxx_Read_JEDEC_ID();
 80019a6:	f7ff ff01 	bl	80017ac <W25Qxxx_Read_JEDEC_ID>

	switch (W25Qxxx_JEDEC_ID & 0x000000FF)
 80019aa:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <W25Qxxx_Init+0x18c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b11      	subs	r3, #17
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	d86b      	bhi.n	8001a8e <W25Qxxx_Init+0x112>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <W25Qxxx_Init+0x40>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a81 	.word	0x08001a81
 80019c0:	08001a73 	.word	0x08001a73
 80019c4:	08001a65 	.word	0x08001a65
 80019c8:	08001a57 	.word	0x08001a57
 80019cc:	08001a49 	.word	0x08001a49
 80019d0:	08001a3b 	.word	0x08001a3b
 80019d4:	08001a2d 	.word	0x08001a2d
 80019d8:	08001a1d 	.word	0x08001a1d
 80019dc:	08001a0d 	.word	0x08001a0d
 80019e0:	08001a8f 	.word	0x08001a8f
 80019e4:	08001a8f 	.word	0x08001a8f
 80019e8:	08001a8f 	.word	0x08001a8f
 80019ec:	08001a8f 	.word	0x08001a8f
 80019f0:	08001a8f 	.word	0x08001a8f
 80019f4:	08001a8f 	.word	0x08001a8f
 80019f8:	080019fd 	.word	0x080019fd
	{
	case 0x20: // 	W25Q512
		W25Qxxx_ID = W25Q512;
 80019fc:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <W25Qxxx_Init+0x190>)
 80019fe:	220a      	movs	r2, #10
 8001a00:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 1024;
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a08:	601a      	str	r2, [r3, #0]
		break;
 8001a0a:	e042      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x19: // 	W25Q256
		W25Qxxx_ID = W25Q256;
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a0e:	2209      	movs	r2, #9
 8001a10:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 512;
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a18:	601a      	str	r2, [r3, #0]
		break;
 8001a1a:	e03a      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x18: // 	W25Q128
		W25Qxxx_ID = W25Q128;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a1e:	2208      	movs	r2, #8
 8001a20:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 256;
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a28:	601a      	str	r2, [r3, #0]
		break;
 8001a2a:	e032      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x17: //	W25Q64
		W25Qxxx_ID = W25Q64;
 8001a2c:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 128;
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	601a      	str	r2, [r3, #0]
		break;
 8001a38:	e02b      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x16: //	W25Q32
		W25Qxxx_ID = W25Q32;
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a3c:	2206      	movs	r2, #6
 8001a3e:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 64;
 8001a40:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	601a      	str	r2, [r3, #0]
		break;
 8001a46:	e024      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x15: //	W25Q16
		W25Qxxx_ID = W25Q16;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 32;
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a50:	2220      	movs	r2, #32
 8001a52:	601a      	str	r2, [r3, #0]
		break;
 8001a54:	e01d      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x14: //	W25Q80
		W25Qxxx_ID = W25Q80;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a58:	2204      	movs	r2, #4
 8001a5a:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 16;
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a5e:	2210      	movs	r2, #16
 8001a60:	601a      	str	r2, [r3, #0]
		break;
 8001a62:	e016      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x13: //	W25Q40
		W25Qxxx_ID = W25Q40;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 8;
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
		break;
 8001a70:	e00f      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x12: //	W25Q20
		W25Qxxx_ID = W25Q20;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 4;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
		break;
 8001a7e:	e008      	b.n	8001a92 <W25Qxxx_Init+0x116>
	case 0x11: //	W25Q10
		W25Qxxx_ID = W25Q10;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <W25Qxxx_Init+0x190>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 2;
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
		break;
 8001a8c:	e001      	b.n	8001a92 <W25Qxxx_Init+0x116>
	default:
		return 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e035      	b.n	8001afe <W25Qxxx_Init+0x182>
	}
	W25Qxxx_PageSize = 256;					// 256  Byte
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <W25Qxxx_Init+0x198>)
 8001a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a98:	801a      	strh	r2, [r3, #0]
	W25Qxxx_SectorSize = 0x1000;			// 4096 Byte
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <W25Qxxx_Init+0x19c>)
 8001a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa0:	601a      	str	r2, [r3, #0]
	W25Qxxx_SectorCount = W25Qxxx_BlockCount * 16;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <W25Qxxx_Init+0x194>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <W25Qxxx_Init+0x1a0>)
 8001aaa:	6013      	str	r3, [r2, #0]
	W25Qxxx_PageCount = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <W25Qxxx_Init+0x1a0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <W25Qxxx_Init+0x19c>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <W25Qxxx_Init+0x198>)
 8001aba:	8812      	ldrh	r2, [r2, #0]
 8001abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <W25Qxxx_Init+0x1a4>)
 8001ac2:	6013      	str	r3, [r2, #0]
	W25Qxxx_BlockSize = W25Qxxx_SectorSize * 16;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <W25Qxxx_Init+0x19c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <W25Qxxx_Init+0x1a8>)
 8001acc:	6013      	str	r3, [r2, #0]
	W25Qxxx_CapacityInKiloByte = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / 1024;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <W25Qxxx_Init+0x1a0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <W25Qxxx_Init+0x19c>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <W25Qxxx_Init+0x1ac>)
 8001ade:	6013      	str	r3, [r2, #0]
	W25Qxxx_Read_Unique_ID();
 8001ae0:	f7ff fe96 	bl	8001810 <W25Qxxx_Read_Unique_ID>

	uint8_t regVal = W25Qxxx_Read_REG_x(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff ff15 	bl	8001914 <W25Qxxx_Read_REG_x>
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]

	if ((regVal&SR1_S0_BUSY) == SR1_S0_BUSY)
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <W25Qxxx_Init+0x180>
		return 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <W25Qxxx_Init+0x182>

	return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20002270 	.word	0x20002270
 8001b0c:	20002288 	.word	0x20002288
 8001b10:	2000226c 	.word	0x2000226c
 8001b14:	20002268 	.word	0x20002268
 8001b18:	20002294 	.word	0x20002294
 8001b1c:	2000228c 	.word	0x2000228c
 8001b20:	20002298 	.word	0x20002298
 8001b24:	20002280 	.word	0x20002280
 8001b28:	20002284 	.word	0x20002284

08001b2c <W25Qxxx_EraseSector>:
  * @brief  Sector erase 4KB
  * @param  SectorAddr: [in] 0 ~ W25Qxxx_SectorCount-1
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_EraseSector(uint32_t SectorAddr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	if (W25Qxxx_ID == 0)
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <W25Qxxx_EraseSector+0x84>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <W25Qxxx_EraseSector+0x14>
		return 1;		// w25qxx Unknown
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <W25Qxxx_EraseSector+0x7a>

	W25Qxxx_WaitForWriteEnd();
 8001b40:	f7ff fe9f 	bl	8001882 <W25Qxxx_WaitForWriteEnd>

	SectorAddr = SectorAddr * W25Qxxx_SectorSize;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <W25Qxxx_EraseSector+0x88>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	607b      	str	r3, [r7, #4]
	W25Qxxx_Write_Enable();
 8001b50:	f7ff fe8c 	bl	800186c <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001b54:	f7ff fdc2 	bl	80016dc <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <W25Qxxx_EraseSector+0x84>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d909      	bls.n	8001b74 <W25Qxxx_EraseSector+0x48>
	{
		W25Qxxx_SPI(CMD_Erase_Sector_4_Byte_Addr);
 8001b60:	2021      	movs	r0, #33	; 0x21
 8001b62:	f7ff fda5 	bl	80016b0 <W25Qxxx_SPI>
		W25Qxxx_SPI((SectorAddr & 0xFF000000) >> 24);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0e1b      	lsrs	r3, r3, #24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fd9f 	bl	80016b0 <W25Qxxx_SPI>
 8001b72:	e002      	b.n	8001b7a <W25Qxxx_EraseSector+0x4e>
	}
	else
	{
		W25Qxxx_SPI(CMD_Erase_Sector);
 8001b74:	2020      	movs	r0, #32
 8001b76:	f7ff fd9b 	bl	80016b0 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((SectorAddr & 0xFF0000) >> 16);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fd95 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI((SectorAddr & 0xFF00) >> 8);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fd8f 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI( SectorAddr & 0xFF);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fd8a 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_Disable();
 8001b9c:	f7ff fdaa 	bl	80016f4 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001ba0:	f7ff fe6f 	bl	8001882 <W25Qxxx_WaitForWriteEnd>

	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20002288 	.word	0x20002288
 8001bb4:	20002294 	.word	0x20002294

08001bb8 <W25Qxxx_WritePage>:
  * @param Page_Address: [in] page address (0 - W25Qxxx_PageCount-1)
  * @param OffsetInByte: [in] offset address
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WritePage(const uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <W25Qxxx_WritePage+0xc4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <W25Qxxx_WritePage+0x1a>
		return 1;		// w25qxx Unknown
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e050      	b.n	8001c74 <W25Qxxx_WritePage+0xbc>

	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > W25Qxxx_PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <W25Qxxx_WritePage+0xc8>)
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d802      	bhi.n	8001be6 <W25Qxxx_WritePage+0x2e>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <W25Qxxx_WritePage+0x3a>
		NumByteToWrite_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <W25Qxxx_WritePage+0xc8>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	603b      	str	r3, [r7, #0]

	W25Qxxx_WaitForWriteEnd();
 8001bf2:	f7ff fe46 	bl	8001882 <W25Qxxx_WaitForWriteEnd>

	W25Qxxx_Write_Enable();
 8001bf6:	f7ff fe39 	bl	800186c <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001bfa:	f7ff fd6f 	bl	80016dc <W25Qxxx_Enable>

	Page_Address = (Page_Address * W25Qxxx_PageSize) + OffsetInByte;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <W25Qxxx_WritePage+0xc8>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	fb03 f302 	mul.w	r3, r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
	if (W25Qxxx_ID >= W25Q256)
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <W25Qxxx_WritePage+0xc4>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d909      	bls.n	8001c2c <W25Qxxx_WritePage+0x74>
	{
		W25Qxxx_SPI(CMD_Page_Program_4_Byte_Addr);
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f7ff fd49 	bl	80016b0 <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0e1b      	lsrs	r3, r3, #24
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fd43 	bl	80016b0 <W25Qxxx_SPI>
 8001c2a:	e002      	b.n	8001c32 <W25Qxxx_WritePage+0x7a>
	}
	else
	{
		W25Qxxx_SPI(CMD_Page_Program);
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7ff fd3f 	bl	80016b0 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fd39 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fd33 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fd2e 	bl	80016b0 <W25Qxxx_SPI>
	HAL_SPI_Transmit(&hspi_flash, (uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize, SPI_FLASH_TIMEOUT);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	f247 5330 	movw	r3, #30000	; 0x7530
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	4809      	ldr	r0, [pc, #36]	; (8001c84 <W25Qxxx_WritePage+0xcc>)
 8001c60:	f001 fa9b 	bl	800319a <HAL_SPI_Transmit>

	W25Qxxx_Disable();
 8001c64:	f7ff fd46 	bl	80016f4 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001c68:	f7ff fe0b 	bl	8001882 <W25Qxxx_WaitForWriteEnd>

	HAL_Delay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f000 fad9 	bl	8002224 <HAL_Delay>

	return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20002288 	.word	0x20002288
 8001c80:	20002268 	.word	0x20002268
 8001c84:	20001164 	.word	0x20001164

08001c88 <W25Qxxx_WriteSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToWrite_up_to_SectorSize: [in] Byte data number
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WriteSector(const uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <W25Qxxx_WriteSector+0xdc>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <W25Qxxx_WriteSector+0x1a>
		return 1;		// w25qxx Unknown
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e05c      	b.n	8001d5c <W25Qxxx_WriteSector+0xd4>

	if ((NumByteToWrite_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <W25Qxxx_WriteSector+0xe0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d802      	bhi.n	8001cb2 <W25Qxxx_WriteSector+0x2a>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <W25Qxxx_WriteSector+0x30>
		NumByteToWrite_up_to_SectorSize = W25Qxxx_SectorSize;
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <W25Qxxx_WriteSector+0xe0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	603b      	str	r3, [r7, #0]

	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <W25Qxxx_WriteSector+0xe0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d301      	bcc.n	8001cc6 <W25Qxxx_WriteSector+0x3e>
	{
		return 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e04a      	b.n	8001d5c <W25Qxxx_WriteSector+0xd4>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	441a      	add	r2, r3
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <W25Qxxx_WriteSector+0xe0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d905      	bls.n	8001ce0 <W25Qxxx_WriteSector+0x58>
		BytesToWrite = W25Qxxx_SectorSize - OffsetInByte;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <W25Qxxx_WriteSector+0xe0>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	e001      	b.n	8001ce4 <W25Qxxx_WriteSector+0x5c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]

	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001ce4:	68b8      	ldr	r0, [r7, #8]
 8001ce6:	f7ff fdfd 	bl	80018e4 <W25Qxxx_SectorToPage>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <W25Qxxx_WriteSector+0xe4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <W25Qxxx_WriteSector+0xe4>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d08:	fb02 f201 	mul.w	r2, r2, r1
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
	do
	{
		uint8_t res = W25Qxxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff4e 	bl	8001bb8 <W25Qxxx_WritePage>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	74fb      	strb	r3, [r7, #19]
		if (res != 0)
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <W25Qxxx_WriteSector+0xa2>
			return 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e018      	b.n	8001d5c <W25Qxxx_WriteSector+0xd4>
		StartPage++;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= W25Qxxx_PageSize - LocalOffset;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <W25Qxxx_WriteSector+0xe4>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	1a9a      	subs	r2, r3, r2
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <W25Qxxx_WriteSector+0xe4>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	dcda      	bgt.n	8001d10 <W25Qxxx_WriteSector+0x88>

	return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20002288 	.word	0x20002288
 8001d68:	20002294 	.word	0x20002294
 8001d6c:	20002268 	.word	0x20002268

08001d70 <W25Qxxx_ReadPage>:
  * @param OffsetInByte: [in] offset byte number   [0 --- offset ------ 255]
  * @param NumByteToRead_up_to_PageSize: [in] read byte number  max 256Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <W25Qxxx_ReadPage+0xcc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <W25Qxxx_ReadPage+0x1a>
		return 1;		// w25qxx Unknown
 8001d86:	2301      	movs	r3, #1
 8001d88:	e053      	b.n	8001e32 <W25Qxxx_ReadPage+0xc2>

	if ((NumByteToRead_up_to_PageSize > W25Qxxx_PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <W25Qxxx_ReadPage+0xd0>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d802      	bhi.n	8001d9c <W25Qxxx_ReadPage+0x2c>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <W25Qxxx_ReadPage+0x32>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <W25Qxxx_ReadPage+0xd0>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > W25Qxxx_PageSize)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <W25Qxxx_ReadPage+0xd0>)
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d905      	bls.n	8001dbc <W25Qxxx_ReadPage+0x4c>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <W25Qxxx_ReadPage+0xd0>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * W25Qxxx_PageSize + OffsetInByte;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <W25Qxxx_ReadPage+0xd0>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	fb03 f302 	mul.w	r3, r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]

	W25Qxxx_Enable();
 8001dce:	f7ff fc85 	bl	80016dc <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <W25Qxxx_ReadPage+0xcc>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d909      	bls.n	8001dee <W25Qxxx_ReadPage+0x7e>
	{
		W25Qxxx_SPI(CMD_Fast_Read_4_Byte_Addr);
 8001dda:	200c      	movs	r0, #12
 8001ddc:	f7ff fc68 	bl	80016b0 <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0e1b      	lsrs	r3, r3, #24
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc62 	bl	80016b0 <W25Qxxx_SPI>
 8001dec:	e002      	b.n	8001df4 <W25Qxxx_ReadPage+0x84>
	}
	else
	{
		W25Qxxx_SPI(CMD_Fast_Read);
 8001dee:	200b      	movs	r0, #11
 8001df0:	f7ff fc5e 	bl	80016b0 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fc58 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fc52 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fc4d 	bl	80016b0 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff fc4a 	bl	80016b0 <W25Qxxx_SPI>
	HAL_SPI_Receive(&hspi_flash, pBuffer, NumByteToRead_up_to_PageSize, SPI_FLASH_TIMEOUT);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f247 5330 	movw	r3, #30000	; 0x7530
 8001e24:	68f9      	ldr	r1, [r7, #12]
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <W25Qxxx_ReadPage+0xd4>)
 8001e28:	f001 faf3 	bl	8003412 <HAL_SPI_Receive>

	W25Qxxx_Disable();
 8001e2c:	f7ff fc62 	bl	80016f4 <W25Qxxx_Disable>

	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20002288 	.word	0x20002288
 8001e40:	20002268 	.word	0x20002268
 8001e44:	20001164 	.word	0x20001164

08001e48 <W25Qxxx_ReadSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToRead_up_to_SectorSize: [in] read byte number  max 4096Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <W25Qxxx_ReadSector+0xd0>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <W25Qxxx_ReadSector+0x1a>
		return 1;		// w25qxx Unknown
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e055      	b.n	8001f0e <W25Qxxx_ReadSector+0xc6>

	if ((NumByteToRead_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <W25Qxxx_ReadSector+0xd4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d802      	bhi.n	8001e72 <W25Qxxx_ReadSector+0x2a>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <W25Qxxx_ReadSector+0x30>
		NumByteToRead_up_to_SectorSize = W25Qxxx_SectorSize;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <W25Qxxx_ReadSector+0xd4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	603b      	str	r3, [r7, #0]
	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <W25Qxxx_ReadSector+0xd4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d301      	bcc.n	8001e86 <W25Qxxx_ReadSector+0x3e>
	{
		return 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e043      	b.n	8001f0e <W25Qxxx_ReadSector+0xc6>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	441a      	add	r2, r3
 8001e8c:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <W25Qxxx_ReadSector+0xd4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d905      	bls.n	8001ea0 <W25Qxxx_ReadSector+0x58>
		BytesToRead = W25Qxxx_SectorSize - OffsetInByte;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <W25Qxxx_ReadSector+0xd4>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	e001      	b.n	8001ea4 <W25Qxxx_ReadSector+0x5c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001ea4:	68b8      	ldr	r0, [r7, #8]
 8001ea6:	f7ff fd1d 	bl	80018e4 <W25Qxxx_SectorToPage>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <W25Qxxx_ReadSector+0xd8>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb8:	4413      	add	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <W25Qxxx_ReadSector+0xd8>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ec8:	fb02 f201 	mul.w	r2, r2, r1
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
	do
	{
		W25Qxxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	69f9      	ldr	r1, [r7, #28]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff ff4a 	bl	8001d70 <W25Qxxx_ReadPage>
		StartPage++;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= W25Qxxx_PageSize - LocalOffset;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <W25Qxxx_ReadSector+0xd8>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1a9a      	subs	r2, r3, r2
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	4413      	add	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <W25Qxxx_ReadSector+0xd8>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dce1      	bgt.n	8001ed0 <W25Qxxx_ReadSector+0x88>

	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20002288 	.word	0x20002288
 8001f1c:	20002294 	.word	0x20002294
 8001f20:	20002268 	.word	0x20002268

08001f24 <W25Qxxx_diskio_initialize>:
/** ------------------------------------------------------------------------ /
  * @brief  Initializes a Drive [spi flash W25Qxxx]
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_initialize (void)               /*!< Initialize Disk Drive                     */
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <W25Qxxx_diskio_initialize+0x30>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
	if (W25Qxxx_Init() == FLASH_OK)
 8001f2e:	f7ff fd25 	bl	800197c <W25Qxxx_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <W25Qxxx_diskio_initialize+0x24>
	{
		Stat &= ~STA_NOINIT;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <W25Qxxx_diskio_initialize+0x30>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <W25Qxxx_diskio_initialize+0x30>)
 8001f46:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <W25Qxxx_diskio_initialize+0x30>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000003c 	.word	0x2000003c

08001f58 <W25Qxxx_diskio_status>:
/** ------------------------------------------------------------------------ /
  * @brief  Gets Disk Status
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_status (void)                     /*!< Get Disk Status */
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <W25Qxxx_diskio_status+0x34>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]

	if ((W25Qxxx_Read_REG_x(1)&SR1_S0_BUSY) != SR1_S0_BUSY)
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff fcd6 	bl	8001914 <W25Qxxx_Read_REG_x>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d007      	beq.n	8001f82 <W25Qxxx_diskio_status+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <W25Qxxx_diskio_status+0x34>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <W25Qxxx_diskio_status+0x34>)
 8001f80:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001f82:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <W25Qxxx_diskio_status+0x34>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000003c 	.word	0x2000003c

08001f90 <W25Qxxx_diskio_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..8192)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_read (BYTE *buff, DWORD sector, UINT count)	     /*!< Read Sector(s) */
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001fa0:	f7ff fc6f 	bl	8001882 <W25Qxxx_WaitForWriteEnd>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <W25Qxxx_diskio_read+0x1e>
		return res;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	e011      	b.n	8001fd2 <W25Qxxx_diskio_read+0x42>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <W25Qxxx_diskio_read+0x4c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_ReadSector(buff, sector, 0, sectorCount) == 0)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff ff41 	bl	8001e48 <W25Qxxx_ReadSector>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <W25Qxxx_diskio_read+0x40>
	{
		res = RES_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20002294 	.word	0x20002294

08001fe0 <W25Qxxx_diskio_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_write (const BYTE *buff, DWORD sector, UINT count) /*!< Write Sector(s) when _USE_WRITE = 0 */
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001ff0:	f7ff fc47 	bl	8001882 <W25Qxxx_WaitForWriteEnd>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <W25Qxxx_diskio_write+0x1e>
		return res;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	e027      	b.n	800204e <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_EraseSector(sector) != 0)
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f7ff fd94 	bl	8001b2c <W25Qxxx_EraseSector>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <W25Qxxx_diskio_write+0x2e>
		return res;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	e01f      	b.n	800204e <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_WaitForWriteEnd() != 0)
 800200e:	f7ff fc38 	bl	8001882 <W25Qxxx_WaitForWriteEnd>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <W25Qxxx_diskio_write+0x3c>
		return res;
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	e018      	b.n	800204e <W25Qxxx_diskio_write+0x6e>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <W25Qxxx_diskio_write+0x78>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_WriteSector(buff, sector, 0, sectorCount) == 0)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2200      	movs	r2, #0
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fe2a 	bl	8001c88 <W25Qxxx_WriteSector>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <W25Qxxx_diskio_write+0x5e>
	{
		res = RES_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	75fb      	strb	r3, [r7, #23]
	}

	if (W25Qxxx_WaitForWriteEnd() != 0)
 800203e:	f7ff fc20 	bl	8001882 <W25Qxxx_WaitForWriteEnd>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <W25Qxxx_diskio_write+0x6c>
			return res;
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	e000      	b.n	800204e <W25Qxxx_diskio_write+0x6e>

	return res;
 800204c:	7dfb      	ldrb	r3, [r7, #23]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20002294 	.word	0x20002294

0800205c <W25Qxxx_diskio_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_ioctl(BYTE cmd, void *buff)             /*!< I/O control operation when _USE_IOCTL = 1 */
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
	  DRESULT res = RES_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <W25Qxxx_diskio_ioctl+0x84>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <W25Qxxx_diskio_ioctl+0x22>
 800207a:	2303      	movs	r3, #3
 800207c:	e029      	b.n	80020d2 <W25Qxxx_diskio_ioctl+0x76>

	  switch (cmd)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d823      	bhi.n	80020cc <W25Qxxx_diskio_ioctl+0x70>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <W25Qxxx_diskio_ioctl+0x30>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020a3 	.word	0x080020a3
 8002094:	080020b1 	.word	0x080020b1
 8002098:	080020c1 	.word	0x080020c1
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
	    break;
 80020a0:	e016      	b.n	80020d0 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    *(DWORD*)buff = W25Qxxx_SectorCount;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <W25Qxxx_diskio_ioctl+0x88>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
	    break;
 80020ae:	e00f      	b.n	80020d0 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    *(WORD*)buff = W25Qxxx_SectorSize;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <W25Qxxx_diskio_ioctl+0x8c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
	    break;
 80020be:	e007      	b.n	80020d0 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    *(DWORD*)buff = 1;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
	    break;
 80020ca:	e001      	b.n	80020d0 <W25Qxxx_diskio_ioctl+0x74>

	  default:
	    res = RES_PARERR;
 80020cc:	2304      	movs	r3, #4
 80020ce:	73fb      	strb	r3, [r7, #15]
	  }

	  return res;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000003c 	.word	0x2000003c
 80020e4:	2000228c 	.word	0x2000228c
 80020e8:	20002294 	.word	0x20002294

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002124 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020f2:	490e      	ldr	r1, [pc, #56]	; (800212c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002108:	4c0b      	ldr	r4, [pc, #44]	; (8002138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002116:	f7ff fab9 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211a:	f005 f929 	bl	8007370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe ff09 	bl	8000f34 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002124:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002130:	08008a4c 	.word	0x08008a4c
  ldr r2, =_sbss
 8002134:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002138:	2000431c 	.word	0x2000431c

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0d      	ldr	r2, [pc, #52]	; (8002180 <HAL_Init+0x40>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_Init+0x40>)
 8002156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a07      	ldr	r2, [pc, #28]	; (8002180 <HAL_Init+0x40>)
 8002162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002168:	2003      	movs	r0, #3
 800216a:	f000 f931 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f808 	bl	8002184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002174:	f7ff f920 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x54>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x58>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f93b 	bl	800241e <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00e      	b.n	80021d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d80a      	bhi.n	80021ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f000 f911 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_InitTick+0x5c>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000038 	.word	0x20000038
 80021dc:	20000044 	.word	0x20000044
 80021e0:	20000040 	.word	0x20000040

080021e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000044 	.word	0x20000044
 8002208:	2000229c 	.word	0x2000229c

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000229c 	.word	0x2000229c

08002224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff ffee 	bl	800220c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d005      	beq.n	800224a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_Delay+0x44>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224a:	bf00      	nop
 800224c:	f7ff ffde 	bl	800220c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	429a      	cmp	r2, r3
 800225a:	d8f7      	bhi.n	800224c <HAL_Delay+0x28>
  {
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000044 	.word	0x20000044

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff47 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff5c 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffb0 	bl	800238c <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e177      	b.n	8002744 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8166 	bne.w	800273e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80c0 	beq.w	800273e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_GPIO_Init+0x324>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_GPIO_Init+0x324>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_GPIO_Init+0x324>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_GPIO_Init+0x328>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_GPIO_Init+0x32c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d037      	beq.n	8002676 <HAL_GPIO_Init+0x23e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_GPIO_Init+0x330>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_GPIO_Init+0x23a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_GPIO_Init+0x334>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02b      	beq.n	800266e <HAL_GPIO_Init+0x236>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_GPIO_Init+0x338>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d025      	beq.n	800266a <HAL_GPIO_Init+0x232>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a54      	ldr	r2, [pc, #336]	; (8002774 <HAL_GPIO_Init+0x33c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01f      	beq.n	8002666 <HAL_GPIO_Init+0x22e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a53      	ldr	r2, [pc, #332]	; (8002778 <HAL_GPIO_Init+0x340>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d019      	beq.n	8002662 <HAL_GPIO_Init+0x22a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_GPIO_Init+0x344>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0x226>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a51      	ldr	r2, [pc, #324]	; (8002780 <HAL_GPIO_Init+0x348>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_Init+0x222>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_GPIO_Init+0x34c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_Init+0x21e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4f      	ldr	r2, [pc, #316]	; (8002788 <HAL_GPIO_Init+0x350>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_Init+0x21a>
 800264e:	2309      	movs	r3, #9
 8002650:	e012      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002652:	230a      	movs	r3, #10
 8002654:	e010      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002656:	2308      	movs	r3, #8
 8002658:	e00e      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800265a:	2307      	movs	r3, #7
 800265c:	e00c      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800265e:	2306      	movs	r3, #6
 8002660:	e00a      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002662:	2305      	movs	r3, #5
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002666:	2304      	movs	r3, #4
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x240>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x240>
 8002676:	2300      	movs	r3, #0
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f002 0203 	and.w	r2, r2, #3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4093      	lsls	r3, r2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002688:	4935      	ldr	r1, [pc, #212]	; (8002760 <HAL_GPIO_Init+0x328>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002696:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_GPIO_Init+0x354>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ba:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_GPIO_Init+0x354>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c0:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_GPIO_Init+0x354>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e4:	4a29      	ldr	r2, [pc, #164]	; (800278c <HAL_GPIO_Init+0x354>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <HAL_GPIO_Init+0x354>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <HAL_GPIO_Init+0x354>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_GPIO_Init+0x354>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_GPIO_Init+0x354>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	f67f ae84 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40013800 	.word	0x40013800
 8002764:	40020000 	.word	0x40020000
 8002768:	40020400 	.word	0x40020400
 800276c:	40020800 	.word	0x40020800
 8002770:	40020c00 	.word	0x40020c00
 8002774:	40021000 	.word	0x40021000
 8002778:	40021400 	.word	0x40021400
 800277c:	40021800 	.word	0x40021800
 8002780:	40021c00 	.word	0x40021c00
 8002784:	40022000 	.word	0x40022000
 8002788:	40022400 	.word	0x40022400
 800278c:	40013c00 	.word	0x40013c00

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ac:	e003      	b.n	80027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	041a      	lsls	r2, r3, #16
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	041a      	lsls	r2, r3, #16
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43d9      	mvns	r1, r3
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	400b      	ands	r3, r1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e264      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d075      	beq.n	8002902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	4ba3      	ldr	r3, [pc, #652]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	d00c      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	2b08      	cmp	r3, #8
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e23f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x74>
 800285e:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a90      	ldr	r2, [pc, #576]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8a      	ldr	r2, [pc, #552]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 8002890:	4b84      	ldr	r3, [pc, #528]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a83      	ldr	r2, [pc, #524]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fcac 	bl	800220c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fca8 	bl	800220c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e204      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fc98 	bl	800220c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fc94 	bl	800220c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1f0      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c4      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b56      	ldr	r3, [pc, #344]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4952      	ldr	r1, [pc, #328]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCC_OscConfig+0x2b0>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7ff fc4d 	bl	800220c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fc49 	bl	800220c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a5      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4940      	ldr	r1, [pc, #256]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0x2b0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7ff fc2c 	bl	800220c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff fc28 	bl	800220c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e184      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d030      	beq.n	8002a44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_RCC_OscConfig+0x2b4>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff fc0c 	bl	800220c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff fc08 	bl	800220c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e164      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x200>
 8002a16:	e015      	b.n	8002a44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x2b4>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fbf5 	bl	800220c <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a26:	f7ff fbf1 	bl	800220c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e14d      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a0 	beq.w	8002b92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x2b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_OscConfig+0x2b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_RCC_OscConfig+0x2b8>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fbb7 	bl	800220c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e011      	b.n	8002ac6 <HAL_RCC_OscConfig+0x2ce>
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	42470000 	.word	0x42470000
 8002aac:	42470e80 	.word	0x42470e80
 8002ab0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7ff fbaa 	bl	800220c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e106      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b85      	ldr	r3, [pc, #532]	; (8002cdc <HAL_RCC_OscConfig+0x4e4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
 8002ada:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e01c      	b.n	8002b22 <HAL_RCC_OscConfig+0x32a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x312>
 8002af0:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a77      	ldr	r2, [pc, #476]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x32a>
 8002b0a:	4b75      	ldr	r3, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a74      	ldr	r2, [pc, #464]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a71      	ldr	r2, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fb6f 	bl	800220c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7ff fb6b 	bl	800220c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0c5      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RCC_OscConfig+0x33a>
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7ff fb59 	bl	800220c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7ff fb55 	bl	800220c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0af      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b74:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d105      	bne.n	8002b92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b86:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a55      	ldr	r2, [pc, #340]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 809b 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d05c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d141      	bne.n	8002c34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fb29 	bl	800220c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7ff fb25 	bl	800220c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e081      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	019b      	lsls	r3, r3, #6
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c06:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fafe 	bl	800220c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff fafa 	bl	800220c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e056      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x41c>
 8002c32:	e04e      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff fae7 	bl	800220c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7ff fae3 	bl	800220c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x44a>
 8002c60:	e037      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e032      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_RCC_OscConfig+0x4e8>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d028      	beq.n	8002cce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d121      	bne.n	8002cce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d11a      	bne.n	8002cce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470060 	.word	0x42470060

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cc      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d90c      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d044      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d119      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e067      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4934      	ldr	r1, [pc, #208]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd8:	f7ff fa18 	bl	800220c <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7ff fa14 	bl	800220c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e04f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 020c 	and.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1eb      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d20c      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f978 	bl	8002184 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080088f8 	.word	0x080088f8
 8002eac:	20000038 	.word	0x20000038
 8002eb0:	20000040 	.word	0x20000040

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eba:	2100      	movs	r1, #0
 8002ebc:	6079      	str	r1, [r7, #4]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	60f9      	str	r1, [r7, #12]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eca:	4952      	ldr	r1, [pc, #328]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ecc:	6889      	ldr	r1, [r1, #8]
 8002ece:	f001 010c 	and.w	r1, r1, #12
 8002ed2:	2908      	cmp	r1, #8
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002ed6:	2908      	cmp	r1, #8
 8002ed8:	f200 8094 	bhi.w	8003004 <HAL_RCC_GetSysClockFreq+0x150>
 8002edc:	2900      	cmp	r1, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ee0:	2904      	cmp	r1, #4
 8002ee2:	d003      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x38>
 8002ee4:	e08e      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ee8:	60bb      	str	r3, [r7, #8]
       break;
 8002eea:	e08e      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eec:	4b4b      	ldr	r3, [pc, #300]	; (800301c <HAL_RCC_GetSysClockFreq+0x168>)
 8002eee:	60bb      	str	r3, [r7, #8]
      break;
 8002ef0:	e08b      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef2:	4948      	ldr	r1, [pc, #288]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ef4:	6849      	ldr	r1, [r1, #4]
 8002ef6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002efa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efc:	4945      	ldr	r1, [pc, #276]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002efe:	6849      	ldr	r1, [r1, #4]
 8002f00:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f04:	2900      	cmp	r1, #0
 8002f06:	d024      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f08:	4942      	ldr	r1, [pc, #264]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f0a:	6849      	ldr	r1, [r1, #4]
 8002f0c:	0989      	lsrs	r1, r1, #6
 8002f0e:	4608      	mov	r0, r1
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f18:	f04f 0500 	mov.w	r5, #0
 8002f1c:	ea00 0204 	and.w	r2, r0, r4
 8002f20:	ea01 0305 	and.w	r3, r1, r5
 8002f24:	493d      	ldr	r1, [pc, #244]	; (800301c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f26:	fb01 f003 	mul.w	r0, r1, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	fb01 f102 	mul.w	r1, r1, r2
 8002f30:	1844      	adds	r4, r0, r1
 8002f32:	493a      	ldr	r1, [pc, #232]	; (800301c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f34:	fba2 0101 	umull	r0, r1, r2, r1
 8002f38:	1863      	adds	r3, r4, r1
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f7fd fd9a 	bl	8000a7c <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e04a      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	099b      	lsrs	r3, r3, #6
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	ea02 0400 	and.w	r4, r2, r0
 8002f6a:	ea03 0501 	and.w	r5, r3, r1
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	014b      	lsls	r3, r1, #5
 8002f7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f80:	0142      	lsls	r2, r0, #5
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	1b00      	subs	r0, r0, r4
 8002f88:	eb61 0105 	sbc.w	r1, r1, r5
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	018b      	lsls	r3, r1, #6
 8002f96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f9a:	0182      	lsls	r2, r0, #6
 8002f9c:	1a12      	subs	r2, r2, r0
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	00d9      	lsls	r1, r3, #3
 8002fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fb0:	00d0      	lsls	r0, r2, #3
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	1912      	adds	r2, r2, r4
 8002fb8:	eb45 0303 	adc.w	r3, r5, r3
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	0299      	lsls	r1, r3, #10
 8002fc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fca:	0290      	lsls	r0, r2, #10
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	f7fd fd4e 	bl	8000a7c <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	60bb      	str	r3, [r7, #8]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <HAL_RCC_GetSysClockFreq+0x164>)
 8003006:	60bb      	str	r3, [r7, #8]
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	68bb      	ldr	r3, [r7, #8]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bdb0      	pop	{r4, r5, r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	00f42400 	.word	0x00f42400
 800301c:	017d7840 	.word	0x017d7840

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000038 	.word	0x20000038

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff0 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	08008908 	.word	0x08008908

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffdc 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	08008908 	.word	0x08008908

08003088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e07b      	b.n	8003192 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030aa:	d009      	beq.n	80030c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
 80030b2:	e005      	b.n	80030c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe f994 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	ea42 0103 	orr.w	r1, r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f003 0104 	and.w	r1, r3, #4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	f003 0210 	and.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b088      	sub	sp, #32
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_SPI_Transmit+0x22>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e126      	b.n	800340a <HAL_SPI_Transmit+0x270>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c4:	f7ff f822 	bl	800220c <HAL_GetTick>
 80031c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031de:	e10b      	b.n	80033f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Transmit+0x52>
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f0:	e102      	b.n	80033f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d10f      	bne.n	800325a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003258:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d007      	beq.n	8003278 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003280:	d14b      	bne.n	800331a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0xf6>
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d13e      	bne.n	800330e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032b4:	e02b      	b.n	800330e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d112      	bne.n	80032ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80032e8:	e011      	b.n	800330e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ea:	f7fe ff8f 	bl	800220c <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d803      	bhi.n	8003302 <HAL_SPI_Transmit+0x168>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Transmit+0x16e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800330c:	e074      	b.n	80033f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1ce      	bne.n	80032b6 <HAL_SPI_Transmit+0x11c>
 8003318:	e04c      	b.n	80033b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Transmit+0x18e>
 8003322:	8afb      	ldrh	r3, [r7, #22]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d140      	bne.n	80033aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800334e:	e02c      	b.n	80033aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d113      	bne.n	8003386 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	86da      	strh	r2, [r3, #54]	; 0x36
 8003384:	e011      	b.n	80033aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003386:	f7fe ff41 	bl	800220c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d803      	bhi.n	800339e <HAL_SPI_Transmit+0x204>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d102      	bne.n	80033a4 <HAL_SPI_Transmit+0x20a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033a8:	e026      	b.n	80033f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1cd      	bne.n	8003350 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fbcb 	bl	8003b54 <SPI_EndRxTxTransaction>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
 80033f4:	e000      	b.n	80033f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003408:	7ffb      	ldrb	r3, [r7, #31]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b088      	sub	sp, #32
 8003416:	af02      	add	r7, sp, #8
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342e:	d112      	bne.n	8003456 <HAL_SPI_Receive+0x44>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10e      	bne.n	8003456 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2204      	movs	r2, #4
 800343c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f8f1 	bl	8003634 <HAL_SPI_TransmitReceive>
 8003452:	4603      	mov	r3, r0
 8003454:	e0ea      	b.n	800362c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_SPI_Receive+0x52>
 8003460:	2302      	movs	r3, #2
 8003462:	e0e3      	b.n	800362c <HAL_SPI_Receive+0x21a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346c:	f7fe fece 	bl	800220c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800347e:	2302      	movs	r3, #2
 8003480:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003482:	e0ca      	b.n	800361a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Receive+0x7e>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003494:	e0c1      	b.n	800361a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2204      	movs	r2, #4
 800349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d10f      	bne.n	80034fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d007      	beq.n	800351c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d162      	bne.n	80035ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003524:	e02e      	b.n	8003584 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d115      	bne.n	8003560 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f103 020c 	add.w	r2, r3, #12
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800355e:	e011      	b.n	8003584 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003560:	f7fe fe54 	bl	800220c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d803      	bhi.n	8003578 <HAL_SPI_Receive+0x166>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d102      	bne.n	800357e <HAL_SPI_Receive+0x16c>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003582:	e04a      	b.n	800361a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1cb      	bne.n	8003526 <HAL_SPI_Receive+0x114>
 800358e:	e031      	b.n	80035f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d113      	bne.n	80035c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	b292      	uxth	r2, r2
 80035aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c4:	e011      	b.n	80035ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c6:	f7fe fe21 	bl	800220c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d803      	bhi.n	80035de <HAL_SPI_Receive+0x1cc>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d102      	bne.n	80035e4 <HAL_SPI_Receive+0x1d2>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035e8:	e017      	b.n	800361a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1cd      	bne.n	8003590 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa45 	bl	8003a88 <SPI_EndRxTransaction>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
 8003616:	e000      	b.n	800361a <HAL_SPI_Receive+0x208>
  }

error :
 8003618:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08c      	sub	sp, #48	; 0x30
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003642:	2301      	movs	r3, #1
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_SPI_TransmitReceive+0x26>
 8003656:	2302      	movs	r3, #2
 8003658:	e18a      	b.n	8003970 <HAL_SPI_TransmitReceive+0x33c>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003662:	f7fe fdd3 	bl	800220c <HAL_GetTick>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800366e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800367c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003680:	2b01      	cmp	r3, #1
 8003682:	d00f      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x70>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d107      	bne.n	800369c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_SPI_TransmitReceive+0x68>
 8003694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003698:	2b04      	cmp	r3, #4
 800369a:	d003      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036a2:	e15b      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x82>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x82>
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036bc:	e14e      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d003      	beq.n	80036d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2205      	movs	r2, #5
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	887a      	ldrh	r2, [r7, #2]
 80036e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d007      	beq.n	8003726 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372e:	d178      	bne.n	8003822 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_TransmitReceive+0x10a>
 8003738:	8b7b      	ldrh	r3, [r7, #26]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d166      	bne.n	800380c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003762:	e053      	b.n	800380c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d11b      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x176>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d016      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x176>
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d113      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	1c9a      	adds	r2, r3, #2
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d119      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x1b8>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d014      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	b292      	uxth	r2, r2
 80037ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037e8:	2301      	movs	r3, #1
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037ec:	f7fe fd0e 	bl	800220c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d807      	bhi.n	800380c <HAL_SPI_TransmitReceive+0x1d8>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d003      	beq.n	800380c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800380a:	e0a7      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1a6      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x130>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1a1      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x130>
 8003820:	e07c      	b.n	800391c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x1fc>
 800382a:	8b7b      	ldrh	r3, [r7, #26]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d16b      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003856:	e057      	b.n	8003908 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d11c      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x26c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d017      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x26c>
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d114      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	7812      	ldrb	r2, [r2, #0]
 8003882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d119      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x2ae>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d014      	beq.n	80038e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038de:	2301      	movs	r3, #1
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038e2:	f7fe fc93 	bl	800220c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d803      	bhi.n	80038fa <HAL_SPI_TransmitReceive+0x2c6>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d102      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x2cc>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003906:	e029      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1a2      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x224>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d19d      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f917 	bl	8003b54 <SPI_EndRxTxTransaction>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d006      	beq.n	800393a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003938:	e010      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	e000      	b.n	800395c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800395a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800396c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003970:	4618      	mov	r0, r3
 8003972:	3730      	adds	r7, #48	; 0x30
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003988:	f7fe fc40 	bl	800220c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	4413      	add	r3, r2
 8003996:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003998:	f7fe fc38 	bl	800220c <HAL_GetTick>
 800399c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800399e:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	0d1b      	lsrs	r3, r3, #20
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ae:	e054      	b.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d050      	beq.n	8003a5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039b8:	f7fe fc28 	bl	800220c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d902      	bls.n	80039ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d13d      	bne.n	8003a4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e6:	d111      	bne.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0x94>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	d004      	beq.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fa:	d107      	bne.n	8003a0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a14:	d10f      	bne.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e017      	b.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d19b      	bne.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000038 	.word	0x20000038

08003a88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a9c:	d111      	bne.n	8003ac2 <SPI_EndRxTransaction+0x3a>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d004      	beq.n	8003ab2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab0:	d107      	bne.n	8003ac2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aca:	d12a      	bne.n	8003b22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d012      	beq.n	8003afc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff ff49 	bl	8003978 <SPI_WaitFlagStateUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02d      	beq.n	8003b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e026      	b.n	8003b4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2101      	movs	r1, #1
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff ff36 	bl	8003978 <SPI_WaitFlagStateUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01a      	beq.n	8003b48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e013      	b.n	8003b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff ff23 	bl	8003978 <SPI_WaitFlagStateUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e000      	b.n	8003b4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <SPI_EndRxTxTransaction+0x7c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1b      	ldr	r2, [pc, #108]	; (8003bd4 <SPI_EndRxTxTransaction+0x80>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0d5b      	lsrs	r3, r3, #21
 8003b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b70:	fb02 f303 	mul.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b7e:	d112      	bne.n	8003ba6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff fef4 	bl	8003978 <SPI_WaitFlagStateUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d0f2      	beq.n	8003ba6 <SPI_EndRxTxTransaction+0x52>
 8003bc0:	e000      	b.n	8003bc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003bc2:	bf00      	nop
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000038 	.word	0x20000038
 8003bd4:	165e9f81 	.word	0x165e9f81

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fc4a 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f929 	bl	8003e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x3e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e06e      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe faa1 	bl	800220c <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f840 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f810 	bl	8003d96 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b090      	sub	sp, #64	; 0x40
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da6:	e050      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d04c      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003db6:	f7fe fa29 	bl	800220c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d241      	bcs.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de6:	637a      	str	r2, [r7, #52]	; 0x34
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1a:	623a      	str	r2, [r7, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e00f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d09f      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3740      	adds	r7, #64	; 0x40
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	b09f      	sub	sp, #124	; 0x7c
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	68d9      	ldr	r1, [r3, #12]
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	ea40 0301 	orr.w	r3, r0, r1
 8003e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eb8:	f021 010c 	bic.w	r1, r1, #12
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	6999      	ldr	r1, [r3, #24]
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	ea40 0301 	orr.w	r3, r0, r1
 8003edc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4bc5      	ldr	r3, [pc, #788]	; (80041f8 <UART_SetConfig+0x384>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d004      	beq.n	8003ef2 <UART_SetConfig+0x7e>
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4bc3      	ldr	r3, [pc, #780]	; (80041fc <UART_SetConfig+0x388>)
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d103      	bne.n	8003efa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef2:	f7ff f8b5 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003ef6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ef8:	e002      	b.n	8003f00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efa:	f7ff f89d 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8003efe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f08:	f040 80b6 	bne.w	8004078 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	461c      	mov	r4, r3
 8003f10:	f04f 0500 	mov.w	r5, #0
 8003f14:	4622      	mov	r2, r4
 8003f16:	462b      	mov	r3, r5
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	6439      	str	r1, [r7, #64]	; 0x40
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f24:	1912      	adds	r2, r2, r4
 8003f26:	eb45 0303 	adc.w	r3, r5, r3
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	00d9      	lsls	r1, r3, #3
 8003f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f38:	00d0      	lsls	r0, r2, #3
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	1911      	adds	r1, r2, r4
 8003f40:	6639      	str	r1, [r7, #96]	; 0x60
 8003f42:	416b      	adcs	r3, r5
 8003f44:	667b      	str	r3, [r7, #100]	; 0x64
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f54:	415b      	adcs	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f60:	f7fc fd8c 	bl	8000a7c <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4ba5      	ldr	r3, [pc, #660]	; (8004200 <UART_SetConfig+0x38c>)
 8003f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	011e      	lsls	r6, r3, #4
 8003f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f74:	461c      	mov	r4, r3
 8003f76:	f04f 0500 	mov.w	r5, #0
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	1891      	adds	r1, r2, r2
 8003f80:	6339      	str	r1, [r7, #48]	; 0x30
 8003f82:	415b      	adcs	r3, r3
 8003f84:	637b      	str	r3, [r7, #52]	; 0x34
 8003f86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f8a:	1912      	adds	r2, r2, r4
 8003f8c:	eb45 0303 	adc.w	r3, r5, r3
 8003f90:	f04f 0000 	mov.w	r0, #0
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	00d9      	lsls	r1, r3, #3
 8003f9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f9e:	00d0      	lsls	r0, r2, #3
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	1911      	adds	r1, r2, r4
 8003fa6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fa8:	416b      	adcs	r3, r5
 8003faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	1891      	adds	r1, r2, r2
 8003fb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fc6:	f7fc fd59 	bl	8000a7c <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b8c      	ldr	r3, [pc, #560]	; (8004200 <UART_SetConfig+0x38c>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	; 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3332      	adds	r3, #50	; 0x32
 8003fe2:	4a87      	ldr	r2, [pc, #540]	; (8004200 <UART_SetConfig+0x38c>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff0:	441e      	add	r6, r3
 8003ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	1894      	adds	r4, r2, r2
 8004000:	623c      	str	r4, [r7, #32]
 8004002:	415b      	adcs	r3, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800400a:	1812      	adds	r2, r2, r0
 800400c:	eb41 0303 	adc.w	r3, r1, r3
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	f04f 0500 	mov.w	r5, #0
 8004018:	00dd      	lsls	r5, r3, #3
 800401a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800401e:	00d4      	lsls	r4, r2, #3
 8004020:	4622      	mov	r2, r4
 8004022:	462b      	mov	r3, r5
 8004024:	1814      	adds	r4, r2, r0
 8004026:	653c      	str	r4, [r7, #80]	; 0x50
 8004028:	414b      	adcs	r3, r1
 800402a:	657b      	str	r3, [r7, #84]	; 0x54
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	461a      	mov	r2, r3
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	1891      	adds	r1, r2, r2
 8004038:	61b9      	str	r1, [r7, #24]
 800403a:	415b      	adcs	r3, r3
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004046:	f7fc fd19 	bl	8000a7c <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <UART_SetConfig+0x38c>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a67      	ldr	r2, [pc, #412]	; (8004200 <UART_SetConfig+0x38c>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 0207 	and.w	r2, r3, #7
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4432      	add	r2, r6
 8004074:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004076:	e0b9      	b.n	80041ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407a:	461c      	mov	r4, r3
 800407c:	f04f 0500 	mov.w	r5, #0
 8004080:	4622      	mov	r2, r4
 8004082:	462b      	mov	r3, r5
 8004084:	1891      	adds	r1, r2, r2
 8004086:	6139      	str	r1, [r7, #16]
 8004088:	415b      	adcs	r3, r3
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004090:	1912      	adds	r2, r2, r4
 8004092:	eb45 0303 	adc.w	r3, r5, r3
 8004096:	f04f 0000 	mov.w	r0, #0
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	00d9      	lsls	r1, r3, #3
 80040a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040a4:	00d0      	lsls	r0, r2, #3
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	eb12 0804 	adds.w	r8, r2, r4
 80040ae:	eb43 0905 	adc.w	r9, r3, r5
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f04f 0100 	mov.w	r1, #0
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	008b      	lsls	r3, r1, #2
 80040c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040ca:	0082      	lsls	r2, r0, #2
 80040cc:	4640      	mov	r0, r8
 80040ce:	4649      	mov	r1, r9
 80040d0:	f7fc fcd4 	bl	8000a7c <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <UART_SetConfig+0x38c>)
 80040da:	fba3 2302 	umull	r2, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	011e      	lsls	r6, r3, #4
 80040e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e4:	4618      	mov	r0, r3
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	1894      	adds	r4, r2, r2
 80040f0:	60bc      	str	r4, [r7, #8]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040fa:	1812      	adds	r2, r2, r0
 80040fc:	eb41 0303 	adc.w	r3, r1, r3
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	f04f 0500 	mov.w	r5, #0
 8004108:	00dd      	lsls	r5, r3, #3
 800410a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800410e:	00d4      	lsls	r4, r2, #3
 8004110:	4622      	mov	r2, r4
 8004112:	462b      	mov	r3, r5
 8004114:	1814      	adds	r4, r2, r0
 8004116:	64bc      	str	r4, [r7, #72]	; 0x48
 8004118:	414b      	adcs	r3, r1
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004134:	0082      	lsls	r2, r0, #2
 8004136:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800413a:	f7fc fc9f 	bl	8000a7c <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b2f      	ldr	r3, [pc, #188]	; (8004200 <UART_SetConfig+0x38c>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	; 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	; 0x32
 8004156:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <UART_SetConfig+0x38c>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004162:	441e      	add	r6, r3
 8004164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004166:	4618      	mov	r0, r3
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	1894      	adds	r4, r2, r2
 8004172:	603c      	str	r4, [r7, #0]
 8004174:	415b      	adcs	r3, r3
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417c:	1812      	adds	r2, r2, r0
 800417e:	eb41 0303 	adc.w	r3, r1, r3
 8004182:	f04f 0400 	mov.w	r4, #0
 8004186:	f04f 0500 	mov.w	r5, #0
 800418a:	00dd      	lsls	r5, r3, #3
 800418c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004190:	00d4      	lsls	r4, r2, #3
 8004192:	4622      	mov	r2, r4
 8004194:	462b      	mov	r3, r5
 8004196:	eb12 0a00 	adds.w	sl, r2, r0
 800419a:	eb43 0b01 	adc.w	fp, r3, r1
 800419e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f04f 0100 	mov.w	r1, #0
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	008b      	lsls	r3, r1, #2
 80041b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041b6:	0082      	lsls	r2, r0, #2
 80041b8:	4650      	mov	r0, sl
 80041ba:	4659      	mov	r1, fp
 80041bc:	f7fc fc5e 	bl	8000a7c <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <UART_SetConfig+0x38c>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2164      	movs	r1, #100	; 0x64
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <UART_SetConfig+0x38c>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4432      	add	r2, r6
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	377c      	adds	r7, #124	; 0x7c
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f6:	bf00      	nop
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	51eb851f 	.word	0x51eb851f

08004204 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004208:	4904      	ldr	r1, [pc, #16]	; (800421c <MX_FATFS_Init+0x18>)
 800420a:	4805      	ldr	r0, [pc, #20]	; (8004220 <MX_FATFS_Init+0x1c>)
 800420c:	f003 f89a 	bl	8007344 <FATFS_LinkDriver>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <MX_FATFS_Init+0x20>)
 8004216:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200022a0 	.word	0x200022a0
 8004220:	20000048 	.word	0x20000048
 8004224:	200022a4 	.word	0x200022a4

08004228 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800422c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <USER_initialize+0x24>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <USER_initialize+0x24>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000045 	.word	0x20000045

08004260 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <USER_status+0x24>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <USER_status+0x24>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000045 	.word	0x20000045

08004288 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004298:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80042b6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	603a      	str	r2, [r7, #0]
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	460b      	mov	r3, r1
 80042d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
    return res;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = SPI_Flash_Driver.disk_status();
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <disk_status+0x20>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4798      	blx	r3
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]

  return stat;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	08008910 	.word	0x08008910

0800430c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]

  stat = SPI_Flash_Driver.disk_initialize();
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <disk_initialize+0x24>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4798      	blx	r3
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

  return stat;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	08008910 	.word	0x08008910

08004334 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_read(buff, sector, count);
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <disk_read+0x2c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	68b8      	ldr	r0, [r7, #8]
 800434e:	4798      	blx	r3
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]
  return res;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	08008910 	.word	0x08008910

08004364 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_write(buff, sector, count);
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <disk_write+0x2c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	4798      	blx	r3
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]

  return res;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	08008910 	.word	0x08008910

08004394 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	603a      	str	r2, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
 80043a0:	460b      	mov	r3, r1
 80043a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = SPI_Flash_Driver.disk_ioctl(cmd, buff);
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <disk_ioctl+0x2c>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	79ba      	ldrb	r2, [r7, #6]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	4610      	mov	r0, r2
 80043ae:	4798      	blx	r3
 80043b0:	4603      	mov	r3, r0
 80043b2:	73fb      	strb	r3, [r7, #15]
  return res;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	08008910 	.word	0x08008910

080043c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3301      	adds	r3, #1
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80043d4:	89fb      	ldrh	r3, [r7, #14]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	b21a      	sxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b21b      	sxth	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b21b      	sxth	r3, r3
 80043e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80043e6:	89fb      	ldrh	r3, [r7, #14]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3303      	adds	r3, #3
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	3202      	adds	r2, #2
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	3201      	adds	r2, #1
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	7812      	ldrb	r2, [r2, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
	return rv;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	887a      	ldrh	r2, [r7, #2]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	1c53      	adds	r3, r2, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1c59      	adds	r1, r3, #1
 80044ec:	6179      	str	r1, [r7, #20]
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f1      	bne.n	80044e2 <mem_cpy+0x1a>
	}
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	617a      	str	r2, [r7, #20]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3b01      	subs	r3, #1
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f3      	bne.n	800451a <mem_set+0x10>
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	61fa      	str	r2, [r7, #28]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	61ba      	str	r2, [r7, #24]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	1acb      	subs	r3, r1, r3
 800456c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <mem_cmp+0x40>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0eb      	beq.n	8004558 <mem_cmp+0x18>

	return r;
 8004580:	697b      	ldr	r3, [r7, #20]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004598:	e002      	b.n	80045a0 <chk_chr+0x12>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3301      	adds	r3, #1
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <chk_chr+0x26>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d1f2      	bne.n	800459a <chk_chr+0xc>
	return *str;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	781b      	ldrb	r3, [r3, #0]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e029      	b.n	800462c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <chk_lock+0xb4>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4413      	add	r3, r2
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01d      	beq.n	8004622 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045e6:	4a24      	ldr	r2, [pc, #144]	; (8004678 <chk_lock+0xb4>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4413      	add	r3, r2
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d116      	bne.n	8004626 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <chk_lock+0xb4>)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004608:	429a      	cmp	r2, r3
 800460a:	d10c      	bne.n	8004626 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <chk_lock+0xb4>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	3308      	adds	r3, #8
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800461c:	429a      	cmp	r2, r3
 800461e:	d102      	bne.n	8004626 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004620:	e007      	b.n	8004632 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d9d2      	bls.n	80045d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d109      	bne.n	800464c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <chk_lock+0x80>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d101      	bne.n	8004648 <chk_lock+0x84>
 8004644:	2300      	movs	r3, #0
 8004646:	e010      	b.n	800466a <chk_lock+0xa6>
 8004648:	2312      	movs	r3, #18
 800464a:	e00e      	b.n	800466a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <chk_lock+0xa0>
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <chk_lock+0xb4>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	330c      	adds	r3, #12
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004662:	d101      	bne.n	8004668 <chk_lock+0xa4>
 8004664:	2310      	movs	r3, #16
 8004666:	e000      	b.n	800466a <chk_lock+0xa6>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000100 	.word	0x20000100

0800467c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	e002      	b.n	800468e <enq_lock+0x12>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3301      	adds	r3, #1
 800468c:	607b      	str	r3, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d806      	bhi.n	80046a2 <enq_lock+0x26>
 8004694:	4a09      	ldr	r2, [pc, #36]	; (80046bc <enq_lock+0x40>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	4413      	add	r3, r2
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000100 	.word	0x20000100

080046c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e01f      	b.n	8004710 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80046d0:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <inc_lock+0x118>)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4413      	add	r3, r2
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d113      	bne.n	800470a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80046e2:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <inc_lock+0x118>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	3304      	adds	r3, #4
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d109      	bne.n	800470a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80046f6:	4a38      	ldr	r2, [pc, #224]	; (80047d8 <inc_lock+0x118>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4413      	add	r3, r2
 80046fe:	3308      	adds	r3, #8
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004706:	429a      	cmp	r2, r3
 8004708:	d006      	beq.n	8004718 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d9dc      	bls.n	80046d0 <inc_lock+0x10>
 8004716:	e000      	b.n	800471a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004718:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d132      	bne.n	8004786 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <inc_lock+0x6c>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d806      	bhi.n	8004740 <inc_lock+0x80>
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <inc_lock+0x118>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f2      	bne.n	8004726 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d101      	bne.n	800474a <inc_lock+0x8a>
 8004746:	2300      	movs	r3, #0
 8004748:	e040      	b.n	80047cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4922      	ldr	r1, [pc, #136]	; (80047d8 <inc_lock+0x118>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	440b      	add	r3, r1
 8004756:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	491e      	ldr	r1, [pc, #120]	; (80047d8 <inc_lock+0x118>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	440b      	add	r3, r1
 8004764:	3304      	adds	r3, #4
 8004766:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	491a      	ldr	r1, [pc, #104]	; (80047d8 <inc_lock+0x118>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	440b      	add	r3, r1
 8004774:	3308      	adds	r3, #8
 8004776:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <inc_lock+0x118>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	4413      	add	r3, r2
 8004780:	330c      	adds	r3, #12
 8004782:	2200      	movs	r2, #0
 8004784:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <inc_lock+0xe0>
 800478c:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <inc_lock+0x118>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	330c      	adds	r3, #12
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <inc_lock+0xe0>
 800479c:	2300      	movs	r3, #0
 800479e:	e015      	b.n	80047cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <inc_lock+0xf8>
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <inc_lock+0x118>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4413      	add	r3, r2
 80047ae:	330c      	adds	r3, #12
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	e001      	b.n	80047bc <inc_lock+0xfc>
 80047b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <inc_lock+0x118>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	330c      	adds	r3, #12
 80047c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	20000100 	.word	0x20000100

080047dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d825      	bhi.n	800483c <dec_lock+0x60>
		n = Files[i].ctr;
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <dec_lock+0x74>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4413      	add	r3, r2
 80047f8:	330c      	adds	r3, #12
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d101      	bne.n	800480a <dec_lock+0x2e>
 8004806:	2300      	movs	r3, #0
 8004808:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800480a:	89fb      	ldrh	r3, [r7, #14]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <dec_lock+0x3a>
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	3b01      	subs	r3, #1
 8004814:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <dec_lock+0x74>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	330c      	adds	r3, #12
 8004820:	89fa      	ldrh	r2, [r7, #14]
 8004822:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <dec_lock+0x5a>
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <dec_lock+0x74>)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	737b      	strb	r3, [r7, #13]
 800483a:	e001      	b.n	8004840 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800483c:	2302      	movs	r3, #2
 800483e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004840:	7b7b      	ldrb	r3, [r7, #13]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000100 	.word	0x20000100

08004854 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e010      	b.n	8004884 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004862:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <clear_lock+0x44>)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	4413      	add	r3, r2
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d105      	bne.n	800487e <clear_lock+0x2a>
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <clear_lock+0x44>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	4413      	add	r3, r2
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d9eb      	bls.n	8004862 <clear_lock+0xe>
	}
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	20000100 	.word	0x20000100

0800489c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	78db      	ldrb	r3, [r3, #3]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d034      	beq.n	800491a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7858      	ldrb	r0, [r3, #1]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048c0:	2301      	movs	r3, #1
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	f7ff fd4e 	bl	8004364 <disk_write>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	73fb      	strb	r3, [r7, #15]
 80048d2:	e022      	b.n	800491a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	1ad2      	subs	r2, r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d217      	bcs.n	800491a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	789b      	ldrb	r3, [r3, #2]
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e010      	b.n	8004914 <sync_window+0x78>
					wsect += fs->fsize;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7858      	ldrb	r0, [r3, #1]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004906:	2301      	movs	r3, #1
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	f7ff fd2b 	bl	8004364 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3b01      	subs	r3, #1
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d8eb      	bhi.n	80048f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d01b      	beq.n	8004974 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ffad 	bl	800489c <sync_window>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d113      	bne.n	8004974 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7858      	ldrb	r0, [r3, #1]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004956:	2301      	movs	r3, #1
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	f7ff fceb 	bl	8004334 <disk_read>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004964:	f04f 33ff 	mov.w	r3, #4294967295
 8004968:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800496a:	2301      	movs	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff87 	bl	800489c <sync_window>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d159      	bne.n	8004a4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d149      	bne.n	8004a34 <sync_fs+0xb4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d145      	bne.n	8004a34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	899b      	ldrh	r3, [r3, #12]
 80049b2:	461a      	mov	r2, r3
 80049b4:	2100      	movs	r1, #0
 80049b6:	f7ff fda8 	bl	800450a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3334      	adds	r3, #52	; 0x34
 80049be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80049c2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fd37 	bl	800443a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3334      	adds	r3, #52	; 0x34
 80049d0:	4921      	ldr	r1, [pc, #132]	; (8004a58 <sync_fs+0xd8>)
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fd4c 	bl	8004470 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3334      	adds	r3, #52	; 0x34
 80049dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80049e0:	491e      	ldr	r1, [pc, #120]	; (8004a5c <sync_fs+0xdc>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fd44 	bl	8004470 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3334      	adds	r3, #52	; 0x34
 80049ec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff fd3a 	bl	8004470 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3334      	adds	r3, #52	; 0x34
 8004a00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7ff fd30 	bl	8004470 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7858      	ldrb	r0, [r3, #1]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f7ff fc9b 	bl	8004364 <disk_write>
			fs->fsi_flag = 0;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fca9 	bl	8004394 <disk_ioctl>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <sync_fs+0xcc>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	41615252 	.word	0x41615252
 8004a5c:	61417272 	.word	0x61417272

08004a60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	3b02      	subs	r3, #2
 8004a6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	3b02      	subs	r3, #2
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d301      	bcc.n	8004a80 <clust2sect+0x20>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e008      	b.n	8004a92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	895b      	ldrh	r3, [r3, #10]
 8004a84:	461a      	mov	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fb03 f202 	mul.w	r2, r3, r2
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4413      	add	r3, r2
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d904      	bls.n	8004abe <get_fat+0x20>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e0bb      	b.n	8004c3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	f000 8083 	beq.w	8004bda <get_fat+0x13c>
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	f300 80a7 	bgt.w	8004c28 <get_fat+0x18a>
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d002      	beq.n	8004ae4 <get_fat+0x46>
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d056      	beq.n	8004b90 <get_fat+0xf2>
 8004ae2:	e0a1      	b.n	8004c28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	899b      	ldrh	r3, [r3, #12]
 8004afa:	4619      	mov	r1, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b02:	4413      	add	r3, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	6938      	ldr	r0, [r7, #16]
 8004b08:	f7ff ff0c 	bl	8004924 <move_window>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 808d 	bne.w	8004c2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	60fa      	str	r2, [r7, #12]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	8992      	ldrh	r2, [r2, #12]
 8004b1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b22:	fb02 f201 	mul.w	r2, r2, r1
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	899b      	ldrh	r3, [r3, #12]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b42:	4413      	add	r3, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	6938      	ldr	r0, [r7, #16]
 8004b48:	f7ff feec 	bl	8004924 <move_window>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d16f      	bne.n	8004c32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	899b      	ldrh	r3, [r3, #12]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b5e:	fb02 f201 	mul.w	r2, r2, r1
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <get_fat+0xe8>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	091b      	lsrs	r3, r3, #4
 8004b84:	e002      	b.n	8004b8c <get_fat+0xee>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8c:	617b      	str	r3, [r7, #20]
			break;
 8004b8e:	e055      	b.n	8004c3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	899b      	ldrh	r3, [r3, #12]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff febb 	bl	8004924 <move_window>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d140      	bne.n	8004c36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	8992      	ldrh	r2, [r2, #12]
 8004bc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bc6:	fb02 f200 	mul.w	r2, r2, r0
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	440b      	add	r3, r1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fbf8 	bl	80043c4 <ld_word>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	617b      	str	r3, [r7, #20]
			break;
 8004bd8:	e030      	b.n	8004c3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	899b      	ldrh	r3, [r3, #12]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bee:	4413      	add	r3, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f7ff fe96 	bl	8004924 <move_window>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d11d      	bne.n	8004c3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	8992      	ldrh	r2, [r2, #12]
 8004c0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c10:	fb02 f200 	mul.w	r2, r2, r0
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fbeb 	bl	80043f4 <ld_dword>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c24:	617b      	str	r3, [r7, #20]
			break;
 8004c26:	e009      	b.n	8004c3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e006      	b.n	8004c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c2e:	bf00      	nop
 8004c30:	e004      	b.n	8004c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c3a:	bf00      	nop
		}
	}

	return val;
 8004c3c:	697b      	ldr	r3, [r7, #20]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004c46:	b590      	push	{r4, r7, lr}
 8004c48:	b089      	sub	sp, #36	; 0x24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f240 8102 	bls.w	8004e62 <put_fat+0x21c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	f080 80fc 	bcs.w	8004e62 <put_fat+0x21c>
		switch (fs->fs_type) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	f000 80b6 	beq.w	8004de0 <put_fat+0x19a>
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	f300 80fd 	bgt.w	8004e74 <put_fat+0x22e>
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d003      	beq.n	8004c86 <put_fat+0x40>
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	f000 8083 	beq.w	8004d8a <put_fat+0x144>
 8004c84:	e0f6      	b.n	8004e74 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4413      	add	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	899b      	ldrh	r3, [r3, #12]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ca4:	4413      	add	r3, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fe3b 	bl	8004924 <move_window>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 80d6 	bne.w	8004e66 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	61ba      	str	r2, [r7, #24]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	8992      	ldrh	r2, [r2, #12]
 8004cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cce:	fb02 f200 	mul.w	r2, r2, r0
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <put_fat+0xb8>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	b25a      	sxtb	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e001      	b.n	8004d02 <put_fat+0xbc>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	899b      	ldrh	r3, [r3, #12]
 8004d14:	4619      	mov	r1, r3
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff fdff 	bl	8004924 <move_window>
 8004d26:	4603      	mov	r3, r0
 8004d28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d2a:	7ffb      	ldrb	r3, [r7, #31]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 809c 	bne.w	8004e6a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	899b      	ldrh	r3, [r3, #12]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d44:	fb02 f200 	mul.w	r2, r2, r0
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <put_fat+0x11a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e00e      	b.n	8004d7e <put_fat+0x138>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	f023 030f 	bic.w	r3, r3, #15
 8004d6a:	b25a      	sxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b25b      	sxtb	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	70da      	strb	r2, [r3, #3]
			break;
 8004d88:	e074      	b.n	8004e74 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	899b      	ldrh	r3, [r3, #12]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4619      	mov	r1, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d9e:	4413      	add	r3, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fdbe 	bl	8004924 <move_window>
 8004da8:	4603      	mov	r3, r0
 8004daa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dac:	7ffb      	ldrb	r3, [r7, #31]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d15d      	bne.n	8004e6e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	8992      	ldrh	r2, [r2, #12]
 8004dc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dc4:	fb02 f200 	mul.w	r2, r2, r0
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	440b      	add	r3, r1
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fb31 	bl	800443a <st_word>
			fs->wflag = 1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	70da      	strb	r2, [r3, #3]
			break;
 8004dde:	e049      	b.n	8004e74 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	899b      	ldrh	r3, [r3, #12]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4619      	mov	r1, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df4:	4413      	add	r3, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fd93 	bl	8004924 <move_window>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d134      	bne.n	8004e72 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	8992      	ldrh	r2, [r2, #12]
 8004e1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e20:	fb02 f200 	mul.w	r2, r2, r0
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fae3 	bl	80043f4 <ld_dword>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e34:	4323      	orrs	r3, r4
 8004e36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	8992      	ldrh	r2, [r2, #12]
 8004e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e4a:	fb02 f200 	mul.w	r2, r2, r0
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	440b      	add	r3, r1
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb0b 	bl	8004470 <st_dword>
			fs->wflag = 1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	70da      	strb	r2, [r3, #3]
			break;
 8004e60:	e008      	b.n	8004e74 <put_fat+0x22e>
		}
	}
 8004e62:	bf00      	nop
 8004e64:	e006      	b.n	8004e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e66:	bf00      	nop
 8004e68:	e004      	b.n	8004e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e72:	bf00      	nop
	return res;
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}

08004e7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b088      	sub	sp, #32
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d904      	bls.n	8004ea4 <remove_chain+0x26>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d301      	bcc.n	8004ea8 <remove_chain+0x2a>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e04b      	b.n	8004f40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	69b8      	ldr	r0, [r7, #24]
 8004eb6:	f7ff fec6 	bl	8004c46 <put_fat>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <remove_chain+0x4a>
 8004ec4:	7ffb      	ldrb	r3, [r7, #31]
 8004ec6:	e03b      	b.n	8004f40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fde7 	bl	8004a9e <get_fat>
 8004ed0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d031      	beq.n	8004f3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <remove_chain+0x64>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e02e      	b.n	8004f40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d101      	bne.n	8004eee <remove_chain+0x70>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e028      	b.n	8004f40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004eee:	2200      	movs	r2, #0
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	69b8      	ldr	r0, [r7, #24]
 8004ef4:	f7ff fea7 	bl	8004c46 <put_fat>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <remove_chain+0x88>
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	e01c      	b.n	8004f40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	3b02      	subs	r3, #2
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d20b      	bcs.n	8004f2c <remove_chain+0xae>
			fs->free_clst++;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	791b      	ldrb	r3, [r3, #4]
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3c6      	bcc.n	8004ec8 <remove_chain+0x4a>
 8004f3a:	e000      	b.n	8004f3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004f3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3720      	adds	r7, #32
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <create_chain+0x2c>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d31b      	bcc.n	8004fac <create_chain+0x64>
 8004f74:	2301      	movs	r3, #1
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e018      	b.n	8004fac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fd8e 	bl	8004a9e <get_fat>
 8004f82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d801      	bhi.n	8004f8e <create_chain+0x46>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e070      	b.n	8005070 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d101      	bne.n	8004f9a <create_chain+0x52>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	e06a      	b.n	8005070 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d201      	bcs.n	8004fa8 <create_chain+0x60>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	e063      	b.n	8005070 <create_chain+0x128>
		scl = clst;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d307      	bcc.n	8004fd0 <create_chain+0x88>
				ncl = 2;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d901      	bls.n	8004fd0 <create_chain+0x88>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e04f      	b.n	8005070 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff fd63 	bl	8004a9e <get_fat>
 8004fd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <create_chain+0xa6>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d101      	bne.n	8004ff2 <create_chain+0xaa>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	e03e      	b.n	8005070 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d1da      	bne.n	8004fb0 <create_chain+0x68>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e038      	b.n	8005070 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ffe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6938      	ldr	r0, [r7, #16]
 8005008:	f7ff fe1d 	bl	8004c46 <put_fat>
 800500c:	4603      	mov	r3, r0
 800500e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005010:	7dfb      	ldrb	r3, [r7, #23]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <create_chain+0xe2>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d006      	beq.n	800502a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6938      	ldr	r0, [r7, #16]
 8005022:	f7ff fe10 	bl	8004c46 <put_fat>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <create_chain+0x116>
		fs->last_clst = ncl;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	3b02      	subs	r3, #2
 8005040:	429a      	cmp	r2, r3
 8005042:	d804      	bhi.n	800504e <create_chain+0x106>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	791b      	ldrb	r3, [r3, #4]
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	711a      	strb	r2, [r3, #4]
 800505c:	e007      	b.n	800506e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d102      	bne.n	800506a <create_chain+0x122>
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	e000      	b.n	800506c <create_chain+0x124>
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800506e:	69fb      	ldr	r3, [r7, #28]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	3304      	adds	r3, #4
 800508e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	899b      	ldrh	r3, [r3, #12]
 8005094:	461a      	mov	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	fbb3 f3f2 	udiv	r3, r3, r2
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	8952      	ldrh	r2, [r2, #10]
 80050a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1d1a      	adds	r2, r3, #4
 80050aa:	613a      	str	r2, [r7, #16]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <clmt_clust+0x42>
 80050b6:	2300      	movs	r3, #0
 80050b8:	e010      	b.n	80050dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d307      	bcc.n	80050d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3304      	adds	r3, #4
 80050ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80050d0:	e7e9      	b.n	80050a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80050d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050fe:	d204      	bcs.n	800510a <dir_sdi+0x22>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <dir_sdi+0x26>
		return FR_INT_ERR;
 800510a:	2302      	movs	r3, #2
 800510c:	e071      	b.n	80051f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <dir_sdi+0x46>
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d902      	bls.n	800512e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	8912      	ldrh	r2, [r2, #8]
 800513c:	4293      	cmp	r3, r2
 800513e:	d301      	bcc.n	8005144 <dir_sdi+0x5c>
 8005140:	2302      	movs	r3, #2
 8005142:	e056      	b.n	80051f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61da      	str	r2, [r3, #28]
 800514c:	e02d      	b.n	80051aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	895b      	ldrh	r3, [r3, #10]
 8005152:	461a      	mov	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	899b      	ldrh	r3, [r3, #12]
 8005158:	fb03 f302 	mul.w	r3, r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800515e:	e019      	b.n	8005194 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fc9a 	bl	8004a9e <get_fat>
 800516a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d101      	bne.n	8005178 <dir_sdi+0x90>
 8005174:	2301      	movs	r3, #1
 8005176:	e03c      	b.n	80051f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d904      	bls.n	8005188 <dir_sdi+0xa0>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d301      	bcc.n	800518c <dir_sdi+0xa4>
 8005188:	2302      	movs	r3, #2
 800518a:	e032      	b.n	80051f2 <dir_sdi+0x10a>
			ofs -= csz;
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d2e1      	bcs.n	8005160 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	6938      	ldr	r0, [r7, #16]
 80051a0:	f7ff fc5e 	bl	8004a60 <clust2sect>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <dir_sdi+0xd4>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e01a      	b.n	80051f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	899b      	ldrh	r3, [r3, #12]
 80051c4:	4619      	mov	r1, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	899b      	ldrh	r3, [r3, #12]
 80051dc:	461a      	mov	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80051e4:	fb02 f200 	mul.w	r2, r2, r0
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	18ca      	adds	r2, r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	3320      	adds	r3, #32
 8005210:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <dir_next+0x28>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d301      	bcc.n	8005226 <dir_next+0x2c>
 8005222:	2304      	movs	r3, #4
 8005224:	e0bb      	b.n	800539e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	899b      	ldrh	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005232:	fb02 f201 	mul.w	r2, r2, r1
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	f040 809d 	bne.w	8005378 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	8912      	ldrh	r2, [r2, #8]
 8005258:	4293      	cmp	r3, r2
 800525a:	f0c0 808d 	bcc.w	8005378 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	61da      	str	r2, [r3, #28]
 8005264:	2304      	movs	r3, #4
 8005266:	e09a      	b.n	800539e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	899b      	ldrh	r3, [r3, #12]
 800526c:	461a      	mov	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	fbb3 f3f2 	udiv	r3, r3, r2
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	8952      	ldrh	r2, [r2, #10]
 8005278:	3a01      	subs	r2, #1
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d17b      	bne.n	8005378 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	4619      	mov	r1, r3
 8005288:	4610      	mov	r0, r2
 800528a:	f7ff fc08 	bl	8004a9e <get_fat>
 800528e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d801      	bhi.n	800529a <dir_next+0xa0>
 8005296:	2302      	movs	r3, #2
 8005298:	e081      	b.n	800539e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d101      	bne.n	80052a6 <dir_next+0xac>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e07b      	b.n	800539e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d359      	bcc.n	8005364 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d104      	bne.n	80052c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	61da      	str	r2, [r3, #28]
 80052bc:	2304      	movs	r3, #4
 80052be:	e06e      	b.n	800539e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f7ff fe3d 	bl	8004f48 <create_chain>
 80052ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <dir_next+0xe0>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e061      	b.n	800539e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <dir_next+0xea>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e05c      	b.n	800539e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d101      	bne.n	80052f0 <dir_next+0xf6>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e056      	b.n	800539e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f7ff fad3 	bl	800489c <sync_window>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <dir_next+0x106>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e04e      	b.n	800539e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	899b      	ldrh	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	2100      	movs	r1, #0
 800530e:	f7ff f8fc 	bl	800450a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	6979      	ldr	r1, [r7, #20]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fba1 	bl	8004a60 <clust2sect>
 800531e:	4602      	mov	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
 8005324:	e012      	b.n	800534c <dir_next+0x152>
						fs->wflag = 1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fab5 	bl	800489c <sync_window>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <dir_next+0x142>
 8005338:	2301      	movs	r3, #1
 800533a:	e030      	b.n	800539e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	895b      	ldrh	r3, [r3, #10]
 8005350:	461a      	mov	r2, r3
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4293      	cmp	r3, r2
 8005356:	d3e6      	bcc.n	8005326 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fb77 	bl	8004a60 <clust2sect>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	899b      	ldrh	r3, [r3, #12]
 8005388:	461a      	mov	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005390:	fb02 f200 	mul.w	r2, r2, r0
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	18ca      	adds	r2, r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80053b6:	2100      	movs	r1, #0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fe95 	bl	80050e8 <dir_sdi>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d12b      	bne.n	8005420 <dir_alloc+0x7a>
		n = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff faa6 	bl	8004924 <move_window>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d11d      	bne.n	800541e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2be5      	cmp	r3, #229	; 0xe5
 80053ea:	d004      	beq.n	80053f6 <dir_alloc+0x50>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3301      	adds	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d102      	bne.n	800540a <dir_alloc+0x64>
 8005404:	e00c      	b.n	8005420 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800540a:	2101      	movs	r1, #1
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fef4 	bl	80051fa <dir_next>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005416:	7dfb      	ldrb	r3, [r7, #23]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0d7      	beq.n	80053cc <dir_alloc+0x26>
 800541c:	e000      	b.n	8005420 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800541e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d101      	bne.n	800542a <dir_alloc+0x84>
 8005426:	2307      	movs	r3, #7
 8005428:	75fb      	strb	r3, [r7, #23]
	return res;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	331a      	adds	r3, #26
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe ffbe 	bl	80043c4 <ld_word>
 8005448:	4603      	mov	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d109      	bne.n	8005468 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe ffb3 	bl	80043c4 <ld_word>
 800545e:	4603      	mov	r3, r0
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	331a      	adds	r3, #26
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	b292      	uxth	r2, r2
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe ffd6 	bl	800443a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b03      	cmp	r3, #3
 8005494:	d109      	bne.n	80054aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f103 0214 	add.w	r2, r3, #20
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	4610      	mov	r0, r2
 80054a6:	f7fe ffc8 	bl	800443a <st_word>
	}
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b086      	sub	sp, #24
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80054bc:	2304      	movs	r3, #4
 80054be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80054c6:	e03c      	b.n	8005542 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f7ff fa28 	bl	8004924 <move_window>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d136      	bne.n	800554c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80054ec:	2304      	movs	r3, #4
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e031      	b.n	8005556 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	330b      	adds	r3, #11
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054fe:	73bb      	strb	r3, [r7, #14]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7bba      	ldrb	r2, [r7, #14]
 8005504:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2be5      	cmp	r3, #229	; 0xe5
 800550a:	d011      	beq.n	8005530 <dir_read+0x7e>
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b2e      	cmp	r3, #46	; 0x2e
 8005510:	d00e      	beq.n	8005530 <dir_read+0x7e>
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b0f      	cmp	r3, #15
 8005516:	d00b      	beq.n	8005530 <dir_read+0x7e>
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	f023 0320 	bic.w	r3, r3, #32
 800551e:	2b08      	cmp	r3, #8
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	4293      	cmp	r3, r2
 800552e:	d00f      	beq.n	8005550 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005530:	2100      	movs	r1, #0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fe61 	bl	80051fa <dir_next>
 8005538:	4603      	mov	r3, r0
 800553a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <dir_read+0xa2>
	while (dp->sect) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1be      	bne.n	80054c8 <dir_read+0x16>
 800554a:	e004      	b.n	8005556 <dir_read+0xa4>
		if (res != FR_OK) break;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <dir_read+0xa4>
				break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005554:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <dir_read+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
	return res;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800557a:	2100      	movs	r1, #0
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fdb3 	bl	80050e8 <dir_sdi>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <dir_find+0x24>
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	e03e      	b.n	800560e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4619      	mov	r1, r3
 8005596:	6938      	ldr	r0, [r7, #16]
 8005598:	f7ff f9c4 	bl	8004924 <move_window>
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d12f      	bne.n	8005606 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <dir_find+0x4e>
 80055b4:	2304      	movs	r3, #4
 80055b6:	75fb      	strb	r3, [r7, #23]
 80055b8:	e028      	b.n	800560c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	330b      	adds	r3, #11
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	330b      	adds	r3, #11
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <dir_find+0x86>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a18      	ldr	r0, [r3, #32]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3324      	adds	r3, #36	; 0x24
 80055e4:	220b      	movs	r2, #11
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fe ffaa 	bl	8004540 <mem_cmp>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00b      	beq.n	800560a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80055f2:	2100      	movs	r1, #0
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fe00 	bl	80051fa <dir_next>
 80055fa:	4603      	mov	r3, r0
 80055fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0c5      	beq.n	8005590 <dir_find+0x24>
 8005604:	e002      	b.n	800560c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800560a:	bf00      	nop

	return res;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005624:	2101      	movs	r1, #1
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff febd 	bl	80053a6 <dir_alloc>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d11c      	bne.n	8005670 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	4619      	mov	r1, r3
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f7ff f971 	bl	8004924 <move_window>
 8005642:	4603      	mov	r3, r0
 8005644:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d111      	bne.n	8005670 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	2220      	movs	r2, #32
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe ff58 	bl	800450a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a18      	ldr	r0, [r3, #32]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3324      	adds	r3, #36	; 0x24
 8005662:	220b      	movs	r2, #11
 8005664:	4619      	mov	r1, r3
 8005666:	f7fe ff2f 	bl	80044c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2201      	movs	r2, #1
 800566e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04e      	beq.n	8005730 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800569a:	e021      	b.n	80056e0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	6179      	str	r1, [r7, #20]
 80056a6:	4413      	add	r3, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d100      	bne.n	80056b4 <get_fileinfo+0x3a>
 80056b2:	e015      	b.n	80056e0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d101      	bne.n	80056be <get_fileinfo+0x44>
 80056ba:	23e5      	movs	r3, #229	; 0xe5
 80056bc:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d106      	bne.n	80056d2 <get_fileinfo+0x58>
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	613a      	str	r2, [r7, #16]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	222e      	movs	r2, #46	; 0x2e
 80056d0:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	613a      	str	r2, [r7, #16]
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	4413      	add	r3, r2
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b0a      	cmp	r3, #10
 80056e4:	d9da      	bls.n	800569c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	3309      	adds	r3, #9
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	7ada      	ldrb	r2, [r3, #11]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	331c      	adds	r3, #28
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fe76 	bl	80043f4 <ld_dword>
 8005708:	4602      	mov	r2, r0
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	3316      	adds	r3, #22
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fe6d 	bl	80043f4 <ld_dword>
 800571a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	b29a      	uxth	r2, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	80da      	strh	r2, [r3, #6]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	b29a      	uxth	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	809a      	strh	r2, [r3, #4]
 800572e:	e000      	b.n	8005732 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005730:	bf00      	nop
}
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800574e:	220b      	movs	r2, #11
 8005750:	2120      	movs	r1, #32
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f7fe fed9 	bl	800450a <mem_set>
	si = i = 0; ni = 8;
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	2308      	movs	r3, #8
 8005762:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	61fa      	str	r2, [r7, #28]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4413      	add	r3, r2
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005772:	7efb      	ldrb	r3, [r7, #27]
 8005774:	2b20      	cmp	r3, #32
 8005776:	d94e      	bls.n	8005816 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005778:	7efb      	ldrb	r3, [r7, #27]
 800577a:	2b2f      	cmp	r3, #47	; 0x2f
 800577c:	d006      	beq.n	800578c <create_name+0x54>
 800577e:	7efb      	ldrb	r3, [r7, #27]
 8005780:	2b5c      	cmp	r3, #92	; 0x5c
 8005782:	d110      	bne.n	80057a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005784:	e002      	b.n	800578c <create_name+0x54>
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3301      	adds	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b2f      	cmp	r3, #47	; 0x2f
 8005796:	d0f6      	beq.n	8005786 <create_name+0x4e>
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b5c      	cmp	r3, #92	; 0x5c
 80057a2:	d0f0      	beq.n	8005786 <create_name+0x4e>
			break;
 80057a4:	e038      	b.n	8005818 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80057a6:	7efb      	ldrb	r3, [r7, #27]
 80057a8:	2b2e      	cmp	r3, #46	; 0x2e
 80057aa:	d003      	beq.n	80057b4 <create_name+0x7c>
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d30c      	bcc.n	80057ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d002      	beq.n	80057c0 <create_name+0x88>
 80057ba:	7efb      	ldrb	r3, [r7, #27]
 80057bc:	2b2e      	cmp	r3, #46	; 0x2e
 80057be:	d001      	beq.n	80057c4 <create_name+0x8c>
 80057c0:	2306      	movs	r3, #6
 80057c2:	e044      	b.n	800584e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80057c4:	2308      	movs	r3, #8
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	230b      	movs	r3, #11
 80057ca:	617b      	str	r3, [r7, #20]
			continue;
 80057cc:	e022      	b.n	8005814 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da04      	bge.n	80057e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80057d6:	7efb      	ldrb	r3, [r7, #27]
 80057d8:	3b80      	subs	r3, #128	; 0x80
 80057da:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <create_name+0x120>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80057e0:	7efb      	ldrb	r3, [r7, #27]
 80057e2:	4619      	mov	r1, r3
 80057e4:	481d      	ldr	r0, [pc, #116]	; (800585c <create_name+0x124>)
 80057e6:	f7fe fed2 	bl	800458e <chk_chr>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <create_name+0xbc>
 80057f0:	2306      	movs	r3, #6
 80057f2:	e02c      	b.n	800584e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80057f4:	7efb      	ldrb	r3, [r7, #27]
 80057f6:	2b60      	cmp	r3, #96	; 0x60
 80057f8:	d905      	bls.n	8005806 <create_name+0xce>
 80057fa:	7efb      	ldrb	r3, [r7, #27]
 80057fc:	2b7a      	cmp	r3, #122	; 0x7a
 80057fe:	d802      	bhi.n	8005806 <create_name+0xce>
 8005800:	7efb      	ldrb	r3, [r7, #27]
 8005802:	3b20      	subs	r3, #32
 8005804:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	613a      	str	r2, [r7, #16]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	4413      	add	r3, r2
 8005810:	7efa      	ldrb	r2, [r7, #27]
 8005812:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005814:	e7a6      	b.n	8005764 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005816:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	441a      	add	r2, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <create_name+0xf4>
 8005828:	2306      	movs	r3, #6
 800582a:	e010      	b.n	800584e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2be5      	cmp	r3, #229	; 0xe5
 8005832:	d102      	bne.n	800583a <create_name+0x102>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2205      	movs	r2, #5
 8005838:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800583a:	7efb      	ldrb	r3, [r7, #27]
 800583c:	2b20      	cmp	r3, #32
 800583e:	d801      	bhi.n	8005844 <create_name+0x10c>
 8005840:	2204      	movs	r2, #4
 8005842:	e000      	b.n	8005846 <create_name+0x10e>
 8005844:	2200      	movs	r2, #0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	330b      	adds	r3, #11
 800584a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800584c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	08008924 	.word	0x08008924
 800585c:	080088b4 	.word	0x080088b4

08005860 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005874:	e002      	b.n	800587c <follow_path+0x1c>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b2f      	cmp	r3, #47	; 0x2f
 8005882:	d0f8      	beq.n	8005876 <follow_path+0x16>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b5c      	cmp	r3, #92	; 0x5c
 800588a:	d0f4      	beq.n	8005876 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b1f      	cmp	r3, #31
 8005898:	d80a      	bhi.n	80058b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80058a2:	2100      	movs	r1, #0
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fc1f 	bl	80050e8 <dir_sdi>
 80058aa:	4603      	mov	r3, r0
 80058ac:	75fb      	strb	r3, [r7, #23]
 80058ae:	e048      	b.n	8005942 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058b0:	463b      	mov	r3, r7
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff3f 	bl	8005738 <create_name>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d139      	bne.n	8005938 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fe51 	bl	800556c <dir_find>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d12c      	bne.n	800593c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d127      	bne.n	800593c <follow_path+0xdc>
 80058ec:	2305      	movs	r3, #5
 80058ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80058f0:	e024      	b.n	800593c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d121      	bne.n	8005940 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	799b      	ldrb	r3, [r3, #6]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005908:	2305      	movs	r3, #5
 800590a:	75fb      	strb	r3, [r7, #23]
 800590c:	e019      	b.n	8005942 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	8992      	ldrh	r2, [r2, #12]
 800591c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005920:	fb02 f200 	mul.w	r2, r2, r0
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	440b      	add	r3, r1
 8005928:	4619      	mov	r1, r3
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fd82 	bl	8005434 <ld_clust>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005936:	e7bb      	b.n	80058b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <follow_path+0xe2>
				break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005940:	bf00      	nop
			}
		}
	}

	return res;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d031      	beq.n	80059c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e002      	b.n	8005970 <get_ldnumber+0x24>
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	3301      	adds	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b20      	cmp	r3, #32
 8005976:	d903      	bls.n	8005980 <get_ldnumber+0x34>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b3a      	cmp	r3, #58	; 0x3a
 800597e:	d1f4      	bne.n	800596a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b3a      	cmp	r3, #58	; 0x3a
 8005986:	d11c      	bne.n	80059c2 <get_ldnumber+0x76>
			tp = *path;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	3b30      	subs	r3, #48	; 0x30
 8005998:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b09      	cmp	r3, #9
 800599e:	d80e      	bhi.n	80059be <get_ldnumber+0x72>
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d10a      	bne.n	80059be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d107      	bne.n	80059be <get_ldnumber+0x72>
					vol = (int)i;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	3301      	adds	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	e002      	b.n	80059c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059c6:	693b      	ldr	r3, [r7, #16]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	70da      	strb	r2, [r3, #3]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fe ff98 	bl	8004924 <move_window>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <check_fs+0x2a>
 80059fa:	2304      	movs	r3, #4
 80059fc:	e038      	b.n	8005a70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3334      	adds	r3, #52	; 0x34
 8005a02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fcdc 	bl	80043c4 <ld_word>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <check_fs+0x48>
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e029      	b.n	8005a70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a22:	2be9      	cmp	r3, #233	; 0xe9
 8005a24:	d009      	beq.n	8005a3a <check_fs+0x66>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a2c:	2beb      	cmp	r3, #235	; 0xeb
 8005a2e:	d11e      	bne.n	8005a6e <check_fs+0x9a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a36:	2b90      	cmp	r3, #144	; 0x90
 8005a38:	d119      	bne.n	8005a6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3334      	adds	r3, #52	; 0x34
 8005a3e:	3336      	adds	r3, #54	; 0x36
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe fcd7 	bl	80043f4 <ld_dword>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a4c:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <check_fs+0xa4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <check_fs+0x82>
 8005a52:	2300      	movs	r3, #0
 8005a54:	e00c      	b.n	8005a70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3334      	adds	r3, #52	; 0x34
 8005a5a:	3352      	adds	r3, #82	; 0x52
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fe fcc9 	bl	80043f4 <ld_dword>
 8005a62:	4603      	mov	r3, r0
 8005a64:	4a05      	ldr	r2, [pc, #20]	; (8005a7c <check_fs+0xa8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <check_fs+0x9a>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e000      	b.n	8005a70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a6e:	2302      	movs	r3, #2
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	00544146 	.word	0x00544146
 8005a7c:	33544146 	.word	0x33544146

08005a80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b096      	sub	sp, #88	; 0x58
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff ff59 	bl	800594c <get_ldnumber>
 8005a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da01      	bge.n	8005aa6 <find_volume+0x26>
 8005aa2:	230b      	movs	r3, #11
 8005aa4:	e265      	b.n	8005f72 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005aa6:	4ab0      	ldr	r2, [pc, #704]	; (8005d68 <find_volume+0x2e8>)
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <find_volume+0x3a>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	e25b      	b.n	8005f72 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005abe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01a      	beq.n	8005b06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fc07 	bl	80042e8 <disk_status>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ae0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10c      	bne.n	8005b06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <find_volume+0x82>
 8005af2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005afe:	230a      	movs	r3, #10
 8005b00:	e237      	b.n	8005f72 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005b02:	2300      	movs	r3, #0
 8005b04:	e235      	b.n	8005f72 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fbf7 	bl	800430c <disk_initialize>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b30:	2303      	movs	r3, #3
 8005b32:	e21e      	b.n	8005f72 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <find_volume+0xca>
 8005b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005b46:	230a      	movs	r3, #10
 8005b48:	e213      	b.n	8005f72 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	7858      	ldrb	r0, [r3, #1]
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	330c      	adds	r3, #12
 8005b52:	461a      	mov	r2, r3
 8005b54:	2102      	movs	r1, #2
 8005b56:	f7fe fc1d 	bl	8004394 <disk_ioctl>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <find_volume+0xe4>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e206      	b.n	8005f72 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	899b      	ldrh	r3, [r3, #12]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d80d      	bhi.n	8005b8a <find_volume+0x10a>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	899b      	ldrh	r3, [r3, #12]
 8005b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b76:	d308      	bcc.n	8005b8a <find_volume+0x10a>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	899b      	ldrh	r3, [r3, #12]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	899b      	ldrh	r3, [r3, #12]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <find_volume+0x10e>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1f1      	b.n	8005f72 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b96:	f7ff ff1d 	bl	80059d4 <check_fs>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d14b      	bne.n	8005c40 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ba8:	2300      	movs	r3, #0
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
 8005bac:	e01f      	b.n	8005bee <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005bbc:	4413      	add	r3, r2
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d006      	beq.n	8005bd8 <find_volume+0x158>
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3308      	adds	r3, #8
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fc10 	bl	80043f4 <ld_dword>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	e000      	b.n	8005bda <find_volume+0x15a>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005be2:	440b      	add	r3, r1
 8005be4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bea:	3301      	adds	r3, #1
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
 8005bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d9dc      	bls.n	8005bae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <find_volume+0x184>
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	3b01      	subs	r3, #1
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005c12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <find_volume+0x1a6>
 8005c1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c1e:	f7ff fed9 	bl	80059d4 <check_fs>
 8005c22:	4603      	mov	r3, r0
 8005c24:	e000      	b.n	8005c28 <find_volume+0x1a8>
 8005c26:	2303      	movs	r3, #3
 8005c28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d905      	bls.n	8005c40 <find_volume+0x1c0>
 8005c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c36:	3301      	adds	r3, #1
 8005c38:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d9e1      	bls.n	8005c04 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d101      	bne.n	8005c4c <find_volume+0x1cc>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e192      	b.n	8005f72 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d901      	bls.n	8005c58 <find_volume+0x1d8>
 8005c54:	230d      	movs	r3, #13
 8005c56:	e18c      	b.n	8005f72 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	3334      	adds	r3, #52	; 0x34
 8005c5c:	330b      	adds	r3, #11
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe fbb0 	bl	80043c4 <ld_word>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	899b      	ldrh	r3, [r3, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <find_volume+0x1f4>
 8005c70:	230d      	movs	r3, #13
 8005c72:	e17e      	b.n	8005f72 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	3334      	adds	r3, #52	; 0x34
 8005c78:	3316      	adds	r3, #22
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fba2 	bl	80043c4 <ld_word>
 8005c80:	4603      	mov	r3, r0
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <find_volume+0x218>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	3334      	adds	r3, #52	; 0x34
 8005c8e:	3324      	adds	r3, #36	; 0x24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fbaf 	bl	80043f4 <ld_dword>
 8005c96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	789b      	ldrb	r3, [r3, #2]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d005      	beq.n	8005cbc <find_volume+0x23c>
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	789b      	ldrb	r3, [r3, #2]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d001      	beq.n	8005cbc <find_volume+0x23c>
 8005cb8:	230d      	movs	r3, #13
 8005cba:	e15a      	b.n	8005f72 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	789b      	ldrb	r3, [r3, #2]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	fb02 f303 	mul.w	r3, r2, r3
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	895b      	ldrh	r3, [r3, #10]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <find_volume+0x270>
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	895b      	ldrh	r3, [r3, #10]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	895b      	ldrh	r3, [r3, #10]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <find_volume+0x274>
 8005cf0:	230d      	movs	r3, #13
 8005cf2:	e13e      	b.n	8005f72 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	3334      	adds	r3, #52	; 0x34
 8005cf8:	3311      	adds	r3, #17
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fb62 	bl	80043c4 <ld_word>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	891b      	ldrh	r3, [r3, #8]
 8005d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d0e:	8992      	ldrh	r2, [r2, #12]
 8005d10:	0952      	lsrs	r2, r2, #5
 8005d12:	b292      	uxth	r2, r2
 8005d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d18:	fb02 f201 	mul.w	r2, r2, r1
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <find_volume+0x2a8>
 8005d24:	230d      	movs	r3, #13
 8005d26:	e124      	b.n	8005f72 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	3334      	adds	r3, #52	; 0x34
 8005d2c:	3313      	adds	r3, #19
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fb48 	bl	80043c4 <ld_word>
 8005d34:	4603      	mov	r3, r0
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <find_volume+0x2cc>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	3334      	adds	r3, #52	; 0x34
 8005d42:	3320      	adds	r3, #32
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fb55 	bl	80043f4 <ld_dword>
 8005d4a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	3334      	adds	r3, #52	; 0x34
 8005d50:	330e      	adds	r3, #14
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fb36 	bl	80043c4 <ld_word>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <find_volume+0x2ec>
 8005d62:	230d      	movs	r3, #13
 8005d64:	e105      	b.n	8005f72 <find_volume+0x4f2>
 8005d66:	bf00      	nop
 8005d68:	200000f8 	.word	0x200000f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d70:	4413      	add	r3, r2
 8005d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d74:	8911      	ldrh	r1, [r2, #8]
 8005d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d78:	8992      	ldrh	r2, [r2, #12]
 8005d7a:	0952      	lsrs	r2, r2, #5
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	fbb1 f2f2 	udiv	r2, r1, r2
 8005d82:	b292      	uxth	r2, r2
 8005d84:	4413      	add	r3, r2
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d201      	bcs.n	8005d94 <find_volume+0x314>
 8005d90:	230d      	movs	r3, #13
 8005d92:	e0ee      	b.n	8005f72 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d9c:	8952      	ldrh	r2, [r2, #10]
 8005d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <find_volume+0x32e>
 8005daa:	230d      	movs	r3, #13
 8005dac:	e0e1      	b.n	8005f72 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005dae:	2303      	movs	r3, #3
 8005db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d802      	bhi.n	8005dc4 <find_volume+0x344>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d802      	bhi.n	8005dd4 <find_volume+0x354>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005de0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005de2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de6:	441a      	add	r2, r3
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	441a      	add	r2, r3
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005df6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d11e      	bne.n	8005e3c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	3334      	adds	r3, #52	; 0x34
 8005e02:	332a      	adds	r3, #42	; 0x2a
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fadd 	bl	80043c4 <ld_word>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <find_volume+0x394>
 8005e10:	230d      	movs	r3, #13
 8005e12:	e0ae      	b.n	8005f72 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	891b      	ldrh	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <find_volume+0x3a0>
 8005e1c:	230d      	movs	r3, #13
 8005e1e:	e0a8      	b.n	8005f72 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	3334      	adds	r3, #52	; 0x34
 8005e24:	332c      	adds	r3, #44	; 0x2c
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fae4 	bl	80043f4 <ld_dword>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3a:	e01f      	b.n	8005e7c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	891b      	ldrh	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <find_volume+0x3c8>
 8005e44:	230d      	movs	r3, #13
 8005e46:	e094      	b.n	8005f72 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e4e:	441a      	add	r2, r3
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d103      	bne.n	8005e64 <find_volume+0x3e4>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	e00a      	b.n	8005e7a <find_volume+0x3fa>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	699a      	ldr	r2, [r3, #24]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	085a      	lsrs	r2, r3, #1
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	899b      	ldrh	r3, [r3, #12]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	440b      	add	r3, r1
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e8e:	8989      	ldrh	r1, [r1, #12]
 8005e90:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d201      	bcs.n	8005e9c <find_volume+0x41c>
 8005e98:	230d      	movs	r3, #13
 8005e9a:	e06a      	b.n	8005f72 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea2:	615a      	str	r2, [r3, #20]
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	2280      	movs	r2, #128	; 0x80
 8005eb0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005eb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d149      	bne.n	8005f4e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	3334      	adds	r3, #52	; 0x34
 8005ebe:	3330      	adds	r3, #48	; 0x30
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fa7f 	bl	80043c4 <ld_word>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d140      	bne.n	8005f4e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	3301      	adds	r3, #1
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ed4:	f7fe fd26 	bl	8004924 <move_window>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d137      	bne.n	8005f4e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	3334      	adds	r3, #52	; 0x34
 8005ee8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fa69 	bl	80043c4 <ld_word>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d127      	bne.n	8005f4e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	3334      	adds	r3, #52	; 0x34
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fa76 	bl	80043f4 <ld_dword>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <find_volume+0x4fc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d11e      	bne.n	8005f4e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	3334      	adds	r3, #52	; 0x34
 8005f14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fa6b 	bl	80043f4 <ld_dword>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <find_volume+0x500>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	3334      	adds	r3, #52	; 0x34
 8005f2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fa60 	bl	80043f4 <ld_dword>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	3334      	adds	r3, #52	; 0x34
 8005f3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fa56 	bl	80043f4 <ld_dword>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <find_volume+0x504>)
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <find_volume+0x504>)
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <find_volume+0x504>)
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f6c:	f7fe fc72 	bl	8004854 <clear_lock>
#endif
	return FR_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3758      	adds	r7, #88	; 0x58
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	41615252 	.word	0x41615252
 8005f80:	61417272 	.word	0x61417272
 8005f84:	200000fc 	.word	0x200000fc

08005f88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f92:	2309      	movs	r3, #9
 8005f94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01c      	beq.n	8005fd6 <validate+0x4e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d018      	beq.n	8005fd6 <validate+0x4e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <validate+0x4e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	889a      	ldrh	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	88db      	ldrh	r3, [r3, #6]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d10c      	bne.n	8005fd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	785b      	ldrb	r3, [r3, #1]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe f990 	bl	80042e8 <disk_status>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <validate+0x4e>
			res = FR_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <validate+0x5a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	e000      	b.n	8005fe4 <validate+0x5c>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	6013      	str	r3, [r2, #0]
	return res;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006006:	f107 0310 	add.w	r3, r7, #16
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fc9e 	bl	800594c <get_ldnumber>
 8006010:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da01      	bge.n	800601c <f_mount+0x28>
 8006018:	230b      	movs	r3, #11
 800601a:	e02b      	b.n	8006074 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <f_mount+0x88>)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006024:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800602c:	69b8      	ldr	r0, [r7, #24]
 800602e:	f7fe fc11 	bl	8004854 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	490d      	ldr	r1, [pc, #52]	; (800607c <f_mount+0x88>)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <f_mount+0x66>
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <f_mount+0x6a>
 800605a:	2300      	movs	r3, #0
 800605c:	e00a      	b.n	8006074 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800605e:	f107 010c 	add.w	r1, r7, #12
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	2200      	movs	r2, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fd09 	bl	8005a80 <find_volume>
 800606e:	4603      	mov	r3, r0
 8006070:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200000f8 	.word	0x200000f8

08006080 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b098      	sub	sp, #96	; 0x60
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <f_open+0x18>
 8006094:	2309      	movs	r3, #9
 8006096:	e1bb      	b.n	8006410 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800609e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80060a0:	79fa      	ldrb	r2, [r7, #7]
 80060a2:	f107 0110 	add.w	r1, r7, #16
 80060a6:	f107 0308 	add.w	r3, r7, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fce8 	bl	8005a80 <find_volume>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80060b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 819f 	bne.w	80063fe <f_open+0x37e>
		dj.obj.fs = fs;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fbc7 	bl	8005860 <follow_path>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80060d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d11a      	bne.n	8006116 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80060e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060e4:	b25b      	sxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da03      	bge.n	80060f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80060ea:	2306      	movs	r3, #6
 80060ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060f0:	e011      	b.n	8006116 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	f107 0314 	add.w	r3, r7, #20
 8006108:	4611      	mov	r1, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fa5a 	bl	80045c4 <chk_lock>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	f003 031c 	and.w	r3, r3, #28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d07f      	beq.n	8006220 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006120:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006124:	2b00      	cmp	r3, #0
 8006126:	d017      	beq.n	8006158 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800612c:	2b04      	cmp	r3, #4
 800612e:	d10e      	bne.n	800614e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006130:	f7fe faa4 	bl	800467c <enq_lock>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d006      	beq.n	8006148 <f_open+0xc8>
 800613a:	f107 0314 	add.w	r3, r7, #20
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fa69 	bl	8005616 <dir_register>
 8006144:	4603      	mov	r3, r0
 8006146:	e000      	b.n	800614a <f_open+0xca>
 8006148:	2312      	movs	r3, #18
 800614a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f043 0308 	orr.w	r3, r3, #8
 8006154:	71fb      	strb	r3, [r7, #7]
 8006156:	e010      	b.n	800617a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006158:	7ebb      	ldrb	r3, [r7, #26]
 800615a:	f003 0311 	and.w	r3, r3, #17
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <f_open+0xea>
					res = FR_DENIED;
 8006162:	2307      	movs	r3, #7
 8006164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006168:	e007      	b.n	800617a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <f_open+0xfa>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800617a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800617e:	2b00      	cmp	r3, #0
 8006180:	d168      	bne.n	8006254 <f_open+0x1d4>
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d063      	beq.n	8006254 <f_open+0x1d4>
				dw = GET_FATTIME();
 800618c:	f7fe f84c 	bl	8004228 <get_fattime>
 8006190:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006194:	330e      	adds	r3, #14
 8006196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe f969 	bl	8004470 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	3316      	adds	r3, #22
 80061a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe f963 	bl	8004470 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	330b      	adds	r3, #11
 80061ae:	2220      	movs	r2, #32
 80061b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff f93b 	bl	8005434 <ld_clust>
 80061be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061c4:	2200      	movs	r2, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f953 	bl	8005472 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80061cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ce:	331c      	adds	r3, #28
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe f94c 	bl	8004470 <st_dword>
					fs->wflag = 1;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2201      	movs	r2, #1
 80061dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d037      	beq.n	8006254 <f_open+0x1d4>
						dw = fs->winsect;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80061ea:	f107 0314 	add.w	r3, r7, #20
 80061ee:	2200      	movs	r2, #0
 80061f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fe43 	bl	8004e7e <remove_chain>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80061fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d126      	bne.n	8006254 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fb8a 	bl	8004924 <move_window>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800621a:	3a01      	subs	r2, #1
 800621c:	611a      	str	r2, [r3, #16]
 800621e:	e019      	b.n	8006254 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006224:	2b00      	cmp	r3, #0
 8006226:	d115      	bne.n	8006254 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006228:	7ebb      	ldrb	r3, [r7, #26]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006232:	2304      	movs	r3, #4
 8006234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006238:	e00c      	b.n	8006254 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <f_open+0x1d4>
 8006244:	7ebb      	ldrb	r3, [r7, #26]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <f_open+0x1d4>
						res = FR_DENIED;
 800624e:	2307      	movs	r3, #7
 8006250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006258:	2b00      	cmp	r3, #0
 800625a:	d128      	bne.n	80062ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	f107 0314 	add.w	r3, r7, #20
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fa13 	bl	80046c0 <inc_lock>
 800629a:	4602      	mov	r2, r0
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <f_open+0x22e>
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80062ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 80a3 	bne.w	80063fe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062bc:	4611      	mov	r1, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff f8b8 	bl	8005434 <ld_clust>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	331c      	adds	r3, #28
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe f890 	bl	80043f4 <ld_dword>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	88da      	ldrh	r2, [r3, #6]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	79fa      	ldrb	r2, [r7, #7]
 80062f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3330      	adds	r3, #48	; 0x30
 800630a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe f8fa 	bl	800450a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d06e      	beq.n	80063fe <f_open+0x37e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d06a      	beq.n	80063fe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	895b      	ldrh	r3, [r3, #10]
 8006334:	461a      	mov	r2, r3
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	899b      	ldrh	r3, [r3, #12]
 800633a:	fb03 f302 	mul.w	r3, r3, r2
 800633e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	657b      	str	r3, [r7, #84]	; 0x54
 800634c:	e016      	b.n	800637c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fba3 	bl	8004a9e <get_fat>
 8006358:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800635a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635c:	2b01      	cmp	r3, #1
 800635e:	d802      	bhi.n	8006366 <f_open+0x2e6>
 8006360:	2302      	movs	r3, #2
 8006362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d102      	bne.n	8006374 <f_open+0x2f4>
 800636e:	2301      	movs	r3, #1
 8006370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	657b      	str	r3, [r7, #84]	; 0x54
 800637c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <f_open+0x30c>
 8006384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006388:	429a      	cmp	r2, r3
 800638a:	d8e0      	bhi.n	800634e <f_open+0x2ce>
				}
				fp->clust = clst;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006390:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006396:	2b00      	cmp	r3, #0
 8006398:	d131      	bne.n	80063fe <f_open+0x37e>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	899b      	ldrh	r3, [r3, #12]
 800639e:	461a      	mov	r2, r3
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80063a6:	fb02 f201 	mul.w	r2, r2, r1
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d026      	beq.n	80063fe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fb53 	bl	8004a60 <clust2sect>
 80063ba:	6478      	str	r0, [r7, #68]	; 0x44
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <f_open+0x34a>
						res = FR_INT_ERR;
 80063c2:	2302      	movs	r3, #2
 80063c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063c8:	e019      	b.n	80063fe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	899b      	ldrh	r3, [r3, #12]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	7858      	ldrb	r0, [r3, #1]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	2301      	movs	r3, #1
 80063ee:	f7fd ffa1 	bl	8004334 <disk_read>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <f_open+0x37e>
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <f_open+0x38c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800640c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006410:	4618      	mov	r0, r3
 8006412:	3760      	adds	r7, #96	; 0x60
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08e      	sub	sp, #56	; 0x38
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f107 0214 	add.w	r2, r7, #20
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fda5 	bl	8005f88 <validate>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006448:	2b00      	cmp	r3, #0
 800644a:	d107      	bne.n	800645c <f_read+0x44>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	7d5b      	ldrb	r3, [r3, #21]
 8006450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <f_read+0x4a>
 800645c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006460:	e135      	b.n	80066ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	7d1b      	ldrb	r3, [r3, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <f_read+0x5a>
 800646e:	2307      	movs	r3, #7
 8006470:	e12d      	b.n	80066ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	429a      	cmp	r2, r3
 8006484:	f240 811e 	bls.w	80066c4 <f_read+0x2ac>
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800648c:	e11a      	b.n	80066c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	8992      	ldrh	r2, [r2, #12]
 8006496:	fbb3 f1f2 	udiv	r1, r3, r2
 800649a:	fb02 f201 	mul.w	r2, r2, r1
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 80d5 	bne.w	8006650 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	8992      	ldrh	r2, [r2, #12]
 80064ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	8952      	ldrh	r2, [r2, #10]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	4013      	ands	r3, r2
 80064ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12f      	bne.n	8006522 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
 80064d0:	e013      	b.n	80064fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	4619      	mov	r1, r3
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f7fe fdc9 	bl	8005078 <clmt_clust>
 80064e6:	6338      	str	r0, [r7, #48]	; 0x30
 80064e8:	e007      	b.n	80064fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f7fe fad3 	bl	8004a9e <get_fat>
 80064f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d804      	bhi.n	800650a <f_read+0xf2>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2202      	movs	r2, #2
 8006504:	755a      	strb	r2, [r3, #21]
 8006506:	2302      	movs	r3, #2
 8006508:	e0e1      	b.n	80066ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d104      	bne.n	800651c <f_read+0x104>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	755a      	strb	r2, [r3, #21]
 8006518:	2301      	movs	r3, #1
 800651a:	e0d8      	b.n	80066ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7fe fa98 	bl	8004a60 <clust2sect>
 8006530:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <f_read+0x12a>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2202      	movs	r2, #2
 800653c:	755a      	strb	r2, [r3, #21]
 800653e:	2302      	movs	r3, #2
 8006540:	e0c5      	b.n	80066ce <f_read+0x2b6>
			sect += csect;
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	899b      	ldrh	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	fbb3 f3f2 	udiv	r3, r3, r2
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d041      	beq.n	80065e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	4413      	add	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	8952      	ldrh	r2, [r2, #10]
 8006568:	4293      	cmp	r3, r2
 800656a:	d905      	bls.n	8006578 <f_read+0x160>
					cc = fs->csize - csect;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	895b      	ldrh	r3, [r3, #10]
 8006570:	461a      	mov	r2, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	7858      	ldrb	r0, [r3, #1]
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006582:	f7fd fed7 	bl	8004334 <disk_read>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <f_read+0x17e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	755a      	strb	r2, [r3, #21]
 8006592:	2301      	movs	r3, #1
 8006594:	e09b      	b.n	80066ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	7d1b      	ldrb	r3, [r3, #20]
 800659a:	b25b      	sxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	da18      	bge.n	80065d2 <f_read+0x1ba>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d911      	bls.n	80065d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	8992      	ldrh	r2, [r2, #12]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c0:	18d0      	adds	r0, r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	899b      	ldrh	r3, [r3, #12]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f7fd ff7b 	bl	80044c8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	899b      	ldrh	r3, [r3, #12]
 80065d6:	461a      	mov	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80065e0:	e05c      	b.n	800669c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d02e      	beq.n	800664a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	7d1b      	ldrb	r3, [r3, #20]
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da18      	bge.n	8006628 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	7858      	ldrb	r0, [r3, #1]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	2301      	movs	r3, #1
 8006606:	f7fd fead 	bl	8004364 <disk_write>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <f_read+0x202>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	755a      	strb	r2, [r3, #21]
 8006616:	2301      	movs	r3, #1
 8006618:	e059      	b.n	80066ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	7d1b      	ldrb	r3, [r3, #20]
 800661e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006622:	b2da      	uxtb	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	7858      	ldrb	r0, [r3, #1]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006632:	2301      	movs	r3, #1
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	f7fd fe7d 	bl	8004334 <disk_read>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <f_read+0x232>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	755a      	strb	r2, [r3, #21]
 8006646:	2301      	movs	r3, #1
 8006648:	e041      	b.n	80066ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	899b      	ldrh	r3, [r3, #12]
 8006654:	4618      	mov	r0, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	8992      	ldrh	r2, [r2, #12]
 800665e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006662:	fb02 f201 	mul.w	r2, r2, r1
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	1ac3      	subs	r3, r0, r3
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800666c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d901      	bls.n	8006678 <f_read+0x260>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	8992      	ldrh	r2, [r2, #12]
 8006686:	fbb3 f0f2 	udiv	r0, r3, r2
 800668a:	fb02 f200 	mul.w	r2, r2, r0
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	440b      	add	r3, r1
 8006692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006694:	4619      	mov	r1, r3
 8006696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006698:	f7fd ff16 	bl	80044c8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800669c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	4413      	add	r3, r2
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	441a      	add	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	619a      	str	r2, [r3, #24]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	441a      	add	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f47f aee1 	bne.w	800648e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3738      	adds	r7, #56	; 0x38
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08c      	sub	sp, #48	; 0x30
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f107 0210 	add.w	r2, r7, #16
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fc46 	bl	8005f88 <validate>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <f_write+0x44>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	7d5b      	ldrb	r3, [r3, #21]
 800670e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <f_write+0x4a>
 800671a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800671e:	e16a      	b.n	80069f6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	7d1b      	ldrb	r3, [r3, #20]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <f_write+0x5a>
 800672c:	2307      	movs	r3, #7
 800672e:	e162      	b.n	80069f6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	429a      	cmp	r2, r3
 800673e:	f080 814c 	bcs.w	80069da <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	43db      	mvns	r3, r3
 8006748:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800674a:	e146      	b.n	80069da <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	8992      	ldrh	r2, [r2, #12]
 8006754:	fbb3 f1f2 	udiv	r1, r3, r2
 8006758:	fb02 f201 	mul.w	r2, r2, r1
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 80f1 	bne.w	8006946 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	8992      	ldrh	r2, [r2, #12]
 800676c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	8952      	ldrh	r2, [r2, #10]
 8006774:	3a01      	subs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d143      	bne.n	8006808 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10c      	bne.n	80067a2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11a      	bne.n	80067ca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2100      	movs	r1, #0
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fbd5 	bl	8004f48 <create_chain>
 800679e:	62b8      	str	r0, [r7, #40]	; 0x28
 80067a0:	e013      	b.n	80067ca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	4619      	mov	r1, r3
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7fe fc61 	bl	8005078 <clmt_clust>
 80067b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80067b8:	e007      	b.n	80067ca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe fbc0 	bl	8004f48 <create_chain>
 80067c8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8109 	beq.w	80069e4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d104      	bne.n	80067e2 <f_write+0x10c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2202      	movs	r2, #2
 80067dc:	755a      	strb	r2, [r3, #21]
 80067de:	2302      	movs	r3, #2
 80067e0:	e109      	b.n	80069f6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d104      	bne.n	80067f4 <f_write+0x11e>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	755a      	strb	r2, [r3, #21]
 80067f0:	2301      	movs	r3, #1
 80067f2:	e100      	b.n	80069f6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <f_write+0x132>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006806:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	7d1b      	ldrb	r3, [r3, #20]
 800680c:	b25b      	sxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	da18      	bge.n	8006844 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	7858      	ldrb	r0, [r3, #1]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	2301      	movs	r3, #1
 8006822:	f7fd fd9f 	bl	8004364 <disk_write>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <f_write+0x160>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	755a      	strb	r2, [r3, #21]
 8006832:	2301      	movs	r3, #1
 8006834:	e0df      	b.n	80069f6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7d1b      	ldrb	r3, [r3, #20]
 800683a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fe f907 	bl	8004a60 <clust2sect>
 8006852:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d104      	bne.n	8006864 <f_write+0x18e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2202      	movs	r2, #2
 800685e:	755a      	strb	r2, [r3, #21]
 8006860:	2302      	movs	r3, #2
 8006862:	e0c8      	b.n	80069f6 <f_write+0x320>
			sect += csect;
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4413      	add	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	899b      	ldrh	r3, [r3, #12]
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d043      	beq.n	8006908 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	4413      	add	r3, r2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	8952      	ldrh	r2, [r2, #10]
 800688a:	4293      	cmp	r3, r2
 800688c:	d905      	bls.n	800689a <f_write+0x1c4>
					cc = fs->csize - csect;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	895b      	ldrh	r3, [r3, #10]
 8006892:	461a      	mov	r2, r3
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	7858      	ldrb	r0, [r3, #1]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	69f9      	ldr	r1, [r7, #28]
 80068a4:	f7fd fd5e 	bl	8004364 <disk_write>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <f_write+0x1e2>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	755a      	strb	r2, [r3, #21]
 80068b4:	2301      	movs	r3, #1
 80068b6:	e09e      	b.n	80069f6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d918      	bls.n	80068f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a1a      	ldr	r2, [r3, #32]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	8992      	ldrh	r2, [r2, #12]
 80068d8:	fb02 f303 	mul.w	r3, r2, r3
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	18d1      	adds	r1, r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	899b      	ldrh	r3, [r3, #12]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f7fd fdef 	bl	80044c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7d1b      	ldrb	r3, [r3, #20]
 80068ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	899b      	ldrh	r3, [r3, #12]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006906:	e04b      	b.n	80069a0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	429a      	cmp	r2, r3
 8006910:	d016      	beq.n	8006940 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800691a:	429a      	cmp	r2, r3
 800691c:	d210      	bcs.n	8006940 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	7858      	ldrb	r0, [r3, #1]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006928:	2301      	movs	r3, #1
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f7fd fd02 	bl	8004334 <disk_read>
 8006930:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006932:	2b00      	cmp	r3, #0
 8006934:	d004      	beq.n	8006940 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	755a      	strb	r2, [r3, #21]
 800693c:	2301      	movs	r3, #1
 800693e:	e05a      	b.n	80069f6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	899b      	ldrh	r3, [r3, #12]
 800694a:	4618      	mov	r0, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	8992      	ldrh	r2, [r2, #12]
 8006954:	fbb3 f1f2 	udiv	r1, r3, r2
 8006958:	fb02 f201 	mul.w	r2, r2, r1
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	1ac3      	subs	r3, r0, r3
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d901      	bls.n	800696e <f_write+0x298>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	8992      	ldrh	r2, [r2, #12]
 800697c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006980:	fb02 f200 	mul.w	r2, r2, r0
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	440b      	add	r3, r1
 8006988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698a:	69f9      	ldr	r1, [r7, #28]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fd fd9b 	bl	80044c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	7d1b      	ldrb	r3, [r3, #20]
 8006996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	4413      	add	r3, r2
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	441a      	add	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	619a      	str	r2, [r3, #24]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	429a      	cmp	r2, r3
 80069be:	bf38      	it	cc
 80069c0:	461a      	movcc	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	441a      	add	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f47f aeb5 	bne.w	800674c <f_write+0x76>
 80069e2:	e000      	b.n	80069e6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069e4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
 80069ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3730      	adds	r7, #48	; 0x30
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f107 0208 	add.w	r2, r7, #8
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff faba 	bl	8005f88 <validate>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d168      	bne.n	8006af0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	7d1b      	ldrb	r3, [r3, #20]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d062      	beq.n	8006af0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7d1b      	ldrb	r3, [r3, #20]
 8006a2e:	b25b      	sxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da15      	bge.n	8006a60 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	7858      	ldrb	r0, [r3, #1]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1a      	ldr	r2, [r3, #32]
 8006a42:	2301      	movs	r3, #1
 8006a44:	f7fd fc8e 	bl	8004364 <disk_write>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <f_sync+0x54>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e04f      	b.n	8006af2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	7d1b      	ldrb	r3, [r3, #20]
 8006a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006a60:	f7fd fbe2 	bl	8004228 <get_fattime>
 8006a64:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fd ff58 	bl	8004924 <move_window>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d138      	bne.n	8006af0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	330b      	adds	r3, #11
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	330b      	adds	r3, #11
 8006a8e:	f042 0220 	orr.w	r2, r2, #32
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	f7fe fce6 	bl	8005472 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f103 021c 	add.w	r2, r3, #28
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fd fcdc 	bl	8004470 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3316      	adds	r3, #22
 8006abc:	6939      	ldr	r1, [r7, #16]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd fcd6 	bl	8004470 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3312      	adds	r3, #18
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fcb5 	bl	800443a <st_word>
					fs->wflag = 1;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd ff51 	bl	8004980 <sync_fs>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7d1b      	ldrb	r3, [r3, #20]
 8006ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff7b 	bl	80069fe <f_sync>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d118      	bne.n	8006b44 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f107 0208 	add.w	r2, r7, #8
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fa34 	bl	8005f88 <validate>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fd fe54 	bl	80047dc <dec_lock>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b090      	sub	sp, #64	; 0x40
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f107 0208 	add.w	r2, r7, #8
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fa11 	bl	8005f88 <validate>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <f_lseek+0x2e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	7d5b      	ldrb	r3, [r3, #21]
 8006b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <f_lseek+0x3c>
 8006b84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b88:	e201      	b.n	8006f8e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80d9 	beq.w	8006d46 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d15a      	bne.n	8006c52 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	1d1a      	adds	r2, r3, #4
 8006ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	2302      	movs	r3, #2
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d03a      	beq.n	8006c32 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	3302      	adds	r3, #2
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd ff60 	bl	8004a9e <get_fat>
 8006bde:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d804      	bhi.n	8006bf0 <f_lseek+0xa2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	755a      	strb	r2, [r3, #21]
 8006bec:	2302      	movs	r3, #2
 8006bee:	e1ce      	b.n	8006f8e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf6:	d104      	bne.n	8006c02 <f_lseek+0xb4>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	755a      	strb	r2, [r3, #21]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e1c5      	b.n	8006f8e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d0de      	beq.n	8006bca <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d809      	bhi.n	8006c28 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	1d1a      	adds	r2, r3, #4
 8006c18:	627a      	str	r2, [r7, #36]	; 0x24
 8006c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	627a      	str	r2, [r7, #36]	; 0x24
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3c4      	bcc.n	8006bbc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d803      	bhi.n	8006c4a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	e19f      	b.n	8006f8a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006c4a:	2311      	movs	r3, #17
 8006c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006c50:	e19b      	b.n	8006f8a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d902      	bls.n	8006c62 <f_lseek+0x114>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 818d 	beq.w	8006f8a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe f9fe 	bl	8005078 <clmt_clust>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fd fee8 	bl	8004a60 <clust2sect>
 8006c90:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <f_lseek+0x154>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	755a      	strb	r2, [r3, #21]
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e175      	b.n	8006f8e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	8992      	ldrh	r2, [r2, #12]
 8006caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	8952      	ldrh	r2, [r2, #10]
 8006cb2:	3a01      	subs	r2, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	4413      	add	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	8992      	ldrh	r2, [r2, #12]
 8006cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc8:	fb02 f201 	mul.w	r2, r2, r1
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 815b 	beq.w	8006f8a <f_lseek+0x43c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f000 8155 	beq.w	8006f8a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7d1b      	ldrb	r3, [r3, #20]
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da18      	bge.n	8006d1c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	7858      	ldrb	r0, [r3, #1]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f7fd fb33 	bl	8004364 <disk_write>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <f_lseek+0x1c0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	755a      	strb	r2, [r3, #21]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e13f      	b.n	8006f8e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	7858      	ldrb	r0, [r3, #1]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d26:	2301      	movs	r3, #1
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	f7fd fb03 	bl	8004334 <disk_read>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <f_lseek+0x1f0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	755a      	strb	r2, [r3, #21]
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e127      	b.n	8006f8e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	621a      	str	r2, [r3, #32]
 8006d44:	e121      	b.n	8006f8a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d908      	bls.n	8006d62 <f_lseek+0x214>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7d1b      	ldrb	r3, [r3, #20]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d102      	bne.n	8006d62 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d70:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80b5 	beq.w	8006ee4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	895b      	ldrh	r3, [r3, #10]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	899b      	ldrh	r3, [r3, #12]
 8006d84:	fb03 f302 	mul.w	r3, r3, r2
 8006d88:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	1e59      	subs	r1, r3, #1
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d30f      	bcc.n	8006dc8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	425b      	negs	r3, r3
 8006db0:	401a      	ands	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc6:	e022      	b.n	8006e0e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d119      	bne.n	8006e08 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fe f8b5 	bl	8004f48 <create_chain>
 8006dde:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d104      	bne.n	8006df0 <f_lseek+0x2a2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	755a      	strb	r2, [r3, #21]
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0ce      	b.n	8006f8e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	d104      	bne.n	8006e02 <f_lseek+0x2b4>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	755a      	strb	r2, [r3, #21]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e0c5      	b.n	8006f8e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e06:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d067      	beq.n	8006ee4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006e14:	e03a      	b.n	8006e8c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7d1b      	ldrb	r3, [r3, #20]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe f884 	bl	8004f48 <create_chain>
 8006e40:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d108      	bne.n	8006e5a <f_lseek+0x30c>
							ofs = 0; break;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	e022      	b.n	8006e94 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd fe23 	bl	8004a9e <get_fat>
 8006e58:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e60:	d104      	bne.n	8006e6c <f_lseek+0x31e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	755a      	strb	r2, [r3, #21]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e090      	b.n	8006f8e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d904      	bls.n	8006e7c <f_lseek+0x32e>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d304      	bcc.n	8006e86 <f_lseek+0x338>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	755a      	strb	r2, [r3, #21]
 8006e82:	2302      	movs	r3, #2
 8006e84:	e083      	b.n	8006f8e <f_lseek+0x440>
					fp->clust = clst;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e8a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d8c0      	bhi.n	8006e16 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	899b      	ldrh	r3, [r3, #12]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006eac:	fb02 f201 	mul.w	r2, r2, r1
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd fdd0 	bl	8004a60 <clust2sect>
 8006ec0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <f_lseek+0x384>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	755a      	strb	r2, [r3, #21]
 8006ece:	2302      	movs	r3, #2
 8006ed0:	e05d      	b.n	8006f8e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	899b      	ldrh	r3, [r3, #12]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee0:	4413      	add	r3, r2
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d90a      	bls.n	8006f06 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	8992      	ldrh	r2, [r2, #12]
 8006f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f12:	fb02 f201 	mul.w	r2, r2, r1
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d036      	beq.n	8006f8a <f_lseek+0x43c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d031      	beq.n	8006f8a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7d1b      	ldrb	r3, [r3, #20]
 8006f2a:	b25b      	sxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da18      	bge.n	8006f62 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	7858      	ldrb	r0, [r3, #1]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f7fd fa10 	bl	8004364 <disk_write>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <f_lseek+0x406>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	755a      	strb	r2, [r3, #21]
 8006f50:	2301      	movs	r3, #1
 8006f52:	e01c      	b.n	8006f8e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7d1b      	ldrb	r3, [r3, #20]
 8006f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	7858      	ldrb	r0, [r3, #1]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f70:	f7fd f9e0 	bl	8004334 <disk_read>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <f_lseek+0x436>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	755a      	strb	r2, [r3, #21]
 8006f80:	2301      	movs	r3, #1
 8006f82:	e004      	b.n	8006f8e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f88:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3740      	adds	r7, #64	; 0x40
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <f_opendir+0x14>
 8006fa6:	2309      	movs	r3, #9
 8006fa8:	e064      	b.n	8007074 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8006fae:	f107 010c 	add.w	r1, r7, #12
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fd62 	bl	8005a80 <find_volume>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d14f      	bne.n	8007066 <f_opendir+0xd0>
		obj->fs = fs;
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7fe fc45 	bl	8005860 <follow_path>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d13d      	bne.n	800705c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db12      	blt.n	8007012 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	799b      	ldrb	r3, [r3, #6]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fe fa17 	bl	8005434 <ld_clust>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	609a      	str	r2, [r3, #8]
 800700c:	e001      	b.n	8007012 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800700e:	2305      	movs	r3, #5
 8007010:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d121      	bne.n	800705c <f_opendir+0xc6>
				obj->id = fs->id;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	88da      	ldrh	r2, [r3, #6]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fe f860 	bl	80050e8 <dir_sdi>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d114      	bne.n	800705c <f_opendir+0xc6>
					if (obj->sclust) {
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800703a:	2100      	movs	r1, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fd fb3f 	bl	80046c0 <inc_lock>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <f_opendir+0xc6>
 8007050:	2312      	movs	r3, #18
 8007052:	75fb      	strb	r3, [r7, #23]
 8007054:	e002      	b.n	800705c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2200      	movs	r2, #0
 800705a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b04      	cmp	r3, #4
 8007060:	d101      	bne.n	8007066 <f_opendir+0xd0>
 8007062:	2305      	movs	r3, #5
 8007064:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <f_opendir+0xdc>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007072:	7dfb      	ldrb	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f107 0208 	add.w	r2, r7, #8
 800708a:	4611      	mov	r1, r2
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe ff7b 	bl	8005f88 <validate>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d110      	bne.n	80070be <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fd fb97 	bl	80047dc <dec_lock>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f107 0208 	add.w	r2, r7, #8
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe ff54 	bl	8005f88 <validate>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d126      	bne.n	8007138 <f_readdir+0x70>
		if (!fno) {
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fd fff8 	bl	80050e8 <dir_sdi>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
 80070fc:	e01c      	b.n	8007138 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80070fe:	2100      	movs	r1, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7fe f9d6 	bl	80054b2 <dir_read>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d101      	bne.n	8007114 <f_readdir+0x4c>
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10e      	bne.n	8007138 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fe faac 	bl	800567a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007122:	2100      	movs	r1, #0
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe f868 	bl	80051fa <dir_next>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d101      	bne.n	8007138 <f_readdir+0x70>
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b092      	sub	sp, #72	; 0x48
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800714e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007152:	f107 030c 	add.w	r3, r7, #12
 8007156:	2200      	movs	r2, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fc91 	bl	8005a80 <find_volume>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007164:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 8099 	bne.w	80072a0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800716e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	695a      	ldr	r2, [r3, #20]
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	3b02      	subs	r3, #2
 800717e:	429a      	cmp	r2, r3
 8007180:	d804      	bhi.n	800718c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e089      	b.n	80072a0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d128      	bne.n	80071ea <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007198:	2302      	movs	r3, #2
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80071a0:	f107 0314 	add.w	r3, r7, #20
 80071a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fd fc79 	bl	8004a9e <get_fat>
 80071ac:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d103      	bne.n	80071be <f_getfree+0x7c>
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071bc:	e063      	b.n	8007286 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d103      	bne.n	80071cc <f_getfree+0x8a>
 80071c4:	2302      	movs	r3, #2
 80071c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071ca:	e05c      	b.n	8007286 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <f_getfree+0x96>
 80071d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d4:	3301      	adds	r3, #1
 80071d6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	3301      	adds	r3, #1
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3db      	bcc.n	80071a0 <f_getfree+0x5e>
 80071e8:	e04d      	b.n	8007286 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	2300      	movs	r3, #0
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d113      	bne.n	800722c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	63ba      	str	r2, [r7, #56]	; 0x38
 800720c:	4619      	mov	r1, r3
 800720e:	f7fd fb89 	bl	8004924 <move_window>
 8007212:	4603      	mov	r3, r0
 8007214:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800721c:	2b00      	cmp	r3, #0
 800721e:	d131      	bne.n	8007284 <f_getfree+0x142>
							p = fs->win;
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	3334      	adds	r3, #52	; 0x34
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	899b      	ldrh	r3, [r3, #12]
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d10f      	bne.n	8007254 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007236:	f7fd f8c5 	bl	80043c4 <ld_word>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <f_getfree+0x104>
 8007240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007242:	3301      	adds	r3, #1
 8007244:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	3302      	adds	r3, #2
 800724a:	633b      	str	r3, [r7, #48]	; 0x30
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	3b02      	subs	r3, #2
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	e010      	b.n	8007276 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007256:	f7fd f8cd 	bl	80043f4 <ld_dword>
 800725a:	4603      	mov	r3, r0
 800725c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <f_getfree+0x128>
 8007264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007266:	3301      	adds	r3, #1
 8007268:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	3304      	adds	r3, #4
 800726e:	633b      	str	r3, [r7, #48]	; 0x30
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007272:	3b04      	subs	r3, #4
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	3b01      	subs	r3, #1
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800727c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1bd      	bne.n	80071fe <f_getfree+0xbc>
 8007282:	e000      	b.n	8007286 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007284:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800728a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007290:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	791a      	ldrb	r2, [r3, #4]
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80072a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3748      	adds	r7, #72	; 0x48
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80072c2:	4b1f      	ldr	r3, [pc, #124]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072c4:	7a5b      	ldrb	r3, [r3, #9]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d131      	bne.n	8007330 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80072cc:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072ce:	7a5b      	ldrb	r3, [r3, #9]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072d6:	2100      	movs	r1, #0
 80072d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072dc:	7a5b      	ldrb	r3, [r3, #9]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4a17      	ldr	r2, [pc, #92]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072ea:	4b15      	ldr	r3, [pc, #84]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072ec:	7a5b      	ldrb	r3, [r3, #9]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	4b13      	ldr	r3, [pc, #76]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072f4:	4413      	add	r3, r2
 80072f6:	79fa      	ldrb	r2, [r7, #7]
 80072f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 80072fc:	7a5b      	ldrb	r3, [r3, #9]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	b2d1      	uxtb	r1, r2
 8007304:	4a0e      	ldr	r2, [pc, #56]	; (8007340 <FATFS_LinkDriverEx+0x94>)
 8007306:	7251      	strb	r1, [r2, #9]
 8007308:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	3330      	adds	r3, #48	; 0x30
 800730e:	b2da      	uxtb	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3301      	adds	r3, #1
 8007318:	223a      	movs	r2, #58	; 0x3a
 800731a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	3302      	adds	r3, #2
 8007320:	222f      	movs	r2, #47	; 0x2f
 8007322:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3303      	adds	r3, #3
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000120 	.word	0x20000120

08007344 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800734e:	2200      	movs	r2, #0
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff ffaa 	bl	80072ac <FATFS_LinkDriverEx>
 8007358:	4603      	mov	r3, r0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <__errno>:
 8007364:	4b01      	ldr	r3, [pc, #4]	; (800736c <__errno+0x8>)
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000005c 	.word	0x2000005c

08007370 <__libc_init_array>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4d0d      	ldr	r5, [pc, #52]	; (80073a8 <__libc_init_array+0x38>)
 8007374:	4c0d      	ldr	r4, [pc, #52]	; (80073ac <__libc_init_array+0x3c>)
 8007376:	1b64      	subs	r4, r4, r5
 8007378:	10a4      	asrs	r4, r4, #2
 800737a:	2600      	movs	r6, #0
 800737c:	42a6      	cmp	r6, r4
 800737e:	d109      	bne.n	8007394 <__libc_init_array+0x24>
 8007380:	4d0b      	ldr	r5, [pc, #44]	; (80073b0 <__libc_init_array+0x40>)
 8007382:	4c0c      	ldr	r4, [pc, #48]	; (80073b4 <__libc_init_array+0x44>)
 8007384:	f001 f9be 	bl	8008704 <_init>
 8007388:	1b64      	subs	r4, r4, r5
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	2600      	movs	r6, #0
 800738e:	42a6      	cmp	r6, r4
 8007390:	d105      	bne.n	800739e <__libc_init_array+0x2e>
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	f855 3b04 	ldr.w	r3, [r5], #4
 8007398:	4798      	blx	r3
 800739a:	3601      	adds	r6, #1
 800739c:	e7ee      	b.n	800737c <__libc_init_array+0xc>
 800739e:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a2:	4798      	blx	r3
 80073a4:	3601      	adds	r6, #1
 80073a6:	e7f2      	b.n	800738e <__libc_init_array+0x1e>
 80073a8:	08008a44 	.word	0x08008a44
 80073ac:	08008a44 	.word	0x08008a44
 80073b0:	08008a44 	.word	0x08008a44
 80073b4:	08008a48 	.word	0x08008a48

080073b8 <memset>:
 80073b8:	4402      	add	r2, r0
 80073ba:	4603      	mov	r3, r0
 80073bc:	4293      	cmp	r3, r2
 80073be:	d100      	bne.n	80073c2 <memset+0xa>
 80073c0:	4770      	bx	lr
 80073c2:	f803 1b01 	strb.w	r1, [r3], #1
 80073c6:	e7f9      	b.n	80073bc <memset+0x4>

080073c8 <iprintf>:
 80073c8:	b40f      	push	{r0, r1, r2, r3}
 80073ca:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <iprintf+0x2c>)
 80073cc:	b513      	push	{r0, r1, r4, lr}
 80073ce:	681c      	ldr	r4, [r3, #0]
 80073d0:	b124      	cbz	r4, 80073dc <iprintf+0x14>
 80073d2:	69a3      	ldr	r3, [r4, #24]
 80073d4:	b913      	cbnz	r3, 80073dc <iprintf+0x14>
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 fa7e 	bl	80078d8 <__sinit>
 80073dc:	ab05      	add	r3, sp, #20
 80073de:	9a04      	ldr	r2, [sp, #16]
 80073e0:	68a1      	ldr	r1, [r4, #8]
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fdab 	bl	8007f40 <_vfiprintf_r>
 80073ea:	b002      	add	sp, #8
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f0:	b004      	add	sp, #16
 80073f2:	4770      	bx	lr
 80073f4:	2000005c 	.word	0x2000005c

080073f8 <_puts_r>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	460e      	mov	r6, r1
 80073fc:	4605      	mov	r5, r0
 80073fe:	b118      	cbz	r0, 8007408 <_puts_r+0x10>
 8007400:	6983      	ldr	r3, [r0, #24]
 8007402:	b90b      	cbnz	r3, 8007408 <_puts_r+0x10>
 8007404:	f000 fa68 	bl	80078d8 <__sinit>
 8007408:	69ab      	ldr	r3, [r5, #24]
 800740a:	68ac      	ldr	r4, [r5, #8]
 800740c:	b913      	cbnz	r3, 8007414 <_puts_r+0x1c>
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fa62 	bl	80078d8 <__sinit>
 8007414:	4b2c      	ldr	r3, [pc, #176]	; (80074c8 <_puts_r+0xd0>)
 8007416:	429c      	cmp	r4, r3
 8007418:	d120      	bne.n	800745c <_puts_r+0x64>
 800741a:	686c      	ldr	r4, [r5, #4]
 800741c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800741e:	07db      	lsls	r3, r3, #31
 8007420:	d405      	bmi.n	800742e <_puts_r+0x36>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	0598      	lsls	r0, r3, #22
 8007426:	d402      	bmi.n	800742e <_puts_r+0x36>
 8007428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742a:	f000 faf3 	bl	8007a14 <__retarget_lock_acquire_recursive>
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	0719      	lsls	r1, r3, #28
 8007432:	d51d      	bpl.n	8007470 <_puts_r+0x78>
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	b1db      	cbz	r3, 8007470 <_puts_r+0x78>
 8007438:	3e01      	subs	r6, #1
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007440:	3b01      	subs	r3, #1
 8007442:	60a3      	str	r3, [r4, #8]
 8007444:	bb39      	cbnz	r1, 8007496 <_puts_r+0x9e>
 8007446:	2b00      	cmp	r3, #0
 8007448:	da38      	bge.n	80074bc <_puts_r+0xc4>
 800744a:	4622      	mov	r2, r4
 800744c:	210a      	movs	r1, #10
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f868 	bl	8007524 <__swbuf_r>
 8007454:	3001      	adds	r0, #1
 8007456:	d011      	beq.n	800747c <_puts_r+0x84>
 8007458:	250a      	movs	r5, #10
 800745a:	e011      	b.n	8007480 <_puts_r+0x88>
 800745c:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <_puts_r+0xd4>)
 800745e:	429c      	cmp	r4, r3
 8007460:	d101      	bne.n	8007466 <_puts_r+0x6e>
 8007462:	68ac      	ldr	r4, [r5, #8]
 8007464:	e7da      	b.n	800741c <_puts_r+0x24>
 8007466:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <_puts_r+0xd8>)
 8007468:	429c      	cmp	r4, r3
 800746a:	bf08      	it	eq
 800746c:	68ec      	ldreq	r4, [r5, #12]
 800746e:	e7d5      	b.n	800741c <_puts_r+0x24>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f8a8 	bl	80075c8 <__swsetup_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0dd      	beq.n	8007438 <_puts_r+0x40>
 800747c:	f04f 35ff 	mov.w	r5, #4294967295
 8007480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007482:	07da      	lsls	r2, r3, #31
 8007484:	d405      	bmi.n	8007492 <_puts_r+0x9a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	059b      	lsls	r3, r3, #22
 800748a:	d402      	bmi.n	8007492 <_puts_r+0x9a>
 800748c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748e:	f000 fac2 	bl	8007a16 <__retarget_lock_release_recursive>
 8007492:	4628      	mov	r0, r5
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	2b00      	cmp	r3, #0
 8007498:	da04      	bge.n	80074a4 <_puts_r+0xac>
 800749a:	69a2      	ldr	r2, [r4, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	dc06      	bgt.n	80074ae <_puts_r+0xb6>
 80074a0:	290a      	cmp	r1, #10
 80074a2:	d004      	beq.n	80074ae <_puts_r+0xb6>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	6022      	str	r2, [r4, #0]
 80074aa:	7019      	strb	r1, [r3, #0]
 80074ac:	e7c5      	b.n	800743a <_puts_r+0x42>
 80074ae:	4622      	mov	r2, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 f837 	bl	8007524 <__swbuf_r>
 80074b6:	3001      	adds	r0, #1
 80074b8:	d1bf      	bne.n	800743a <_puts_r+0x42>
 80074ba:	e7df      	b.n	800747c <_puts_r+0x84>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	250a      	movs	r5, #10
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	6022      	str	r2, [r4, #0]
 80074c4:	701d      	strb	r5, [r3, #0]
 80074c6:	e7db      	b.n	8007480 <_puts_r+0x88>
 80074c8:	080089c8 	.word	0x080089c8
 80074cc:	080089e8 	.word	0x080089e8
 80074d0:	080089a8 	.word	0x080089a8

080074d4 <puts>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	; (80074e0 <puts+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f7ff bf8d 	b.w	80073f8 <_puts_r>
 80074de:	bf00      	nop
 80074e0:	2000005c 	.word	0x2000005c

080074e4 <siprintf>:
 80074e4:	b40e      	push	{r1, r2, r3}
 80074e6:	b500      	push	{lr}
 80074e8:	b09c      	sub	sp, #112	; 0x70
 80074ea:	ab1d      	add	r3, sp, #116	; 0x74
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074f4:	4809      	ldr	r0, [pc, #36]	; (800751c <siprintf+0x38>)
 80074f6:	9107      	str	r1, [sp, #28]
 80074f8:	9104      	str	r1, [sp, #16]
 80074fa:	4909      	ldr	r1, [pc, #36]	; (8007520 <siprintf+0x3c>)
 80074fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007500:	9105      	str	r1, [sp, #20]
 8007502:	6800      	ldr	r0, [r0, #0]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	a902      	add	r1, sp, #8
 8007508:	f000 fbf0 	bl	8007cec <_svfiprintf_r>
 800750c:	9b02      	ldr	r3, [sp, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	b01c      	add	sp, #112	; 0x70
 8007514:	f85d eb04 	ldr.w	lr, [sp], #4
 8007518:	b003      	add	sp, #12
 800751a:	4770      	bx	lr
 800751c:	2000005c 	.word	0x2000005c
 8007520:	ffff0208 	.word	0xffff0208

08007524 <__swbuf_r>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	460e      	mov	r6, r1
 8007528:	4614      	mov	r4, r2
 800752a:	4605      	mov	r5, r0
 800752c:	b118      	cbz	r0, 8007536 <__swbuf_r+0x12>
 800752e:	6983      	ldr	r3, [r0, #24]
 8007530:	b90b      	cbnz	r3, 8007536 <__swbuf_r+0x12>
 8007532:	f000 f9d1 	bl	80078d8 <__sinit>
 8007536:	4b21      	ldr	r3, [pc, #132]	; (80075bc <__swbuf_r+0x98>)
 8007538:	429c      	cmp	r4, r3
 800753a:	d12b      	bne.n	8007594 <__swbuf_r+0x70>
 800753c:	686c      	ldr	r4, [r5, #4]
 800753e:	69a3      	ldr	r3, [r4, #24]
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	071a      	lsls	r2, r3, #28
 8007546:	d52f      	bpl.n	80075a8 <__swbuf_r+0x84>
 8007548:	6923      	ldr	r3, [r4, #16]
 800754a:	b36b      	cbz	r3, 80075a8 <__swbuf_r+0x84>
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	6820      	ldr	r0, [r4, #0]
 8007550:	1ac0      	subs	r0, r0, r3
 8007552:	6963      	ldr	r3, [r4, #20]
 8007554:	b2f6      	uxtb	r6, r6
 8007556:	4283      	cmp	r3, r0
 8007558:	4637      	mov	r7, r6
 800755a:	dc04      	bgt.n	8007566 <__swbuf_r+0x42>
 800755c:	4621      	mov	r1, r4
 800755e:	4628      	mov	r0, r5
 8007560:	f000 f926 	bl	80077b0 <_fflush_r>
 8007564:	bb30      	cbnz	r0, 80075b4 <__swbuf_r+0x90>
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	3b01      	subs	r3, #1
 800756a:	60a3      	str	r3, [r4, #8]
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	701e      	strb	r6, [r3, #0]
 8007574:	6963      	ldr	r3, [r4, #20]
 8007576:	3001      	adds	r0, #1
 8007578:	4283      	cmp	r3, r0
 800757a:	d004      	beq.n	8007586 <__swbuf_r+0x62>
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	07db      	lsls	r3, r3, #31
 8007580:	d506      	bpl.n	8007590 <__swbuf_r+0x6c>
 8007582:	2e0a      	cmp	r6, #10
 8007584:	d104      	bne.n	8007590 <__swbuf_r+0x6c>
 8007586:	4621      	mov	r1, r4
 8007588:	4628      	mov	r0, r5
 800758a:	f000 f911 	bl	80077b0 <_fflush_r>
 800758e:	b988      	cbnz	r0, 80075b4 <__swbuf_r+0x90>
 8007590:	4638      	mov	r0, r7
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007594:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <__swbuf_r+0x9c>)
 8007596:	429c      	cmp	r4, r3
 8007598:	d101      	bne.n	800759e <__swbuf_r+0x7a>
 800759a:	68ac      	ldr	r4, [r5, #8]
 800759c:	e7cf      	b.n	800753e <__swbuf_r+0x1a>
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <__swbuf_r+0xa0>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	bf08      	it	eq
 80075a4:	68ec      	ldreq	r4, [r5, #12]
 80075a6:	e7ca      	b.n	800753e <__swbuf_r+0x1a>
 80075a8:	4621      	mov	r1, r4
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 f80c 	bl	80075c8 <__swsetup_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d0cb      	beq.n	800754c <__swbuf_r+0x28>
 80075b4:	f04f 37ff 	mov.w	r7, #4294967295
 80075b8:	e7ea      	b.n	8007590 <__swbuf_r+0x6c>
 80075ba:	bf00      	nop
 80075bc:	080089c8 	.word	0x080089c8
 80075c0:	080089e8 	.word	0x080089e8
 80075c4:	080089a8 	.word	0x080089a8

080075c8 <__swsetup_r>:
 80075c8:	4b32      	ldr	r3, [pc, #200]	; (8007694 <__swsetup_r+0xcc>)
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	681d      	ldr	r5, [r3, #0]
 80075ce:	4606      	mov	r6, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	b125      	cbz	r5, 80075de <__swsetup_r+0x16>
 80075d4:	69ab      	ldr	r3, [r5, #24]
 80075d6:	b913      	cbnz	r3, 80075de <__swsetup_r+0x16>
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f97d 	bl	80078d8 <__sinit>
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <__swsetup_r+0xd0>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	d10f      	bne.n	8007604 <__swsetup_r+0x3c>
 80075e4:	686c      	ldr	r4, [r5, #4]
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ec:	0719      	lsls	r1, r3, #28
 80075ee:	d42c      	bmi.n	800764a <__swsetup_r+0x82>
 80075f0:	06dd      	lsls	r5, r3, #27
 80075f2:	d411      	bmi.n	8007618 <__swsetup_r+0x50>
 80075f4:	2309      	movs	r3, #9
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e03e      	b.n	8007682 <__swsetup_r+0xba>
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <__swsetup_r+0xd4>)
 8007606:	429c      	cmp	r4, r3
 8007608:	d101      	bne.n	800760e <__swsetup_r+0x46>
 800760a:	68ac      	ldr	r4, [r5, #8]
 800760c:	e7eb      	b.n	80075e6 <__swsetup_r+0x1e>
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <__swsetup_r+0xd8>)
 8007610:	429c      	cmp	r4, r3
 8007612:	bf08      	it	eq
 8007614:	68ec      	ldreq	r4, [r5, #12]
 8007616:	e7e6      	b.n	80075e6 <__swsetup_r+0x1e>
 8007618:	0758      	lsls	r0, r3, #29
 800761a:	d512      	bpl.n	8007642 <__swsetup_r+0x7a>
 800761c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761e:	b141      	cbz	r1, 8007632 <__swsetup_r+0x6a>
 8007620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007624:	4299      	cmp	r1, r3
 8007626:	d002      	beq.n	800762e <__swsetup_r+0x66>
 8007628:	4630      	mov	r0, r6
 800762a:	f000 fa59 	bl	8007ae0 <_free_r>
 800762e:	2300      	movs	r3, #0
 8007630:	6363      	str	r3, [r4, #52]	; 0x34
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	2300      	movs	r3, #0
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f043 0308 	orr.w	r3, r3, #8
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	b94b      	cbnz	r3, 8007662 <__swsetup_r+0x9a>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007658:	d003      	beq.n	8007662 <__swsetup_r+0x9a>
 800765a:	4621      	mov	r1, r4
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f9ff 	bl	8007a60 <__smakebuf_r>
 8007662:	89a0      	ldrh	r0, [r4, #12]
 8007664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007668:	f010 0301 	ands.w	r3, r0, #1
 800766c:	d00a      	beq.n	8007684 <__swsetup_r+0xbc>
 800766e:	2300      	movs	r3, #0
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	425b      	negs	r3, r3
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	b943      	cbnz	r3, 800768e <__swsetup_r+0xc6>
 800767c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007680:	d1ba      	bne.n	80075f8 <__swsetup_r+0x30>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	0781      	lsls	r1, r0, #30
 8007686:	bf58      	it	pl
 8007688:	6963      	ldrpl	r3, [r4, #20]
 800768a:	60a3      	str	r3, [r4, #8]
 800768c:	e7f4      	b.n	8007678 <__swsetup_r+0xb0>
 800768e:	2000      	movs	r0, #0
 8007690:	e7f7      	b.n	8007682 <__swsetup_r+0xba>
 8007692:	bf00      	nop
 8007694:	2000005c 	.word	0x2000005c
 8007698:	080089c8 	.word	0x080089c8
 800769c:	080089e8 	.word	0x080089e8
 80076a0:	080089a8 	.word	0x080089a8

080076a4 <__sflush_r>:
 80076a4:	898a      	ldrh	r2, [r1, #12]
 80076a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	4605      	mov	r5, r0
 80076ac:	0710      	lsls	r0, r2, #28
 80076ae:	460c      	mov	r4, r1
 80076b0:	d458      	bmi.n	8007764 <__sflush_r+0xc0>
 80076b2:	684b      	ldr	r3, [r1, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dc05      	bgt.n	80076c4 <__sflush_r+0x20>
 80076b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dc02      	bgt.n	80076c4 <__sflush_r+0x20>
 80076be:	2000      	movs	r0, #0
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c6:	2e00      	cmp	r6, #0
 80076c8:	d0f9      	beq.n	80076be <__sflush_r+0x1a>
 80076ca:	2300      	movs	r3, #0
 80076cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d0:	682f      	ldr	r7, [r5, #0]
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	d032      	beq.n	800773c <__sflush_r+0x98>
 80076d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	075a      	lsls	r2, r3, #29
 80076dc:	d505      	bpl.n	80076ea <__sflush_r+0x46>
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	1ac0      	subs	r0, r0, r3
 80076e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e4:	b10b      	cbz	r3, 80076ea <__sflush_r+0x46>
 80076e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076e8:	1ac0      	subs	r0, r0, r3
 80076ea:	2300      	movs	r3, #0
 80076ec:	4602      	mov	r2, r0
 80076ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f0:	6a21      	ldr	r1, [r4, #32]
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b0      	blx	r6
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	d106      	bne.n	800770a <__sflush_r+0x66>
 80076fc:	6829      	ldr	r1, [r5, #0]
 80076fe:	291d      	cmp	r1, #29
 8007700:	d82c      	bhi.n	800775c <__sflush_r+0xb8>
 8007702:	4a2a      	ldr	r2, [pc, #168]	; (80077ac <__sflush_r+0x108>)
 8007704:	40ca      	lsrs	r2, r1
 8007706:	07d6      	lsls	r6, r2, #31
 8007708:	d528      	bpl.n	800775c <__sflush_r+0xb8>
 800770a:	2200      	movs	r2, #0
 800770c:	6062      	str	r2, [r4, #4]
 800770e:	04d9      	lsls	r1, r3, #19
 8007710:	6922      	ldr	r2, [r4, #16]
 8007712:	6022      	str	r2, [r4, #0]
 8007714:	d504      	bpl.n	8007720 <__sflush_r+0x7c>
 8007716:	1c42      	adds	r2, r0, #1
 8007718:	d101      	bne.n	800771e <__sflush_r+0x7a>
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	b903      	cbnz	r3, 8007720 <__sflush_r+0x7c>
 800771e:	6560      	str	r0, [r4, #84]	; 0x54
 8007720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007722:	602f      	str	r7, [r5, #0]
 8007724:	2900      	cmp	r1, #0
 8007726:	d0ca      	beq.n	80076be <__sflush_r+0x1a>
 8007728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800772c:	4299      	cmp	r1, r3
 800772e:	d002      	beq.n	8007736 <__sflush_r+0x92>
 8007730:	4628      	mov	r0, r5
 8007732:	f000 f9d5 	bl	8007ae0 <_free_r>
 8007736:	2000      	movs	r0, #0
 8007738:	6360      	str	r0, [r4, #52]	; 0x34
 800773a:	e7c1      	b.n	80076c0 <__sflush_r+0x1c>
 800773c:	6a21      	ldr	r1, [r4, #32]
 800773e:	2301      	movs	r3, #1
 8007740:	4628      	mov	r0, r5
 8007742:	47b0      	blx	r6
 8007744:	1c41      	adds	r1, r0, #1
 8007746:	d1c7      	bne.n	80076d8 <__sflush_r+0x34>
 8007748:	682b      	ldr	r3, [r5, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0c4      	beq.n	80076d8 <__sflush_r+0x34>
 800774e:	2b1d      	cmp	r3, #29
 8007750:	d001      	beq.n	8007756 <__sflush_r+0xb2>
 8007752:	2b16      	cmp	r3, #22
 8007754:	d101      	bne.n	800775a <__sflush_r+0xb6>
 8007756:	602f      	str	r7, [r5, #0]
 8007758:	e7b1      	b.n	80076be <__sflush_r+0x1a>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	e7ad      	b.n	80076c0 <__sflush_r+0x1c>
 8007764:	690f      	ldr	r7, [r1, #16]
 8007766:	2f00      	cmp	r7, #0
 8007768:	d0a9      	beq.n	80076be <__sflush_r+0x1a>
 800776a:	0793      	lsls	r3, r2, #30
 800776c:	680e      	ldr	r6, [r1, #0]
 800776e:	bf08      	it	eq
 8007770:	694b      	ldreq	r3, [r1, #20]
 8007772:	600f      	str	r7, [r1, #0]
 8007774:	bf18      	it	ne
 8007776:	2300      	movne	r3, #0
 8007778:	eba6 0807 	sub.w	r8, r6, r7
 800777c:	608b      	str	r3, [r1, #8]
 800777e:	f1b8 0f00 	cmp.w	r8, #0
 8007782:	dd9c      	ble.n	80076be <__sflush_r+0x1a>
 8007784:	6a21      	ldr	r1, [r4, #32]
 8007786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007788:	4643      	mov	r3, r8
 800778a:	463a      	mov	r2, r7
 800778c:	4628      	mov	r0, r5
 800778e:	47b0      	blx	r6
 8007790:	2800      	cmp	r0, #0
 8007792:	dc06      	bgt.n	80077a2 <__sflush_r+0xfe>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	e78e      	b.n	80076c0 <__sflush_r+0x1c>
 80077a2:	4407      	add	r7, r0
 80077a4:	eba8 0800 	sub.w	r8, r8, r0
 80077a8:	e7e9      	b.n	800777e <__sflush_r+0xda>
 80077aa:	bf00      	nop
 80077ac:	20400001 	.word	0x20400001

080077b0 <_fflush_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	690b      	ldr	r3, [r1, #16]
 80077b4:	4605      	mov	r5, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	b913      	cbnz	r3, 80077c0 <_fflush_r+0x10>
 80077ba:	2500      	movs	r5, #0
 80077bc:	4628      	mov	r0, r5
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	b118      	cbz	r0, 80077ca <_fflush_r+0x1a>
 80077c2:	6983      	ldr	r3, [r0, #24]
 80077c4:	b90b      	cbnz	r3, 80077ca <_fflush_r+0x1a>
 80077c6:	f000 f887 	bl	80078d8 <__sinit>
 80077ca:	4b14      	ldr	r3, [pc, #80]	; (800781c <_fflush_r+0x6c>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d11b      	bne.n	8007808 <_fflush_r+0x58>
 80077d0:	686c      	ldr	r4, [r5, #4]
 80077d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ef      	beq.n	80077ba <_fflush_r+0xa>
 80077da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077dc:	07d0      	lsls	r0, r2, #31
 80077de:	d404      	bmi.n	80077ea <_fflush_r+0x3a>
 80077e0:	0599      	lsls	r1, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_fflush_r+0x3a>
 80077e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e6:	f000 f915 	bl	8007a14 <__retarget_lock_acquire_recursive>
 80077ea:	4628      	mov	r0, r5
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7ff ff59 	bl	80076a4 <__sflush_r>
 80077f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f4:	07da      	lsls	r2, r3, #31
 80077f6:	4605      	mov	r5, r0
 80077f8:	d4e0      	bmi.n	80077bc <_fflush_r+0xc>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	d4dd      	bmi.n	80077bc <_fflush_r+0xc>
 8007800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007802:	f000 f908 	bl	8007a16 <__retarget_lock_release_recursive>
 8007806:	e7d9      	b.n	80077bc <_fflush_r+0xc>
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <_fflush_r+0x70>)
 800780a:	429c      	cmp	r4, r3
 800780c:	d101      	bne.n	8007812 <_fflush_r+0x62>
 800780e:	68ac      	ldr	r4, [r5, #8]
 8007810:	e7df      	b.n	80077d2 <_fflush_r+0x22>
 8007812:	4b04      	ldr	r3, [pc, #16]	; (8007824 <_fflush_r+0x74>)
 8007814:	429c      	cmp	r4, r3
 8007816:	bf08      	it	eq
 8007818:	68ec      	ldreq	r4, [r5, #12]
 800781a:	e7da      	b.n	80077d2 <_fflush_r+0x22>
 800781c:	080089c8 	.word	0x080089c8
 8007820:	080089e8 	.word	0x080089e8
 8007824:	080089a8 	.word	0x080089a8

08007828 <std>:
 8007828:	2300      	movs	r3, #0
 800782a:	b510      	push	{r4, lr}
 800782c:	4604      	mov	r4, r0
 800782e:	e9c0 3300 	strd	r3, r3, [r0]
 8007832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007836:	6083      	str	r3, [r0, #8]
 8007838:	8181      	strh	r1, [r0, #12]
 800783a:	6643      	str	r3, [r0, #100]	; 0x64
 800783c:	81c2      	strh	r2, [r0, #14]
 800783e:	6183      	str	r3, [r0, #24]
 8007840:	4619      	mov	r1, r3
 8007842:	2208      	movs	r2, #8
 8007844:	305c      	adds	r0, #92	; 0x5c
 8007846:	f7ff fdb7 	bl	80073b8 <memset>
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <std+0x38>)
 800784c:	6263      	str	r3, [r4, #36]	; 0x24
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <std+0x3c>)
 8007850:	62a3      	str	r3, [r4, #40]	; 0x28
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x40>)
 8007854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x44>)
 8007858:	6224      	str	r4, [r4, #32]
 800785a:	6323      	str	r3, [r4, #48]	; 0x30
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	080084e9 	.word	0x080084e9
 8007864:	0800850b 	.word	0x0800850b
 8007868:	08008543 	.word	0x08008543
 800786c:	08008567 	.word	0x08008567

08007870 <_cleanup_r>:
 8007870:	4901      	ldr	r1, [pc, #4]	; (8007878 <_cleanup_r+0x8>)
 8007872:	f000 b8af 	b.w	80079d4 <_fwalk_reent>
 8007876:	bf00      	nop
 8007878:	080077b1 	.word	0x080077b1

0800787c <__sfmoreglue>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	1e4a      	subs	r2, r1, #1
 8007880:	2568      	movs	r5, #104	; 0x68
 8007882:	4355      	muls	r5, r2
 8007884:	460e      	mov	r6, r1
 8007886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800788a:	f000 f979 	bl	8007b80 <_malloc_r>
 800788e:	4604      	mov	r4, r0
 8007890:	b140      	cbz	r0, 80078a4 <__sfmoreglue+0x28>
 8007892:	2100      	movs	r1, #0
 8007894:	e9c0 1600 	strd	r1, r6, [r0]
 8007898:	300c      	adds	r0, #12
 800789a:	60a0      	str	r0, [r4, #8]
 800789c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a0:	f7ff fd8a 	bl	80073b8 <memset>
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}

080078a8 <__sfp_lock_acquire>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_acquire+0x8>)
 80078aa:	f000 b8b3 	b.w	8007a14 <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20004314 	.word	0x20004314

080078b4 <__sfp_lock_release>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_release+0x8>)
 80078b6:	f000 b8ae 	b.w	8007a16 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20004314 	.word	0x20004314

080078c0 <__sinit_lock_acquire>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sinit_lock_acquire+0x8>)
 80078c2:	f000 b8a7 	b.w	8007a14 <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	2000430f 	.word	0x2000430f

080078cc <__sinit_lock_release>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sinit_lock_release+0x8>)
 80078ce:	f000 b8a2 	b.w	8007a16 <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	2000430f 	.word	0x2000430f

080078d8 <__sinit>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	f7ff fff0 	bl	80078c0 <__sinit_lock_acquire>
 80078e0:	69a3      	ldr	r3, [r4, #24]
 80078e2:	b11b      	cbz	r3, 80078ec <__sinit+0x14>
 80078e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e8:	f7ff bff0 	b.w	80078cc <__sinit_lock_release>
 80078ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f0:	6523      	str	r3, [r4, #80]	; 0x50
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <__sinit+0x68>)
 80078f4:	4a13      	ldr	r2, [pc, #76]	; (8007944 <__sinit+0x6c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	bf04      	itt	eq
 80078fe:	2301      	moveq	r3, #1
 8007900:	61a3      	streq	r3, [r4, #24]
 8007902:	4620      	mov	r0, r4
 8007904:	f000 f820 	bl	8007948 <__sfp>
 8007908:	6060      	str	r0, [r4, #4]
 800790a:	4620      	mov	r0, r4
 800790c:	f000 f81c 	bl	8007948 <__sfp>
 8007910:	60a0      	str	r0, [r4, #8]
 8007912:	4620      	mov	r0, r4
 8007914:	f000 f818 	bl	8007948 <__sfp>
 8007918:	2200      	movs	r2, #0
 800791a:	60e0      	str	r0, [r4, #12]
 800791c:	2104      	movs	r1, #4
 800791e:	6860      	ldr	r0, [r4, #4]
 8007920:	f7ff ff82 	bl	8007828 <std>
 8007924:	68a0      	ldr	r0, [r4, #8]
 8007926:	2201      	movs	r2, #1
 8007928:	2109      	movs	r1, #9
 800792a:	f7ff ff7d 	bl	8007828 <std>
 800792e:	68e0      	ldr	r0, [r4, #12]
 8007930:	2202      	movs	r2, #2
 8007932:	2112      	movs	r1, #18
 8007934:	f7ff ff78 	bl	8007828 <std>
 8007938:	2301      	movs	r3, #1
 800793a:	61a3      	str	r3, [r4, #24]
 800793c:	e7d2      	b.n	80078e4 <__sinit+0xc>
 800793e:	bf00      	nop
 8007940:	080089a4 	.word	0x080089a4
 8007944:	08007871 	.word	0x08007871

08007948 <__sfp>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	4607      	mov	r7, r0
 800794c:	f7ff ffac 	bl	80078a8 <__sfp_lock_acquire>
 8007950:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <__sfp+0x84>)
 8007952:	681e      	ldr	r6, [r3, #0]
 8007954:	69b3      	ldr	r3, [r6, #24]
 8007956:	b913      	cbnz	r3, 800795e <__sfp+0x16>
 8007958:	4630      	mov	r0, r6
 800795a:	f7ff ffbd 	bl	80078d8 <__sinit>
 800795e:	3648      	adds	r6, #72	; 0x48
 8007960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007964:	3b01      	subs	r3, #1
 8007966:	d503      	bpl.n	8007970 <__sfp+0x28>
 8007968:	6833      	ldr	r3, [r6, #0]
 800796a:	b30b      	cbz	r3, 80079b0 <__sfp+0x68>
 800796c:	6836      	ldr	r6, [r6, #0]
 800796e:	e7f7      	b.n	8007960 <__sfp+0x18>
 8007970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007974:	b9d5      	cbnz	r5, 80079ac <__sfp+0x64>
 8007976:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <__sfp+0x88>)
 8007978:	60e3      	str	r3, [r4, #12]
 800797a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800797e:	6665      	str	r5, [r4, #100]	; 0x64
 8007980:	f000 f847 	bl	8007a12 <__retarget_lock_init_recursive>
 8007984:	f7ff ff96 	bl	80078b4 <__sfp_lock_release>
 8007988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800798c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007990:	6025      	str	r5, [r4, #0]
 8007992:	61a5      	str	r5, [r4, #24]
 8007994:	2208      	movs	r2, #8
 8007996:	4629      	mov	r1, r5
 8007998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800799c:	f7ff fd0c 	bl	80073b8 <memset>
 80079a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079a8:	4620      	mov	r0, r4
 80079aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ac:	3468      	adds	r4, #104	; 0x68
 80079ae:	e7d9      	b.n	8007964 <__sfp+0x1c>
 80079b0:	2104      	movs	r1, #4
 80079b2:	4638      	mov	r0, r7
 80079b4:	f7ff ff62 	bl	800787c <__sfmoreglue>
 80079b8:	4604      	mov	r4, r0
 80079ba:	6030      	str	r0, [r6, #0]
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1d5      	bne.n	800796c <__sfp+0x24>
 80079c0:	f7ff ff78 	bl	80078b4 <__sfp_lock_release>
 80079c4:	230c      	movs	r3, #12
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	e7ee      	b.n	80079a8 <__sfp+0x60>
 80079ca:	bf00      	nop
 80079cc:	080089a4 	.word	0x080089a4
 80079d0:	ffff0001 	.word	0xffff0001

080079d4 <_fwalk_reent>:
 80079d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d8:	4606      	mov	r6, r0
 80079da:	4688      	mov	r8, r1
 80079dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e0:	2700      	movs	r7, #0
 80079e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079e6:	f1b9 0901 	subs.w	r9, r9, #1
 80079ea:	d505      	bpl.n	80079f8 <_fwalk_reent+0x24>
 80079ec:	6824      	ldr	r4, [r4, #0]
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	d1f7      	bne.n	80079e2 <_fwalk_reent+0xe>
 80079f2:	4638      	mov	r0, r7
 80079f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f8:	89ab      	ldrh	r3, [r5, #12]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d907      	bls.n	8007a0e <_fwalk_reent+0x3a>
 80079fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a02:	3301      	adds	r3, #1
 8007a04:	d003      	beq.n	8007a0e <_fwalk_reent+0x3a>
 8007a06:	4629      	mov	r1, r5
 8007a08:	4630      	mov	r0, r6
 8007a0a:	47c0      	blx	r8
 8007a0c:	4307      	orrs	r7, r0
 8007a0e:	3568      	adds	r5, #104	; 0x68
 8007a10:	e7e9      	b.n	80079e6 <_fwalk_reent+0x12>

08007a12 <__retarget_lock_init_recursive>:
 8007a12:	4770      	bx	lr

08007a14 <__retarget_lock_acquire_recursive>:
 8007a14:	4770      	bx	lr

08007a16 <__retarget_lock_release_recursive>:
 8007a16:	4770      	bx	lr

08007a18 <__swhatbuf_r>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	b096      	sub	sp, #88	; 0x58
 8007a24:	4614      	mov	r4, r2
 8007a26:	461d      	mov	r5, r3
 8007a28:	da07      	bge.n	8007a3a <__swhatbuf_r+0x22>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	602b      	str	r3, [r5, #0]
 8007a2e:	89b3      	ldrh	r3, [r6, #12]
 8007a30:	061a      	lsls	r2, r3, #24
 8007a32:	d410      	bmi.n	8007a56 <__swhatbuf_r+0x3e>
 8007a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a38:	e00e      	b.n	8007a58 <__swhatbuf_r+0x40>
 8007a3a:	466a      	mov	r2, sp
 8007a3c:	f000 fdba 	bl	80085b4 <_fstat_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	dbf2      	blt.n	8007a2a <__swhatbuf_r+0x12>
 8007a44:	9a01      	ldr	r2, [sp, #4]
 8007a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a4e:	425a      	negs	r2, r3
 8007a50:	415a      	adcs	r2, r3
 8007a52:	602a      	str	r2, [r5, #0]
 8007a54:	e7ee      	b.n	8007a34 <__swhatbuf_r+0x1c>
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	2000      	movs	r0, #0
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	b016      	add	sp, #88	; 0x58
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}

08007a60 <__smakebuf_r>:
 8007a60:	898b      	ldrh	r3, [r1, #12]
 8007a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a64:	079d      	lsls	r5, r3, #30
 8007a66:	4606      	mov	r6, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	d507      	bpl.n	8007a7c <__smakebuf_r+0x1c>
 8007a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	2301      	movs	r3, #1
 8007a76:	6163      	str	r3, [r4, #20]
 8007a78:	b002      	add	sp, #8
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	ab01      	add	r3, sp, #4
 8007a7e:	466a      	mov	r2, sp
 8007a80:	f7ff ffca 	bl	8007a18 <__swhatbuf_r>
 8007a84:	9900      	ldr	r1, [sp, #0]
 8007a86:	4605      	mov	r5, r0
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 f879 	bl	8007b80 <_malloc_r>
 8007a8e:	b948      	cbnz	r0, 8007aa4 <__smakebuf_r+0x44>
 8007a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a94:	059a      	lsls	r2, r3, #22
 8007a96:	d4ef      	bmi.n	8007a78 <__smakebuf_r+0x18>
 8007a98:	f023 0303 	bic.w	r3, r3, #3
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	e7e3      	b.n	8007a6c <__smakebuf_r+0xc>
 8007aa4:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <__smakebuf_r+0x7c>)
 8007aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	6020      	str	r0, [r4, #0]
 8007aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	6163      	str	r3, [r4, #20]
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	6120      	str	r0, [r4, #16]
 8007aba:	b15b      	cbz	r3, 8007ad4 <__smakebuf_r+0x74>
 8007abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 fd89 	bl	80085d8 <_isatty_r>
 8007ac6:	b128      	cbz	r0, 8007ad4 <__smakebuf_r+0x74>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	89a0      	ldrh	r0, [r4, #12]
 8007ad6:	4305      	orrs	r5, r0
 8007ad8:	81a5      	strh	r5, [r4, #12]
 8007ada:	e7cd      	b.n	8007a78 <__smakebuf_r+0x18>
 8007adc:	08007871 	.word	0x08007871

08007ae0 <_free_r>:
 8007ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	d048      	beq.n	8007b78 <_free_r+0x98>
 8007ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aea:	9001      	str	r0, [sp, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f1a1 0404 	sub.w	r4, r1, #4
 8007af2:	bfb8      	it	lt
 8007af4:	18e4      	addlt	r4, r4, r3
 8007af6:	f000 fdb9 	bl	800866c <__malloc_lock>
 8007afa:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <_free_r+0x9c>)
 8007afc:	9801      	ldr	r0, [sp, #4]
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	4615      	mov	r5, r2
 8007b02:	b933      	cbnz	r3, 8007b12 <_free_r+0x32>
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6014      	str	r4, [r2, #0]
 8007b08:	b003      	add	sp, #12
 8007b0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b0e:	f000 bdb3 	b.w	8008678 <__malloc_unlock>
 8007b12:	42a3      	cmp	r3, r4
 8007b14:	d90b      	bls.n	8007b2e <_free_r+0x4e>
 8007b16:	6821      	ldr	r1, [r4, #0]
 8007b18:	1862      	adds	r2, r4, r1
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bf04      	itt	eq
 8007b1e:	681a      	ldreq	r2, [r3, #0]
 8007b20:	685b      	ldreq	r3, [r3, #4]
 8007b22:	6063      	str	r3, [r4, #4]
 8007b24:	bf04      	itt	eq
 8007b26:	1852      	addeq	r2, r2, r1
 8007b28:	6022      	streq	r2, [r4, #0]
 8007b2a:	602c      	str	r4, [r5, #0]
 8007b2c:	e7ec      	b.n	8007b08 <_free_r+0x28>
 8007b2e:	461a      	mov	r2, r3
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	b10b      	cbz	r3, 8007b38 <_free_r+0x58>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d9fa      	bls.n	8007b2e <_free_r+0x4e>
 8007b38:	6811      	ldr	r1, [r2, #0]
 8007b3a:	1855      	adds	r5, r2, r1
 8007b3c:	42a5      	cmp	r5, r4
 8007b3e:	d10b      	bne.n	8007b58 <_free_r+0x78>
 8007b40:	6824      	ldr	r4, [r4, #0]
 8007b42:	4421      	add	r1, r4
 8007b44:	1854      	adds	r4, r2, r1
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6011      	str	r1, [r2, #0]
 8007b4a:	d1dd      	bne.n	8007b08 <_free_r+0x28>
 8007b4c:	681c      	ldr	r4, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	6053      	str	r3, [r2, #4]
 8007b52:	4421      	add	r1, r4
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	e7d7      	b.n	8007b08 <_free_r+0x28>
 8007b58:	d902      	bls.n	8007b60 <_free_r+0x80>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	e7d3      	b.n	8007b08 <_free_r+0x28>
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	428b      	cmp	r3, r1
 8007b66:	bf04      	itt	eq
 8007b68:	6819      	ldreq	r1, [r3, #0]
 8007b6a:	685b      	ldreq	r3, [r3, #4]
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	bf04      	itt	eq
 8007b70:	1949      	addeq	r1, r1, r5
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	6054      	str	r4, [r2, #4]
 8007b76:	e7c7      	b.n	8007b08 <_free_r+0x28>
 8007b78:	b003      	add	sp, #12
 8007b7a:	bd30      	pop	{r4, r5, pc}
 8007b7c:	2000012c 	.word	0x2000012c

08007b80 <_malloc_r>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	1ccd      	adds	r5, r1, #3
 8007b84:	f025 0503 	bic.w	r5, r5, #3
 8007b88:	3508      	adds	r5, #8
 8007b8a:	2d0c      	cmp	r5, #12
 8007b8c:	bf38      	it	cc
 8007b8e:	250c      	movcc	r5, #12
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	4606      	mov	r6, r0
 8007b94:	db01      	blt.n	8007b9a <_malloc_r+0x1a>
 8007b96:	42a9      	cmp	r1, r5
 8007b98:	d903      	bls.n	8007ba2 <_malloc_r+0x22>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba2:	f000 fd63 	bl	800866c <__malloc_lock>
 8007ba6:	4921      	ldr	r1, [pc, #132]	; (8007c2c <_malloc_r+0xac>)
 8007ba8:	680a      	ldr	r2, [r1, #0]
 8007baa:	4614      	mov	r4, r2
 8007bac:	b99c      	cbnz	r4, 8007bd6 <_malloc_r+0x56>
 8007bae:	4f20      	ldr	r7, [pc, #128]	; (8007c30 <_malloc_r+0xb0>)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	b923      	cbnz	r3, 8007bbe <_malloc_r+0x3e>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f000 fc86 	bl	80084c8 <_sbrk_r>
 8007bbc:	6038      	str	r0, [r7, #0]
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 fc81 	bl	80084c8 <_sbrk_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d123      	bne.n	8007c12 <_malloc_r+0x92>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	6033      	str	r3, [r6, #0]
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f000 fd52 	bl	8008678 <__malloc_unlock>
 8007bd4:	e7e3      	b.n	8007b9e <_malloc_r+0x1e>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	1b5b      	subs	r3, r3, r5
 8007bda:	d417      	bmi.n	8007c0c <_malloc_r+0x8c>
 8007bdc:	2b0b      	cmp	r3, #11
 8007bde:	d903      	bls.n	8007be8 <_malloc_r+0x68>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	441c      	add	r4, r3
 8007be4:	6025      	str	r5, [r4, #0]
 8007be6:	e004      	b.n	8007bf2 <_malloc_r+0x72>
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	42a2      	cmp	r2, r4
 8007bec:	bf0c      	ite	eq
 8007bee:	600b      	streq	r3, [r1, #0]
 8007bf0:	6053      	strne	r3, [r2, #4]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f000 fd40 	bl	8008678 <__malloc_unlock>
 8007bf8:	f104 000b 	add.w	r0, r4, #11
 8007bfc:	1d23      	adds	r3, r4, #4
 8007bfe:	f020 0007 	bic.w	r0, r0, #7
 8007c02:	1ac2      	subs	r2, r0, r3
 8007c04:	d0cc      	beq.n	8007ba0 <_malloc_r+0x20>
 8007c06:	1a1b      	subs	r3, r3, r0
 8007c08:	50a3      	str	r3, [r4, r2]
 8007c0a:	e7c9      	b.n	8007ba0 <_malloc_r+0x20>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	6864      	ldr	r4, [r4, #4]
 8007c10:	e7cc      	b.n	8007bac <_malloc_r+0x2c>
 8007c12:	1cc4      	adds	r4, r0, #3
 8007c14:	f024 0403 	bic.w	r4, r4, #3
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d0e3      	beq.n	8007be4 <_malloc_r+0x64>
 8007c1c:	1a21      	subs	r1, r4, r0
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f000 fc52 	bl	80084c8 <_sbrk_r>
 8007c24:	3001      	adds	r0, #1
 8007c26:	d1dd      	bne.n	8007be4 <_malloc_r+0x64>
 8007c28:	e7cf      	b.n	8007bca <_malloc_r+0x4a>
 8007c2a:	bf00      	nop
 8007c2c:	2000012c 	.word	0x2000012c
 8007c30:	20000130 	.word	0x20000130

08007c34 <__ssputs_r>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	688e      	ldr	r6, [r1, #8]
 8007c3a:	429e      	cmp	r6, r3
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	460c      	mov	r4, r1
 8007c40:	4690      	mov	r8, r2
 8007c42:	461f      	mov	r7, r3
 8007c44:	d838      	bhi.n	8007cb8 <__ssputs_r+0x84>
 8007c46:	898a      	ldrh	r2, [r1, #12]
 8007c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c4c:	d032      	beq.n	8007cb4 <__ssputs_r+0x80>
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	6909      	ldr	r1, [r1, #16]
 8007c52:	eba5 0901 	sub.w	r9, r5, r1
 8007c56:	6965      	ldr	r5, [r4, #20]
 8007c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c60:	3301      	adds	r3, #1
 8007c62:	444b      	add	r3, r9
 8007c64:	106d      	asrs	r5, r5, #1
 8007c66:	429d      	cmp	r5, r3
 8007c68:	bf38      	it	cc
 8007c6a:	461d      	movcc	r5, r3
 8007c6c:	0553      	lsls	r3, r2, #21
 8007c6e:	d531      	bpl.n	8007cd4 <__ssputs_r+0xa0>
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7ff ff85 	bl	8007b80 <_malloc_r>
 8007c76:	4606      	mov	r6, r0
 8007c78:	b950      	cbnz	r0, 8007c90 <__ssputs_r+0x5c>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	f8ca 3000 	str.w	r3, [sl]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c90:	6921      	ldr	r1, [r4, #16]
 8007c92:	464a      	mov	r2, r9
 8007c94:	f000 fcc2 	bl	800861c <memcpy>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	6126      	str	r6, [r4, #16]
 8007ca6:	6165      	str	r5, [r4, #20]
 8007ca8:	444e      	add	r6, r9
 8007caa:	eba5 0509 	sub.w	r5, r5, r9
 8007cae:	6026      	str	r6, [r4, #0]
 8007cb0:	60a5      	str	r5, [r4, #8]
 8007cb2:	463e      	mov	r6, r7
 8007cb4:	42be      	cmp	r6, r7
 8007cb6:	d900      	bls.n	8007cba <__ssputs_r+0x86>
 8007cb8:	463e      	mov	r6, r7
 8007cba:	4632      	mov	r2, r6
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4641      	mov	r1, r8
 8007cc0:	f000 fcba 	bl	8008638 <memmove>
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	1b9b      	subs	r3, r3, r6
 8007cca:	4432      	add	r2, r6
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7db      	b.n	8007c8c <__ssputs_r+0x58>
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	f000 fcd5 	bl	8008684 <_realloc_r>
 8007cda:	4606      	mov	r6, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1e1      	bne.n	8007ca4 <__ssputs_r+0x70>
 8007ce0:	6921      	ldr	r1, [r4, #16]
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	f7ff fefc 	bl	8007ae0 <_free_r>
 8007ce8:	e7c7      	b.n	8007c7a <__ssputs_r+0x46>
	...

08007cec <_svfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	061b      	lsls	r3, r3, #24
 8007cf6:	b09d      	sub	sp, #116	; 0x74
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	460d      	mov	r5, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	d50e      	bpl.n	8007d1e <_svfiprintf_r+0x32>
 8007d00:	690b      	ldr	r3, [r1, #16]
 8007d02:	b963      	cbnz	r3, 8007d1e <_svfiprintf_r+0x32>
 8007d04:	2140      	movs	r1, #64	; 0x40
 8007d06:	f7ff ff3b 	bl	8007b80 <_malloc_r>
 8007d0a:	6028      	str	r0, [r5, #0]
 8007d0c:	6128      	str	r0, [r5, #16]
 8007d0e:	b920      	cbnz	r0, 8007d1a <_svfiprintf_r+0x2e>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	e0d1      	b.n	8007ebe <_svfiprintf_r+0x1d2>
 8007d1a:	2340      	movs	r3, #64	; 0x40
 8007d1c:	616b      	str	r3, [r5, #20]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9309      	str	r3, [sp, #36]	; 0x24
 8007d22:	2320      	movs	r3, #32
 8007d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2c:	2330      	movs	r3, #48	; 0x30
 8007d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ed8 <_svfiprintf_r+0x1ec>
 8007d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d36:	f04f 0901 	mov.w	r9, #1
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d42:	b10a      	cbz	r2, 8007d48 <_svfiprintf_r+0x5c>
 8007d44:	2a25      	cmp	r2, #37	; 0x25
 8007d46:	d1f9      	bne.n	8007d3c <_svfiprintf_r+0x50>
 8007d48:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4c:	d00b      	beq.n	8007d66 <_svfiprintf_r+0x7a>
 8007d4e:	465b      	mov	r3, fp
 8007d50:	4622      	mov	r2, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff ff6d 	bl	8007c34 <__ssputs_r>
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f000 80aa 	beq.w	8007eb4 <_svfiprintf_r+0x1c8>
 8007d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d62:	445a      	add	r2, fp
 8007d64:	9209      	str	r2, [sp, #36]	; 0x24
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80a2 	beq.w	8007eb4 <_svfiprintf_r+0x1c8>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7a:	f10a 0a01 	add.w	sl, sl, #1
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9307      	str	r3, [sp, #28]
 8007d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d86:	931a      	str	r3, [sp, #104]	; 0x68
 8007d88:	4654      	mov	r4, sl
 8007d8a:	2205      	movs	r2, #5
 8007d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d90:	4851      	ldr	r0, [pc, #324]	; (8007ed8 <_svfiprintf_r+0x1ec>)
 8007d92:	f7f8 fa35 	bl	8000200 <memchr>
 8007d96:	9a04      	ldr	r2, [sp, #16]
 8007d98:	b9d8      	cbnz	r0, 8007dd2 <_svfiprintf_r+0xe6>
 8007d9a:	06d0      	lsls	r0, r2, #27
 8007d9c:	bf44      	itt	mi
 8007d9e:	2320      	movmi	r3, #32
 8007da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da4:	0711      	lsls	r1, r2, #28
 8007da6:	bf44      	itt	mi
 8007da8:	232b      	movmi	r3, #43	; 0x2b
 8007daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dae:	f89a 3000 	ldrb.w	r3, [sl]
 8007db2:	2b2a      	cmp	r3, #42	; 0x2a
 8007db4:	d015      	beq.n	8007de2 <_svfiprintf_r+0xf6>
 8007db6:	9a07      	ldr	r2, [sp, #28]
 8007db8:	4654      	mov	r4, sl
 8007dba:	2000      	movs	r0, #0
 8007dbc:	f04f 0c0a 	mov.w	ip, #10
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc6:	3b30      	subs	r3, #48	; 0x30
 8007dc8:	2b09      	cmp	r3, #9
 8007dca:	d94e      	bls.n	8007e6a <_svfiprintf_r+0x17e>
 8007dcc:	b1b0      	cbz	r0, 8007dfc <_svfiprintf_r+0x110>
 8007dce:	9207      	str	r2, [sp, #28]
 8007dd0:	e014      	b.n	8007dfc <_svfiprintf_r+0x110>
 8007dd2:	eba0 0308 	sub.w	r3, r0, r8
 8007dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	46a2      	mov	sl, r4
 8007de0:	e7d2      	b.n	8007d88 <_svfiprintf_r+0x9c>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	1d19      	adds	r1, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9103      	str	r1, [sp, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bfbb      	ittet	lt
 8007dee:	425b      	neglt	r3, r3
 8007df0:	f042 0202 	orrlt.w	r2, r2, #2
 8007df4:	9307      	strge	r3, [sp, #28]
 8007df6:	9307      	strlt	r3, [sp, #28]
 8007df8:	bfb8      	it	lt
 8007dfa:	9204      	strlt	r2, [sp, #16]
 8007dfc:	7823      	ldrb	r3, [r4, #0]
 8007dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8007e00:	d10c      	bne.n	8007e1c <_svfiprintf_r+0x130>
 8007e02:	7863      	ldrb	r3, [r4, #1]
 8007e04:	2b2a      	cmp	r3, #42	; 0x2a
 8007e06:	d135      	bne.n	8007e74 <_svfiprintf_r+0x188>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9203      	str	r2, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfb8      	it	lt
 8007e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e18:	3402      	adds	r4, #2
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ee8 <_svfiprintf_r+0x1fc>
 8007e20:	7821      	ldrb	r1, [r4, #0]
 8007e22:	2203      	movs	r2, #3
 8007e24:	4650      	mov	r0, sl
 8007e26:	f7f8 f9eb 	bl	8000200 <memchr>
 8007e2a:	b140      	cbz	r0, 8007e3e <_svfiprintf_r+0x152>
 8007e2c:	2340      	movs	r3, #64	; 0x40
 8007e2e:	eba0 000a 	sub.w	r0, r0, sl
 8007e32:	fa03 f000 	lsl.w	r0, r3, r0
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	4303      	orrs	r3, r0
 8007e3a:	3401      	adds	r4, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	4826      	ldr	r0, [pc, #152]	; (8007edc <_svfiprintf_r+0x1f0>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e48:	2206      	movs	r2, #6
 8007e4a:	f7f8 f9d9 	bl	8000200 <memchr>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d038      	beq.n	8007ec4 <_svfiprintf_r+0x1d8>
 8007e52:	4b23      	ldr	r3, [pc, #140]	; (8007ee0 <_svfiprintf_r+0x1f4>)
 8007e54:	bb1b      	cbnz	r3, 8007e9e <_svfiprintf_r+0x1b2>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	3308      	adds	r3, #8
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	4433      	add	r3, r6
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	e767      	b.n	8007d3a <_svfiprintf_r+0x4e>
 8007e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2001      	movs	r0, #1
 8007e72:	e7a5      	b.n	8007dc0 <_svfiprintf_r+0xd4>
 8007e74:	2300      	movs	r3, #0
 8007e76:	3401      	adds	r4, #1
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f04f 0c0a 	mov.w	ip, #10
 8007e80:	4620      	mov	r0, r4
 8007e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e86:	3a30      	subs	r2, #48	; 0x30
 8007e88:	2a09      	cmp	r2, #9
 8007e8a:	d903      	bls.n	8007e94 <_svfiprintf_r+0x1a8>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c5      	beq.n	8007e1c <_svfiprintf_r+0x130>
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	e7c3      	b.n	8007e1c <_svfiprintf_r+0x130>
 8007e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e98:	4604      	mov	r4, r0
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7f0      	b.n	8007e80 <_svfiprintf_r+0x194>
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <_svfiprintf_r+0x1f8>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f3af 8000 	nop.w
 8007eae:	1c42      	adds	r2, r0, #1
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	d1d6      	bne.n	8007e62 <_svfiprintf_r+0x176>
 8007eb4:	89ab      	ldrh	r3, [r5, #12]
 8007eb6:	065b      	lsls	r3, r3, #25
 8007eb8:	f53f af2c 	bmi.w	8007d14 <_svfiprintf_r+0x28>
 8007ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ebe:	b01d      	add	sp, #116	; 0x74
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <_svfiprintf_r+0x1f8>)
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f000 f9d4 	bl	800827c <_printf_i>
 8007ed4:	e7eb      	b.n	8007eae <_svfiprintf_r+0x1c2>
 8007ed6:	bf00      	nop
 8007ed8:	08008a08 	.word	0x08008a08
 8007edc:	08008a12 	.word	0x08008a12
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	08007c35 	.word	0x08007c35
 8007ee8:	08008a0e 	.word	0x08008a0e

08007eec <__sfputc_r>:
 8007eec:	6893      	ldr	r3, [r2, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	b410      	push	{r4}
 8007ef4:	6093      	str	r3, [r2, #8]
 8007ef6:	da08      	bge.n	8007f0a <__sfputc_r+0x1e>
 8007ef8:	6994      	ldr	r4, [r2, #24]
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	db01      	blt.n	8007f02 <__sfputc_r+0x16>
 8007efe:	290a      	cmp	r1, #10
 8007f00:	d103      	bne.n	8007f0a <__sfputc_r+0x1e>
 8007f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f06:	f7ff bb0d 	b.w	8007524 <__swbuf_r>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	1c58      	adds	r0, r3, #1
 8007f0e:	6010      	str	r0, [r2, #0]
 8007f10:	7019      	strb	r1, [r3, #0]
 8007f12:	4608      	mov	r0, r1
 8007f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <__sfputs_r>:
 8007f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	460f      	mov	r7, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	18d5      	adds	r5, r2, r3
 8007f24:	42ac      	cmp	r4, r5
 8007f26:	d101      	bne.n	8007f2c <__sfputs_r+0x12>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e007      	b.n	8007f3c <__sfputs_r+0x22>
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	463a      	mov	r2, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff ffda 	bl	8007eec <__sfputc_r>
 8007f38:	1c43      	adds	r3, r0, #1
 8007f3a:	d1f3      	bne.n	8007f24 <__sfputs_r+0xa>
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f40 <_vfiprintf_r>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	460d      	mov	r5, r1
 8007f46:	b09d      	sub	sp, #116	; 0x74
 8007f48:	4614      	mov	r4, r2
 8007f4a:	4698      	mov	r8, r3
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	b118      	cbz	r0, 8007f58 <_vfiprintf_r+0x18>
 8007f50:	6983      	ldr	r3, [r0, #24]
 8007f52:	b90b      	cbnz	r3, 8007f58 <_vfiprintf_r+0x18>
 8007f54:	f7ff fcc0 	bl	80078d8 <__sinit>
 8007f58:	4b89      	ldr	r3, [pc, #548]	; (8008180 <_vfiprintf_r+0x240>)
 8007f5a:	429d      	cmp	r5, r3
 8007f5c:	d11b      	bne.n	8007f96 <_vfiprintf_r+0x56>
 8007f5e:	6875      	ldr	r5, [r6, #4]
 8007f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f62:	07d9      	lsls	r1, r3, #31
 8007f64:	d405      	bmi.n	8007f72 <_vfiprintf_r+0x32>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	059a      	lsls	r2, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_vfiprintf_r+0x32>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f6e:	f7ff fd51 	bl	8007a14 <__retarget_lock_acquire_recursive>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	071b      	lsls	r3, r3, #28
 8007f76:	d501      	bpl.n	8007f7c <_vfiprintf_r+0x3c>
 8007f78:	692b      	ldr	r3, [r5, #16]
 8007f7a:	b9eb      	cbnz	r3, 8007fb8 <_vfiprintf_r+0x78>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff fb22 	bl	80075c8 <__swsetup_r>
 8007f84:	b1c0      	cbz	r0, 8007fb8 <_vfiprintf_r+0x78>
 8007f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f88:	07dc      	lsls	r4, r3, #31
 8007f8a:	d50e      	bpl.n	8007faa <_vfiprintf_r+0x6a>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	b01d      	add	sp, #116	; 0x74
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	4b7b      	ldr	r3, [pc, #492]	; (8008184 <_vfiprintf_r+0x244>)
 8007f98:	429d      	cmp	r5, r3
 8007f9a:	d101      	bne.n	8007fa0 <_vfiprintf_r+0x60>
 8007f9c:	68b5      	ldr	r5, [r6, #8]
 8007f9e:	e7df      	b.n	8007f60 <_vfiprintf_r+0x20>
 8007fa0:	4b79      	ldr	r3, [pc, #484]	; (8008188 <_vfiprintf_r+0x248>)
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	bf08      	it	eq
 8007fa6:	68f5      	ldreq	r5, [r6, #12]
 8007fa8:	e7da      	b.n	8007f60 <_vfiprintf_r+0x20>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	0598      	lsls	r0, r3, #22
 8007fae:	d4ed      	bmi.n	8007f8c <_vfiprintf_r+0x4c>
 8007fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb2:	f7ff fd30 	bl	8007a16 <__retarget_lock_release_recursive>
 8007fb6:	e7e9      	b.n	8007f8c <_vfiprintf_r+0x4c>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9309      	str	r3, [sp, #36]	; 0x24
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc6:	2330      	movs	r3, #48	; 0x30
 8007fc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800818c <_vfiprintf_r+0x24c>
 8007fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fd0:	f04f 0901 	mov.w	r9, #1
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	469a      	mov	sl, r3
 8007fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fdc:	b10a      	cbz	r2, 8007fe2 <_vfiprintf_r+0xa2>
 8007fde:	2a25      	cmp	r2, #37	; 0x25
 8007fe0:	d1f9      	bne.n	8007fd6 <_vfiprintf_r+0x96>
 8007fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe6:	d00b      	beq.n	8008000 <_vfiprintf_r+0xc0>
 8007fe8:	465b      	mov	r3, fp
 8007fea:	4622      	mov	r2, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff ff93 	bl	8007f1a <__sfputs_r>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f000 80aa 	beq.w	800814e <_vfiprintf_r+0x20e>
 8007ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ffc:	445a      	add	r2, fp
 8007ffe:	9209      	str	r2, [sp, #36]	; 0x24
 8008000:	f89a 3000 	ldrb.w	r3, [sl]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 80a2 	beq.w	800814e <_vfiprintf_r+0x20e>
 800800a:	2300      	movs	r3, #0
 800800c:	f04f 32ff 	mov.w	r2, #4294967295
 8008010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008014:	f10a 0a01 	add.w	sl, sl, #1
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	9307      	str	r3, [sp, #28]
 800801c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008020:	931a      	str	r3, [sp, #104]	; 0x68
 8008022:	4654      	mov	r4, sl
 8008024:	2205      	movs	r2, #5
 8008026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802a:	4858      	ldr	r0, [pc, #352]	; (800818c <_vfiprintf_r+0x24c>)
 800802c:	f7f8 f8e8 	bl	8000200 <memchr>
 8008030:	9a04      	ldr	r2, [sp, #16]
 8008032:	b9d8      	cbnz	r0, 800806c <_vfiprintf_r+0x12c>
 8008034:	06d1      	lsls	r1, r2, #27
 8008036:	bf44      	itt	mi
 8008038:	2320      	movmi	r3, #32
 800803a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800803e:	0713      	lsls	r3, r2, #28
 8008040:	bf44      	itt	mi
 8008042:	232b      	movmi	r3, #43	; 0x2b
 8008044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008048:	f89a 3000 	ldrb.w	r3, [sl]
 800804c:	2b2a      	cmp	r3, #42	; 0x2a
 800804e:	d015      	beq.n	800807c <_vfiprintf_r+0x13c>
 8008050:	9a07      	ldr	r2, [sp, #28]
 8008052:	4654      	mov	r4, sl
 8008054:	2000      	movs	r0, #0
 8008056:	f04f 0c0a 	mov.w	ip, #10
 800805a:	4621      	mov	r1, r4
 800805c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008060:	3b30      	subs	r3, #48	; 0x30
 8008062:	2b09      	cmp	r3, #9
 8008064:	d94e      	bls.n	8008104 <_vfiprintf_r+0x1c4>
 8008066:	b1b0      	cbz	r0, 8008096 <_vfiprintf_r+0x156>
 8008068:	9207      	str	r2, [sp, #28]
 800806a:	e014      	b.n	8008096 <_vfiprintf_r+0x156>
 800806c:	eba0 0308 	sub.w	r3, r0, r8
 8008070:	fa09 f303 	lsl.w	r3, r9, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	46a2      	mov	sl, r4
 800807a:	e7d2      	b.n	8008022 <_vfiprintf_r+0xe2>
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	1d19      	adds	r1, r3, #4
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	9103      	str	r1, [sp, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	bfbb      	ittet	lt
 8008088:	425b      	neglt	r3, r3
 800808a:	f042 0202 	orrlt.w	r2, r2, #2
 800808e:	9307      	strge	r3, [sp, #28]
 8008090:	9307      	strlt	r3, [sp, #28]
 8008092:	bfb8      	it	lt
 8008094:	9204      	strlt	r2, [sp, #16]
 8008096:	7823      	ldrb	r3, [r4, #0]
 8008098:	2b2e      	cmp	r3, #46	; 0x2e
 800809a:	d10c      	bne.n	80080b6 <_vfiprintf_r+0x176>
 800809c:	7863      	ldrb	r3, [r4, #1]
 800809e:	2b2a      	cmp	r3, #42	; 0x2a
 80080a0:	d135      	bne.n	800810e <_vfiprintf_r+0x1ce>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	1d1a      	adds	r2, r3, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	9203      	str	r2, [sp, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	bfb8      	it	lt
 80080ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b2:	3402      	adds	r4, #2
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800819c <_vfiprintf_r+0x25c>
 80080ba:	7821      	ldrb	r1, [r4, #0]
 80080bc:	2203      	movs	r2, #3
 80080be:	4650      	mov	r0, sl
 80080c0:	f7f8 f89e 	bl	8000200 <memchr>
 80080c4:	b140      	cbz	r0, 80080d8 <_vfiprintf_r+0x198>
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	eba0 000a 	sub.w	r0, r0, sl
 80080cc:	fa03 f000 	lsl.w	r0, r3, r0
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	4303      	orrs	r3, r0
 80080d4:	3401      	adds	r4, #1
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080dc:	482c      	ldr	r0, [pc, #176]	; (8008190 <_vfiprintf_r+0x250>)
 80080de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e2:	2206      	movs	r2, #6
 80080e4:	f7f8 f88c 	bl	8000200 <memchr>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d03f      	beq.n	800816c <_vfiprintf_r+0x22c>
 80080ec:	4b29      	ldr	r3, [pc, #164]	; (8008194 <_vfiprintf_r+0x254>)
 80080ee:	bb1b      	cbnz	r3, 8008138 <_vfiprintf_r+0x1f8>
 80080f0:	9b03      	ldr	r3, [sp, #12]
 80080f2:	3307      	adds	r3, #7
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	3308      	adds	r3, #8
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fe:	443b      	add	r3, r7
 8008100:	9309      	str	r3, [sp, #36]	; 0x24
 8008102:	e767      	b.n	8007fd4 <_vfiprintf_r+0x94>
 8008104:	fb0c 3202 	mla	r2, ip, r2, r3
 8008108:	460c      	mov	r4, r1
 800810a:	2001      	movs	r0, #1
 800810c:	e7a5      	b.n	800805a <_vfiprintf_r+0x11a>
 800810e:	2300      	movs	r3, #0
 8008110:	3401      	adds	r4, #1
 8008112:	9305      	str	r3, [sp, #20]
 8008114:	4619      	mov	r1, r3
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4620      	mov	r0, r4
 800811c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008120:	3a30      	subs	r2, #48	; 0x30
 8008122:	2a09      	cmp	r2, #9
 8008124:	d903      	bls.n	800812e <_vfiprintf_r+0x1ee>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0c5      	beq.n	80080b6 <_vfiprintf_r+0x176>
 800812a:	9105      	str	r1, [sp, #20]
 800812c:	e7c3      	b.n	80080b6 <_vfiprintf_r+0x176>
 800812e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008132:	4604      	mov	r4, r0
 8008134:	2301      	movs	r3, #1
 8008136:	e7f0      	b.n	800811a <_vfiprintf_r+0x1da>
 8008138:	ab03      	add	r3, sp, #12
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	462a      	mov	r2, r5
 800813e:	4b16      	ldr	r3, [pc, #88]	; (8008198 <_vfiprintf_r+0x258>)
 8008140:	a904      	add	r1, sp, #16
 8008142:	4630      	mov	r0, r6
 8008144:	f3af 8000 	nop.w
 8008148:	4607      	mov	r7, r0
 800814a:	1c78      	adds	r0, r7, #1
 800814c:	d1d6      	bne.n	80080fc <_vfiprintf_r+0x1bc>
 800814e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008150:	07d9      	lsls	r1, r3, #31
 8008152:	d405      	bmi.n	8008160 <_vfiprintf_r+0x220>
 8008154:	89ab      	ldrh	r3, [r5, #12]
 8008156:	059a      	lsls	r2, r3, #22
 8008158:	d402      	bmi.n	8008160 <_vfiprintf_r+0x220>
 800815a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800815c:	f7ff fc5b 	bl	8007a16 <__retarget_lock_release_recursive>
 8008160:	89ab      	ldrh	r3, [r5, #12]
 8008162:	065b      	lsls	r3, r3, #25
 8008164:	f53f af12 	bmi.w	8007f8c <_vfiprintf_r+0x4c>
 8008168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816a:	e711      	b.n	8007f90 <_vfiprintf_r+0x50>
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <_vfiprintf_r+0x258>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4630      	mov	r0, r6
 8008178:	f000 f880 	bl	800827c <_printf_i>
 800817c:	e7e4      	b.n	8008148 <_vfiprintf_r+0x208>
 800817e:	bf00      	nop
 8008180:	080089c8 	.word	0x080089c8
 8008184:	080089e8 	.word	0x080089e8
 8008188:	080089a8 	.word	0x080089a8
 800818c:	08008a08 	.word	0x08008a08
 8008190:	08008a12 	.word	0x08008a12
 8008194:	00000000 	.word	0x00000000
 8008198:	08007f1b 	.word	0x08007f1b
 800819c:	08008a0e 	.word	0x08008a0e

080081a0 <_printf_common>:
 80081a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	4616      	mov	r6, r2
 80081a6:	4699      	mov	r9, r3
 80081a8:	688a      	ldr	r2, [r1, #8]
 80081aa:	690b      	ldr	r3, [r1, #16]
 80081ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	bfb8      	it	lt
 80081b4:	4613      	movlt	r3, r2
 80081b6:	6033      	str	r3, [r6, #0]
 80081b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081bc:	4607      	mov	r7, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	b10a      	cbz	r2, 80081c6 <_printf_common+0x26>
 80081c2:	3301      	adds	r3, #1
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	0699      	lsls	r1, r3, #26
 80081ca:	bf42      	ittt	mi
 80081cc:	6833      	ldrmi	r3, [r6, #0]
 80081ce:	3302      	addmi	r3, #2
 80081d0:	6033      	strmi	r3, [r6, #0]
 80081d2:	6825      	ldr	r5, [r4, #0]
 80081d4:	f015 0506 	ands.w	r5, r5, #6
 80081d8:	d106      	bne.n	80081e8 <_printf_common+0x48>
 80081da:	f104 0a19 	add.w	sl, r4, #25
 80081de:	68e3      	ldr	r3, [r4, #12]
 80081e0:	6832      	ldr	r2, [r6, #0]
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	42ab      	cmp	r3, r5
 80081e6:	dc26      	bgt.n	8008236 <_printf_common+0x96>
 80081e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081ec:	1e13      	subs	r3, r2, #0
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	bf18      	it	ne
 80081f2:	2301      	movne	r3, #1
 80081f4:	0692      	lsls	r2, r2, #26
 80081f6:	d42b      	bmi.n	8008250 <_printf_common+0xb0>
 80081f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081fc:	4649      	mov	r1, r9
 80081fe:	4638      	mov	r0, r7
 8008200:	47c0      	blx	r8
 8008202:	3001      	adds	r0, #1
 8008204:	d01e      	beq.n	8008244 <_printf_common+0xa4>
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	68e5      	ldr	r5, [r4, #12]
 800820a:	6832      	ldr	r2, [r6, #0]
 800820c:	f003 0306 	and.w	r3, r3, #6
 8008210:	2b04      	cmp	r3, #4
 8008212:	bf08      	it	eq
 8008214:	1aad      	subeq	r5, r5, r2
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	bf0c      	ite	eq
 800821c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008220:	2500      	movne	r5, #0
 8008222:	4293      	cmp	r3, r2
 8008224:	bfc4      	itt	gt
 8008226:	1a9b      	subgt	r3, r3, r2
 8008228:	18ed      	addgt	r5, r5, r3
 800822a:	2600      	movs	r6, #0
 800822c:	341a      	adds	r4, #26
 800822e:	42b5      	cmp	r5, r6
 8008230:	d11a      	bne.n	8008268 <_printf_common+0xc8>
 8008232:	2000      	movs	r0, #0
 8008234:	e008      	b.n	8008248 <_printf_common+0xa8>
 8008236:	2301      	movs	r3, #1
 8008238:	4652      	mov	r2, sl
 800823a:	4649      	mov	r1, r9
 800823c:	4638      	mov	r0, r7
 800823e:	47c0      	blx	r8
 8008240:	3001      	adds	r0, #1
 8008242:	d103      	bne.n	800824c <_printf_common+0xac>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824c:	3501      	adds	r5, #1
 800824e:	e7c6      	b.n	80081de <_printf_common+0x3e>
 8008250:	18e1      	adds	r1, r4, r3
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	2030      	movs	r0, #48	; 0x30
 8008256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800825a:	4422      	add	r2, r4
 800825c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008264:	3302      	adds	r3, #2
 8008266:	e7c7      	b.n	80081f8 <_printf_common+0x58>
 8008268:	2301      	movs	r3, #1
 800826a:	4622      	mov	r2, r4
 800826c:	4649      	mov	r1, r9
 800826e:	4638      	mov	r0, r7
 8008270:	47c0      	blx	r8
 8008272:	3001      	adds	r0, #1
 8008274:	d0e6      	beq.n	8008244 <_printf_common+0xa4>
 8008276:	3601      	adds	r6, #1
 8008278:	e7d9      	b.n	800822e <_printf_common+0x8e>
	...

0800827c <_printf_i>:
 800827c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	4691      	mov	r9, r2
 8008284:	7e27      	ldrb	r7, [r4, #24]
 8008286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008288:	2f78      	cmp	r7, #120	; 0x78
 800828a:	4680      	mov	r8, r0
 800828c:	469a      	mov	sl, r3
 800828e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008292:	d807      	bhi.n	80082a4 <_printf_i+0x28>
 8008294:	2f62      	cmp	r7, #98	; 0x62
 8008296:	d80a      	bhi.n	80082ae <_printf_i+0x32>
 8008298:	2f00      	cmp	r7, #0
 800829a:	f000 80d8 	beq.w	800844e <_printf_i+0x1d2>
 800829e:	2f58      	cmp	r7, #88	; 0x58
 80082a0:	f000 80a3 	beq.w	80083ea <_printf_i+0x16e>
 80082a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082ac:	e03a      	b.n	8008324 <_printf_i+0xa8>
 80082ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082b2:	2b15      	cmp	r3, #21
 80082b4:	d8f6      	bhi.n	80082a4 <_printf_i+0x28>
 80082b6:	a001      	add	r0, pc, #4	; (adr r0, 80082bc <_printf_i+0x40>)
 80082b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082bc:	08008315 	.word	0x08008315
 80082c0:	08008329 	.word	0x08008329
 80082c4:	080082a5 	.word	0x080082a5
 80082c8:	080082a5 	.word	0x080082a5
 80082cc:	080082a5 	.word	0x080082a5
 80082d0:	080082a5 	.word	0x080082a5
 80082d4:	08008329 	.word	0x08008329
 80082d8:	080082a5 	.word	0x080082a5
 80082dc:	080082a5 	.word	0x080082a5
 80082e0:	080082a5 	.word	0x080082a5
 80082e4:	080082a5 	.word	0x080082a5
 80082e8:	08008435 	.word	0x08008435
 80082ec:	08008359 	.word	0x08008359
 80082f0:	08008417 	.word	0x08008417
 80082f4:	080082a5 	.word	0x080082a5
 80082f8:	080082a5 	.word	0x080082a5
 80082fc:	08008457 	.word	0x08008457
 8008300:	080082a5 	.word	0x080082a5
 8008304:	08008359 	.word	0x08008359
 8008308:	080082a5 	.word	0x080082a5
 800830c:	080082a5 	.word	0x080082a5
 8008310:	0800841f 	.word	0x0800841f
 8008314:	680b      	ldr	r3, [r1, #0]
 8008316:	1d1a      	adds	r2, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	600a      	str	r2, [r1, #0]
 800831c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008324:	2301      	movs	r3, #1
 8008326:	e0a3      	b.n	8008470 <_printf_i+0x1f4>
 8008328:	6825      	ldr	r5, [r4, #0]
 800832a:	6808      	ldr	r0, [r1, #0]
 800832c:	062e      	lsls	r6, r5, #24
 800832e:	f100 0304 	add.w	r3, r0, #4
 8008332:	d50a      	bpl.n	800834a <_printf_i+0xce>
 8008334:	6805      	ldr	r5, [r0, #0]
 8008336:	600b      	str	r3, [r1, #0]
 8008338:	2d00      	cmp	r5, #0
 800833a:	da03      	bge.n	8008344 <_printf_i+0xc8>
 800833c:	232d      	movs	r3, #45	; 0x2d
 800833e:	426d      	negs	r5, r5
 8008340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008344:	485e      	ldr	r0, [pc, #376]	; (80084c0 <_printf_i+0x244>)
 8008346:	230a      	movs	r3, #10
 8008348:	e019      	b.n	800837e <_printf_i+0x102>
 800834a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800834e:	6805      	ldr	r5, [r0, #0]
 8008350:	600b      	str	r3, [r1, #0]
 8008352:	bf18      	it	ne
 8008354:	b22d      	sxthne	r5, r5
 8008356:	e7ef      	b.n	8008338 <_printf_i+0xbc>
 8008358:	680b      	ldr	r3, [r1, #0]
 800835a:	6825      	ldr	r5, [r4, #0]
 800835c:	1d18      	adds	r0, r3, #4
 800835e:	6008      	str	r0, [r1, #0]
 8008360:	0628      	lsls	r0, r5, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xec>
 8008364:	681d      	ldr	r5, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0xf2>
 8008368:	0669      	lsls	r1, r5, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xe8>
 800836c:	881d      	ldrh	r5, [r3, #0]
 800836e:	4854      	ldr	r0, [pc, #336]	; (80084c0 <_printf_i+0x244>)
 8008370:	2f6f      	cmp	r7, #111	; 0x6f
 8008372:	bf0c      	ite	eq
 8008374:	2308      	moveq	r3, #8
 8008376:	230a      	movne	r3, #10
 8008378:	2100      	movs	r1, #0
 800837a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837e:	6866      	ldr	r6, [r4, #4]
 8008380:	60a6      	str	r6, [r4, #8]
 8008382:	2e00      	cmp	r6, #0
 8008384:	bfa2      	ittt	ge
 8008386:	6821      	ldrge	r1, [r4, #0]
 8008388:	f021 0104 	bicge.w	r1, r1, #4
 800838c:	6021      	strge	r1, [r4, #0]
 800838e:	b90d      	cbnz	r5, 8008394 <_printf_i+0x118>
 8008390:	2e00      	cmp	r6, #0
 8008392:	d04d      	beq.n	8008430 <_printf_i+0x1b4>
 8008394:	4616      	mov	r6, r2
 8008396:	fbb5 f1f3 	udiv	r1, r5, r3
 800839a:	fb03 5711 	mls	r7, r3, r1, r5
 800839e:	5dc7      	ldrb	r7, [r0, r7]
 80083a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a4:	462f      	mov	r7, r5
 80083a6:	42bb      	cmp	r3, r7
 80083a8:	460d      	mov	r5, r1
 80083aa:	d9f4      	bls.n	8008396 <_printf_i+0x11a>
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10b      	bne.n	80083c8 <_printf_i+0x14c>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07df      	lsls	r7, r3, #31
 80083b4:	d508      	bpl.n	80083c8 <_printf_i+0x14c>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	4299      	cmp	r1, r3
 80083bc:	bfde      	ittt	le
 80083be:	2330      	movle	r3, #48	; 0x30
 80083c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c8:	1b92      	subs	r2, r2, r6
 80083ca:	6122      	str	r2, [r4, #16]
 80083cc:	f8cd a000 	str.w	sl, [sp]
 80083d0:	464b      	mov	r3, r9
 80083d2:	aa03      	add	r2, sp, #12
 80083d4:	4621      	mov	r1, r4
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff fee2 	bl	80081a0 <_printf_common>
 80083dc:	3001      	adds	r0, #1
 80083de:	d14c      	bne.n	800847a <_printf_i+0x1fe>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	b004      	add	sp, #16
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	4835      	ldr	r0, [pc, #212]	; (80084c0 <_printf_i+0x244>)
 80083ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	680e      	ldr	r6, [r1, #0]
 80083f4:	061f      	lsls	r7, r3, #24
 80083f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80083fa:	600e      	str	r6, [r1, #0]
 80083fc:	d514      	bpl.n	8008428 <_printf_i+0x1ac>
 80083fe:	07d9      	lsls	r1, r3, #31
 8008400:	bf44      	itt	mi
 8008402:	f043 0320 	orrmi.w	r3, r3, #32
 8008406:	6023      	strmi	r3, [r4, #0]
 8008408:	b91d      	cbnz	r5, 8008412 <_printf_i+0x196>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f023 0320 	bic.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2310      	movs	r3, #16
 8008414:	e7b0      	b.n	8008378 <_printf_i+0xfc>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f043 0320 	orr.w	r3, r3, #32
 800841c:	6023      	str	r3, [r4, #0]
 800841e:	2378      	movs	r3, #120	; 0x78
 8008420:	4828      	ldr	r0, [pc, #160]	; (80084c4 <_printf_i+0x248>)
 8008422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008426:	e7e3      	b.n	80083f0 <_printf_i+0x174>
 8008428:	065e      	lsls	r6, r3, #25
 800842a:	bf48      	it	mi
 800842c:	b2ad      	uxthmi	r5, r5
 800842e:	e7e6      	b.n	80083fe <_printf_i+0x182>
 8008430:	4616      	mov	r6, r2
 8008432:	e7bb      	b.n	80083ac <_printf_i+0x130>
 8008434:	680b      	ldr	r3, [r1, #0]
 8008436:	6826      	ldr	r6, [r4, #0]
 8008438:	6960      	ldr	r0, [r4, #20]
 800843a:	1d1d      	adds	r5, r3, #4
 800843c:	600d      	str	r5, [r1, #0]
 800843e:	0635      	lsls	r5, r6, #24
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	d501      	bpl.n	8008448 <_printf_i+0x1cc>
 8008444:	6018      	str	r0, [r3, #0]
 8008446:	e002      	b.n	800844e <_printf_i+0x1d2>
 8008448:	0671      	lsls	r1, r6, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0x1c8>
 800844c:	8018      	strh	r0, [r3, #0]
 800844e:	2300      	movs	r3, #0
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	4616      	mov	r6, r2
 8008454:	e7ba      	b.n	80083cc <_printf_i+0x150>
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	1d1a      	adds	r2, r3, #4
 800845a:	600a      	str	r2, [r1, #0]
 800845c:	681e      	ldr	r6, [r3, #0]
 800845e:	6862      	ldr	r2, [r4, #4]
 8008460:	2100      	movs	r1, #0
 8008462:	4630      	mov	r0, r6
 8008464:	f7f7 fecc 	bl	8000200 <memchr>
 8008468:	b108      	cbz	r0, 800846e <_printf_i+0x1f2>
 800846a:	1b80      	subs	r0, r0, r6
 800846c:	6060      	str	r0, [r4, #4]
 800846e:	6863      	ldr	r3, [r4, #4]
 8008470:	6123      	str	r3, [r4, #16]
 8008472:	2300      	movs	r3, #0
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008478:	e7a8      	b.n	80083cc <_printf_i+0x150>
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	4632      	mov	r2, r6
 800847e:	4649      	mov	r1, r9
 8008480:	4640      	mov	r0, r8
 8008482:	47d0      	blx	sl
 8008484:	3001      	adds	r0, #1
 8008486:	d0ab      	beq.n	80083e0 <_printf_i+0x164>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	079b      	lsls	r3, r3, #30
 800848c:	d413      	bmi.n	80084b6 <_printf_i+0x23a>
 800848e:	68e0      	ldr	r0, [r4, #12]
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	4298      	cmp	r0, r3
 8008494:	bfb8      	it	lt
 8008496:	4618      	movlt	r0, r3
 8008498:	e7a4      	b.n	80083e4 <_printf_i+0x168>
 800849a:	2301      	movs	r3, #1
 800849c:	4632      	mov	r2, r6
 800849e:	4649      	mov	r1, r9
 80084a0:	4640      	mov	r0, r8
 80084a2:	47d0      	blx	sl
 80084a4:	3001      	adds	r0, #1
 80084a6:	d09b      	beq.n	80083e0 <_printf_i+0x164>
 80084a8:	3501      	adds	r5, #1
 80084aa:	68e3      	ldr	r3, [r4, #12]
 80084ac:	9903      	ldr	r1, [sp, #12]
 80084ae:	1a5b      	subs	r3, r3, r1
 80084b0:	42ab      	cmp	r3, r5
 80084b2:	dcf2      	bgt.n	800849a <_printf_i+0x21e>
 80084b4:	e7eb      	b.n	800848e <_printf_i+0x212>
 80084b6:	2500      	movs	r5, #0
 80084b8:	f104 0619 	add.w	r6, r4, #25
 80084bc:	e7f5      	b.n	80084aa <_printf_i+0x22e>
 80084be:	bf00      	nop
 80084c0:	08008a19 	.word	0x08008a19
 80084c4:	08008a2a 	.word	0x08008a2a

080084c8 <_sbrk_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d06      	ldr	r5, [pc, #24]	; (80084e4 <_sbrk_r+0x1c>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7f9 f8a4 	bl	8001620 <_sbrk>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_sbrk_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_sbrk_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20004318 	.word	0x20004318

080084e8 <__sread>:
 80084e8:	b510      	push	{r4, lr}
 80084ea:	460c      	mov	r4, r1
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	f000 f8ee 	bl	80086d0 <_read_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	bfab      	itete	ge
 80084f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084fa:	89a3      	ldrhlt	r3, [r4, #12]
 80084fc:	181b      	addge	r3, r3, r0
 80084fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008502:	bfac      	ite	ge
 8008504:	6563      	strge	r3, [r4, #84]	; 0x54
 8008506:	81a3      	strhlt	r3, [r4, #12]
 8008508:	bd10      	pop	{r4, pc}

0800850a <__swrite>:
 800850a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850e:	461f      	mov	r7, r3
 8008510:	898b      	ldrh	r3, [r1, #12]
 8008512:	05db      	lsls	r3, r3, #23
 8008514:	4605      	mov	r5, r0
 8008516:	460c      	mov	r4, r1
 8008518:	4616      	mov	r6, r2
 800851a:	d505      	bpl.n	8008528 <__swrite+0x1e>
 800851c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008520:	2302      	movs	r3, #2
 8008522:	2200      	movs	r2, #0
 8008524:	f000 f868 	bl	80085f8 <_lseek_r>
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800852e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008532:	81a3      	strh	r3, [r4, #12]
 8008534:	4632      	mov	r2, r6
 8008536:	463b      	mov	r3, r7
 8008538:	4628      	mov	r0, r5
 800853a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800853e:	f000 b817 	b.w	8008570 <_write_r>

08008542 <__sseek>:
 8008542:	b510      	push	{r4, lr}
 8008544:	460c      	mov	r4, r1
 8008546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854a:	f000 f855 	bl	80085f8 <_lseek_r>
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	bf15      	itete	ne
 8008554:	6560      	strne	r0, [r4, #84]	; 0x54
 8008556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800855a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800855e:	81a3      	strheq	r3, [r4, #12]
 8008560:	bf18      	it	ne
 8008562:	81a3      	strhne	r3, [r4, #12]
 8008564:	bd10      	pop	{r4, pc}

08008566 <__sclose>:
 8008566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800856a:	f000 b813 	b.w	8008594 <_close_r>
	...

08008570 <_write_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d07      	ldr	r5, [pc, #28]	; (8008590 <_write_r+0x20>)
 8008574:	4604      	mov	r4, r0
 8008576:	4608      	mov	r0, r1
 8008578:	4611      	mov	r1, r2
 800857a:	2200      	movs	r2, #0
 800857c:	602a      	str	r2, [r5, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	f7f8 fcc4 	bl	8000f0c <_write>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_write_r+0x1e>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_write_r+0x1e>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	20004318 	.word	0x20004318

08008594 <_close_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d06      	ldr	r5, [pc, #24]	; (80085b0 <_close_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7f9 f809 	bl	80015b6 <_close>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_close_r+0x1a>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_close_r+0x1a>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20004318 	.word	0x20004318

080085b4 <_fstat_r>:
 80085b4:	b538      	push	{r3, r4, r5, lr}
 80085b6:	4d07      	ldr	r5, [pc, #28]	; (80085d4 <_fstat_r+0x20>)
 80085b8:	2300      	movs	r3, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	f7f9 f804 	bl	80015ce <_fstat>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d102      	bne.n	80085d0 <_fstat_r+0x1c>
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	b103      	cbz	r3, 80085d0 <_fstat_r+0x1c>
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	bd38      	pop	{r3, r4, r5, pc}
 80085d2:	bf00      	nop
 80085d4:	20004318 	.word	0x20004318

080085d8 <_isatty_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d06      	ldr	r5, [pc, #24]	; (80085f4 <_isatty_r+0x1c>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7f9 f803 	bl	80015ee <_isatty>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_isatty_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_isatty_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20004318 	.word	0x20004318

080085f8 <_lseek_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d07      	ldr	r5, [pc, #28]	; (8008618 <_lseek_r+0x20>)
 80085fc:	4604      	mov	r4, r0
 80085fe:	4608      	mov	r0, r1
 8008600:	4611      	mov	r1, r2
 8008602:	2200      	movs	r2, #0
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f7f8 fffc 	bl	8001604 <_lseek>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_lseek_r+0x1e>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_lseek_r+0x1e>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	20004318 	.word	0x20004318

0800861c <memcpy>:
 800861c:	440a      	add	r2, r1
 800861e:	4291      	cmp	r1, r2
 8008620:	f100 33ff 	add.w	r3, r0, #4294967295
 8008624:	d100      	bne.n	8008628 <memcpy+0xc>
 8008626:	4770      	bx	lr
 8008628:	b510      	push	{r4, lr}
 800862a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800862e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008632:	4291      	cmp	r1, r2
 8008634:	d1f9      	bne.n	800862a <memcpy+0xe>
 8008636:	bd10      	pop	{r4, pc}

08008638 <memmove>:
 8008638:	4288      	cmp	r0, r1
 800863a:	b510      	push	{r4, lr}
 800863c:	eb01 0402 	add.w	r4, r1, r2
 8008640:	d902      	bls.n	8008648 <memmove+0x10>
 8008642:	4284      	cmp	r4, r0
 8008644:	4623      	mov	r3, r4
 8008646:	d807      	bhi.n	8008658 <memmove+0x20>
 8008648:	1e43      	subs	r3, r0, #1
 800864a:	42a1      	cmp	r1, r4
 800864c:	d008      	beq.n	8008660 <memmove+0x28>
 800864e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008656:	e7f8      	b.n	800864a <memmove+0x12>
 8008658:	4402      	add	r2, r0
 800865a:	4601      	mov	r1, r0
 800865c:	428a      	cmp	r2, r1
 800865e:	d100      	bne.n	8008662 <memmove+0x2a>
 8008660:	bd10      	pop	{r4, pc}
 8008662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800866a:	e7f7      	b.n	800865c <memmove+0x24>

0800866c <__malloc_lock>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__malloc_lock+0x8>)
 800866e:	f7ff b9d1 	b.w	8007a14 <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	20004310 	.word	0x20004310

08008678 <__malloc_unlock>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__malloc_unlock+0x8>)
 800867a:	f7ff b9cc 	b.w	8007a16 <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	20004310 	.word	0x20004310

08008684 <_realloc_r>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	4607      	mov	r7, r0
 8008688:	4614      	mov	r4, r2
 800868a:	460e      	mov	r6, r1
 800868c:	b921      	cbnz	r1, 8008698 <_realloc_r+0x14>
 800868e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008692:	4611      	mov	r1, r2
 8008694:	f7ff ba74 	b.w	8007b80 <_malloc_r>
 8008698:	b922      	cbnz	r2, 80086a4 <_realloc_r+0x20>
 800869a:	f7ff fa21 	bl	8007ae0 <_free_r>
 800869e:	4625      	mov	r5, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a4:	f000 f826 	bl	80086f4 <_malloc_usable_size_r>
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d20f      	bcs.n	80086cc <_realloc_r+0x48>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7ff fa66 	bl	8007b80 <_malloc_r>
 80086b4:	4605      	mov	r5, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d0f2      	beq.n	80086a0 <_realloc_r+0x1c>
 80086ba:	4631      	mov	r1, r6
 80086bc:	4622      	mov	r2, r4
 80086be:	f7ff ffad 	bl	800861c <memcpy>
 80086c2:	4631      	mov	r1, r6
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7ff fa0b 	bl	8007ae0 <_free_r>
 80086ca:	e7e9      	b.n	80086a0 <_realloc_r+0x1c>
 80086cc:	4635      	mov	r5, r6
 80086ce:	e7e7      	b.n	80086a0 <_realloc_r+0x1c>

080086d0 <_read_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_read_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7f8 ff4c 	bl	800157c <_read>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_read_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_read_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20004318 	.word	0x20004318

080086f4 <_malloc_usable_size_r>:
 80086f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f8:	1f18      	subs	r0, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfbc      	itt	lt
 80086fe:	580b      	ldrlt	r3, [r1, r0]
 8008700:	18c0      	addlt	r0, r0, r3
 8008702:	4770      	bx	lr

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr
