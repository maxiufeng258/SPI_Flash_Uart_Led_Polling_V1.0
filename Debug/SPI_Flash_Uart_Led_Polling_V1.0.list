
SPI_Flash_Uart_Led_Polling_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ec  080082ec  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f4  080082f4  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f8  080082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080082fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          0000425c  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000431c  2000431c  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015709  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b8f  00000000  00000000  000357f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c20  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a98  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001175b  00000000  00000000  0005f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7063  00000000  00000000  00070ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147f26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f9c  00000000  00000000  00147f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007fb4 	.word	0x08007fb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	08007fb4 	.word	0x08007fb4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <ff_getCapacity>:
  * @param	*free_byte :[OUT] kByte of free Capacity
  * @param  *total_byte:[OUT] kByte of total Capacity
  * @retval DRESULT: Operation result
  */
FRESULT ff_getCapacity (const TCHAR* path, DWORD* free_byte, DWORD* total_byte)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	FRESULT fRes = FR_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DWORD fre_clust;
	DWORD sect_size = _MIN_SS;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
	double fre_sect, tot_sect, coef;
	FATFS *fs;

    fRes = f_getfree(path, &fre_clust, &fs);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f005 fe2a 	bl	80069f0 <f_getfree>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (fRes != FR_OK)
 8000da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <ff_getCapacity+0x3c>
    {
    	return fRes;
 8000daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dae:	e048      	b.n	8000e42 <ff_getCapacity+0xce>
    }

#if _MAX_SS != _MIN_SS
    sect_size = fs->ssize;
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	899b      	ldrh	r3, [r3, #12]
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

    /* Get total sectors and free sectors */
    tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	8952      	ldrh	r2, [r2, #10]
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fbad 	bl	8000524 <__aeabi_ui2d>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    fre_sect = fre_clust * fs->csize;
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	895b      	ldrh	r3, [r3, #10]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fba0 	bl	8000524 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    coef = ((double)sect_size)/(1024.0);
 8000dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dee:	f7ff fb99 	bl	8000524 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ff_getCapacity+0xd8>)
 8000df8:	f7ff fd38 	bl	800086c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	e9c7 2306 	strd	r2, r3, [r7, #24]

    *total_byte = tot_sect * coef;
 8000e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e0c:	f7ff fc04 	bl	8000618 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe10 	bl	8000a3c <__aeabi_d2uiz>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
    *free_byte  = fre_sect * coef;
 8000e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e2a:	f7ff fbf5 	bl	8000618 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe01 	bl	8000a3c <__aeabi_d2uiz>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	601a      	str	r2, [r3, #0]

    return FR_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40900000 	.word	0x40900000

08000e50 <ff_scanDisk>:
  *		// ff_scanDisk(path)
  * @param	*path  :[IN]  Start node to be scanned
  * @retval DRESULT: Operation result
  */
FRESULT ff_scanDisk (TCHAR* path)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    static FILINFO fno;


    res = f_opendir(&dir, path);                       	   /* Open the directory */
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fcf0 	bl	8006844 <f_opendir>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res == FR_OK) {
 8000e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d13e      	bne.n	8000ef0 <ff_scanDisk+0xa0>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4921      	ldr	r1, [pc, #132]	; (8000efc <ff_scanDisk+0xac>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f005 fd7c 	bl	8006976 <f_readdir>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d12c      	bne.n	8000ee6 <ff_scanDisk+0x96>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <ff_scanDisk+0xac>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d028      	beq.n	8000ee6 <ff_scanDisk+0x96>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <ff_scanDisk+0xac>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01b      	beq.n	8000ed8 <ff_scanDisk+0x88>
                i = strlen(path);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9a5 	bl	80001f0 <strlen>
 8000ea6:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", fno.fname);
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eac:	4413      	add	r3, r2
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eb0:	4914      	ldr	r1, [pc, #80]	; (8000f04 <ff_scanDisk+0xb4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 ff6e 	bl	8006d94 <siprintf>
                res = ff_scanDisk(path);                    /* Enter the directory */
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffc9 	bl	8000e50 <ff_scanDisk>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (res != FR_OK) break;
 8000ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <ff_scanDisk+0x94>
                path[i] = 0;
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ed0:	4413      	add	r3, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e7cc      	b.n	8000e72 <ff_scanDisk+0x22>
            } else {                                       /* It is a file. */
                printf("%s/%s\n", path, fno.fname);
 8000ed8:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <ff_scanDisk+0xb0>)
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ff_scanDisk+0xb8>)
 8000ede:	f005 fecb 	bl	8006c78 <iprintf>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000ee2:	e7c6      	b.n	8000e72 <ff_scanDisk+0x22>
                if (res != FR_OK) break;
 8000ee4:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fd1d 	bl	800692a <f_closedir>
    }

    return res;
 8000ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3740      	adds	r7, #64	; 0x40
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000dc 	.word	0x200000dc
 8000f00:	200000e5 	.word	0x200000e5
 8000f04:	08007fcc 	.word	0x08007fcc
 8000f08:	08007fd0 	.word	0x08007fd0

08000f0c <_write>:
FATFS fs;
FIL   fp;
DIR   dp;

int _write(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 100);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_write+0x24>)
 8000f22:	f002 fe80 	bl	8003c26 <HAL_UART_Transmit>
	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200021f0 	.word	0x200021f0

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	; 0x40
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 f8db 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f8dd 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f9a5 	bl	8001290 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000f46:	f000 f943 	bl	80011d0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 f977 	bl	800123c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f4e:	f003 f933 	bl	80041b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(2000);
 8000f52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f56:	f001 f93f 	bl	80021d8 <HAL_Delay>

  fres = f_mount(&fs, "0:", 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4952      	ldr	r1, [pc, #328]	; (80010a8 <main+0x174>)
 8000f5e:	4853      	ldr	r0, [pc, #332]	; (80010ac <main+0x178>)
 8000f60:	f005 f822 	bl	8005fa8 <f_mount>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <main+0x17c>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK)
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <main+0x17c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f040 808c 	bne.w	800108e <main+0x15a>
  {
	  printf("mount w25qxxx flash passed...\r\n");
 8000f76:	484f      	ldr	r0, [pc, #316]	; (80010b4 <main+0x180>)
 8000f78:	f005 ff04 	bl	8006d84 <puts>

	  //fres = f_opendir(&dp, "0:/dataInfo");

	  fres = f_open(&fp, "0:/dataInfo/info.txt", FA_OPEN_ALWAYS|FA_WRITE);
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	494e      	ldr	r1, [pc, #312]	; (80010b8 <main+0x184>)
 8000f80:	484e      	ldr	r0, [pc, #312]	; (80010bc <main+0x188>)
 8000f82:	f005 f857 	bl	8006034 <f_open>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <main+0x17c>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <main+0x17c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <main+0xba>
	  {
		  printf("open file ok...\r\n");
 8000f96:	484a      	ldr	r0, [pc, #296]	; (80010c0 <main+0x18c>)
 8000f98:	f005 fef4 	bl	8006d84 <puts>
		  static uint8_t buff[] = "1234567890\r\nabcdefghijklmnopqrstuvwxyz\r\n!@#$%^&*()...";
		  UINT bw[1];
		  fres = f_write(&fp, buff, sizeof(buff), bw);
 8000f9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fa0:	2236      	movs	r2, #54	; 0x36
 8000fa2:	4948      	ldr	r1, [pc, #288]	; (80010c4 <main+0x190>)
 8000fa4:	4845      	ldr	r0, [pc, #276]	; (80010bc <main+0x188>)
 8000fa6:	f005 fa11 	bl	80063cc <f_write>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <main+0x17c>)
 8000fb0:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK)
 8000fb2:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <main+0x17c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d115      	bne.n	8000fe6 <main+0xb2>
		  {
			  printf("write file passed...\r\n");
 8000fba:	4843      	ldr	r0, [pc, #268]	; (80010c8 <main+0x194>)
 8000fbc:	f005 fee2 	bl	8006d84 <puts>

			  fres = f_close(&fp);
 8000fc0:	483e      	ldr	r0, [pc, #248]	; (80010bc <main+0x188>)
 8000fc2:	f005 fc15 	bl	80067f0 <f_close>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <main+0x17c>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			  if (fres == FR_OK)
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <main+0x17c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <main+0xaa>
				  printf("close file passed...\r\n");
 8000fd6:	483d      	ldr	r0, [pc, #244]	; (80010cc <main+0x198>)
 8000fd8:	f005 fed4 	bl	8006d84 <puts>
 8000fdc:	e00a      	b.n	8000ff4 <main+0xc0>
			  else
				  printf("close file failed...\r\n");
 8000fde:	483c      	ldr	r0, [pc, #240]	; (80010d0 <main+0x19c>)
 8000fe0:	f005 fed0 	bl	8006d84 <puts>
 8000fe4:	e006      	b.n	8000ff4 <main+0xc0>

//			  f_closedir(&dp);
		  }
		  else
			  printf("write file failed...\r\n");
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <main+0x1a0>)
 8000fe8:	f005 fecc 	bl	8006d84 <puts>
 8000fec:	e002      	b.n	8000ff4 <main+0xc0>
	  }
	  else
		  printf("open file failed...\r\n");
 8000fee:	483a      	ldr	r0, [pc, #232]	; (80010d8 <main+0x1a4>)
 8000ff0:	f005 fec8 	bl	8006d84 <puts>


	  DWORD free_byte[1], total_byte[1];
	  fres = ff_getCapacity("0:", free_byte, total_byte);
 8000ff4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	482a      	ldr	r0, [pc, #168]	; (80010a8 <main+0x174>)
 8001000:	f7ff feb8 	bl	8000d74 <ff_getCapacity>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <main+0x17c>)
 800100a:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 800100c:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <main+0x17c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d127      	bne.n	8001064 <main+0x130>
	  {
		  printf("##################################\r\n");
 8001014:	4831      	ldr	r0, [pc, #196]	; (80010dc <main+0x1a8>)
 8001016:	f005 feb5 	bl	8006d84 <puts>
		  printf(" total capacity : %06u KiByte\r\n", total_byte[0]);
 800101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101c:	4619      	mov	r1, r3
 800101e:	4830      	ldr	r0, [pc, #192]	; (80010e0 <main+0x1ac>)
 8001020:	f005 fe2a 	bl	8006c78 <iprintf>
		  printf(" free  capacity : %06u KiByte\r\n",  free_byte[0]);
 8001024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001026:	4619      	mov	r1, r3
 8001028:	482e      	ldr	r0, [pc, #184]	; (80010e4 <main+0x1b0>)
 800102a:	f005 fe25 	bl	8006c78 <iprintf>
		  printf("##################################\r\n");
 800102e:	482b      	ldr	r0, [pc, #172]	; (80010dc <main+0x1a8>)
 8001030:	f005 fea8 	bl	8006d84 <puts>

		  TCHAR path[50] = "0:";
 8001034:	f643 2330 	movw	r3, #14896	; 0x3a30
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	222e      	movs	r2, #46	; 0x2e
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fe11 	bl	8006c68 <memset>
		  fres = ff_scanDisk(path);
 8001046:	463b      	mov	r3, r7
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff01 	bl	8000e50 <ff_scanDisk>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <main+0x17c>)
 8001054:	701a      	strb	r2, [r3, #0]
		  if (fres == FR_OK)
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <main+0x17c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <main+0x130>
			  printf("scan flash disk end...\r\n");
 800105e:	4822      	ldr	r0, [pc, #136]	; (80010e8 <main+0x1b4>)
 8001060:	f005 fe90 	bl	8006d84 <puts>
	  }

	  fres = f_mount(NULL, "0:", 1);
 8001064:	2201      	movs	r2, #1
 8001066:	4910      	ldr	r1, [pc, #64]	; (80010a8 <main+0x174>)
 8001068:	2000      	movs	r0, #0
 800106a:	f004 ff9d 	bl	8005fa8 <f_mount>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <main+0x17c>)
 8001074:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK)
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <main+0x17c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <main+0x152>
		  printf("unmount passed...\r\n");
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <main+0x1b8>)
 8001080:	f005 fe80 	bl	8006d84 <puts>
 8001084:	e006      	b.n	8001094 <main+0x160>
	  else {
		printf("unmount failed...\r\n");
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <main+0x1bc>)
 8001088:	f005 fe7c 	bl	8006d84 <puts>
 800108c:	e002      	b.n	8001094 <main+0x160>
	}
  }
  else
	  printf("mount w25qxxx flash failed...\r\n");
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <main+0x1c0>)
 8001090:	f005 fe78 	bl	8006d84 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <main+0x1c4>)
 800109a:	f001 fb6c 	bl	8002776 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800109e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a2:	f001 f899 	bl	80021d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_Blue_GPIO_Port, LD3_Blue_Pin);
 80010a6:	e7f5      	b.n	8001094 <main+0x160>
 80010a8:	08007fd8 	.word	0x08007fd8
 80010ac:	200011bc 	.word	0x200011bc
 80010b0:	20002264 	.word	0x20002264
 80010b4:	08007fdc 	.word	0x08007fdc
 80010b8:	08007ffc 	.word	0x08007ffc
 80010bc:	20000134 	.word	0x20000134
 80010c0:	08008014 	.word	0x08008014
 80010c4:	20000000 	.word	0x20000000
 80010c8:	08008028 	.word	0x08008028
 80010cc:	08008040 	.word	0x08008040
 80010d0:	08008058 	.word	0x08008058
 80010d4:	08008070 	.word	0x08008070
 80010d8:	08008088 	.word	0x08008088
 80010dc:	080080a0 	.word	0x080080a0
 80010e0:	080080c4 	.word	0x080080c4
 80010e4:	080080e4 	.word	0x080080e4
 80010e8:	08008104 	.word	0x08008104
 80010ec:	0800811c 	.word	0x0800811c
 80010f0:	08008130 	.word	0x08008130
 80010f4:	08008144 	.word	0x08008144
 80010f8:	40021c00 	.word	0x40021c00

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fdac 	bl	8006c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <SystemClock_Config+0xd0>)
 8001146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800116c:	2308      	movs	r3, #8
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001170:	23a8      	movs	r3, #168	; 0xa8
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fb13 	bl	80027ac <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f8e8 	bl	8001360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2105      	movs	r1, #5
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fd74 	bl	8002c9c <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ba:	f000 f8d1 	bl	8001360 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_SPI5_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <MX_SPI5_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_SPI5_Init+0x64>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_SPI5_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_SPI5_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_SPI5_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_SPI5_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_SPI5_Init+0x64>)
 80011fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001200:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_SPI5_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_SPI5_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_SPI5_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_SPI5_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_SPI5_Init+0x64>)
 800121c:	220a      	movs	r2, #10
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_SPI5_Init+0x64>)
 8001222:	f001 ff0b 	bl	800303c <HAL_SPI_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800122c:	f000 f898 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20001164 	.word	0x20001164
 8001238:	40015000 	.word	0x40015000

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART1_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001274:	f002 fc8a 	bl	8003b8c <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f86f 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200021f0 	.word	0x200021f0
 800128c:	40011000 	.word	0x40011000

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a29      	ldr	r2, [pc, #164]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a1b      	ldr	r2, [pc, #108]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_GPIO_Init+0xc4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <MX_GPIO_Init+0xc8>)
 8001300:	f001 fa20 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_GPIO_Init+0xcc>)
 800130c:	f001 fa1a 	bl	8002744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI5_CS_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin;
 8001310:	2340      	movs	r3, #64	; 0x40
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI5_CS_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0xc8>)
 8001328:	f001 f860 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Red_Pin LD2_Green_Pin LD3_Blue_Pin */
  GPIO_InitStruct.Pin = LD1_Red_Pin|LD2_Green_Pin|LD3_Blue_Pin;
 800132c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0xcc>)
 8001346:	f001 f851 	bl	80023ec <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40021400 	.word	0x40021400
 800135c:	40021c00 	.word	0x40021c00

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	e7fe      	b.n	8001368 <Error_Handler+0x8>
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_MspInit+0x4c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x4c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_SPI_MspInit+0x84>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12c      	bne.n	8001438 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_SPI_MspInit+0x88>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a17      	ldr	r2, [pc, #92]	; (8001444 <HAL_SPI_MspInit+0x88>)
 80013e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_SPI_MspInit+0x88>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_SPI_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_SPI_MspInit+0x88>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_SPI_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001416:	f44f 7360 	mov.w	r3, #896	; 0x380
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001428:	2305      	movs	r3, #5
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_SPI_MspInit+0x8c>)
 8001434:	f000 ffda 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40015000 	.word	0x40015000
 8001444:	40023800 	.word	0x40023800
 8001448:	40021400 	.word	0x40021400

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_UART_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_UART_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_UART_MspInit+0x88>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_UART_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_UART_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_UART_MspInit+0x8c>)
 80014c4:	f000 ff92 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 fe36 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	e00a      	b.n	8001558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001542:	f3af 8000 	nop.w
 8001546:	4601      	mov	r1, r0
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	60ba      	str	r2, [r7, #8]
 800154e:	b2ca      	uxtb	r2, r1
 8001550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf0      	blt.n	8001542 <_read+0x12>
	}

return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:
	}
	return len;
}

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001592:	605a      	str	r2, [r3, #4]
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
	return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	; (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f005 fb06 	bl	8006c14 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20030000 	.word	0x20030000
 8001634:	00000400 	.word	0x00000400
 8001638:	200000f4 	.word	0x200000f4
 800163c:	20004320 	.word	0x20004320

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <W25Qxxx_SPI>:
/** ############################################################################################
  * @brief spi transmit and receive
  * @retval return received data [Byte]
  */
static uint8_t W25Qxxx_SPI(uint8_t data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&hspi_flash, &data, &ret, 1, SPI_FLASH_TIMEOUT);
 800166e:	f107 020f 	add.w	r2, r7, #15
 8001672:	1df9      	adds	r1, r7, #7
 8001674:	f247 5330 	movw	r3, #30000	; 0x7530
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <W25Qxxx_SPI+0x28>)
 800167e:	f001 ffb3 	bl	80035e8 <HAL_SPI_TransmitReceive>
	return ret;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20001164 	.word	0x20001164

08001690 <W25Qxxx_Enable>:
  * 	Used before other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Enable(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <W25Qxxx_Enable+0x14>)
 800169a:	f001 f853 	bl	8002744 <HAL_GPIO_WritePin>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021400 	.word	0x40021400

080016a8 <W25Qxxx_Disable>:
  * 	Used after other operations
  * @param  none
  * @retval none
  */
static void W25Qxxx_Disable(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <W25Qxxx_Disable+0x14>)
 80016b2:	f001 f847 	bl	8002744 <HAL_GPIO_WritePin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021400 	.word	0x40021400

080016c0 <W25Qxxx_Power_Up>:


static void W25Qxxx_Power_Up(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 80016c4:	f7ff ffe4 	bl	8001690 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Device_ID);
 80016c8:	20ab      	movs	r0, #171	; 0xab
 80016ca:	f7ff ffcb 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff ffc8 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff ffc5 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ffc2 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_Device_ID = W25Qxxx_SPI(CMD_DUMMY);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffbf 	bl	8001664 <W25Qxxx_SPI>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <W25Qxxx_Power_Up+0x38>)
 80016ec:	701a      	strb	r2, [r3, #0]

	W25Qxxx_Disable();
 80016ee:	f7ff ffdb 	bl	80016a8 <W25Qxxx_Disable>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000227c 	.word	0x2000227c

080016fc <W25Qxxx_Read_Manu_Dev_ID>:

/** ############################################################################################
  * @brief get W25Qxxx Manufacturer + Device ID [16-bit]
  */
static void W25Qxxx_Read_Manu_Dev_ID(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	uint16_t Temp0 = 0, Temp1 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	2300      	movs	r3, #0
 8001708:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Enable();
 800170a:	f7ff ffc1 	bl	8001690 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Manufacture_ID);
 800170e:	2090      	movs	r0, #144	; 0x90
 8001710:	f7ff ffa8 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff ffa5 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ffa2 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff ff9f 	bl	8001664 <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff ff9c 	bl	8001664 <W25Qxxx_SPI>
 800172c:	4603      	mov	r3, r0
 800172e:	80fb      	strh	r3, [r7, #6]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ff97 	bl	8001664 <W25Qxxx_SPI>
 8001736:	4603      	mov	r3, r0
 8001738:	80bb      	strh	r3, [r7, #4]

	W25Qxxx_Disable();
 800173a:	f7ff ffb5 	bl	80016a8 <W25Qxxx_Disable>
	W25Qxxx_Manufacturer_Device_ID = (Temp0 << 8) | Temp1;
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001748:	4313      	orrs	r3, r2
 800174a:	b21b      	sxth	r3, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <W25Qxxx_Read_Manu_Dev_ID+0x60>)
 8001750:	801a      	strh	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20002290 	.word	0x20002290

08001760 <W25Qxxx_Read_JEDEC_ID>:

/** ############################################################################################
  * @brief get W25Qxxx JEDEC ID [24-bit]
  */
static void W25Qxxx_Read_JEDEC_ID(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
	uint32_t JEDEC_ID = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]

	W25Qxxx_Enable();
 8001776:	f7ff ff8b 	bl	8001690 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_JEDEC_ID);
 800177a:	209f      	movs	r0, #159	; 0x9f
 800177c:	f7ff ff72 	bl	8001664 <W25Qxxx_SPI>
	Temp0 = W25Qxxx_SPI(CMD_DUMMY);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ff6f 	bl	8001664 <W25Qxxx_SPI>
 8001786:	4603      	mov	r3, r0
 8001788:	60bb      	str	r3, [r7, #8]
	Temp1 = W25Qxxx_SPI(CMD_DUMMY);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff ff6a 	bl	8001664 <W25Qxxx_SPI>
 8001790:	4603      	mov	r3, r0
 8001792:	607b      	str	r3, [r7, #4]
	Temp2 = W25Qxxx_SPI(CMD_DUMMY);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ff65 	bl	8001664 <W25Qxxx_SPI>
 800179a:	4603      	mov	r3, r0
 800179c:	603b      	str	r3, [r7, #0]

	W25Qxxx_Disable();
 800179e:	f7ff ff83 	bl	80016a8 <W25Qxxx_Disable>
	JEDEC_ID = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	4313      	orrs	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
	W25Qxxx_JEDEC_ID = JEDEC_ID;
 80017b2:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <W25Qxxx_Read_JEDEC_ID+0x60>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20002270 	.word	0x20002270

080017c4 <W25Qxxx_Read_Unique_ID>:

/** ############################################################################################
  * @brief  get W25Qxxx Unique ID [64-bit 8Byte-array]
  */
static void W25Qxxx_Read_Unique_ID(void)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 80017ca:	f7ff ff61 	bl	8001690 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Unique_ID);
 80017ce:	204b      	movs	r0, #75	; 0x4b
 80017d0:	f7ff ff48 	bl	8001664 <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	e005      	b.n	80017e6 <W25Qxxx_Read_Unique_ID+0x22>
		W25Qxxx_SPI(CMD_DUMMY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff ff42 	bl	8001664 <W25Qxxx_SPI>
	for (uint8_t i = 0; i < 4; i++)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	3301      	adds	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d9f6      	bls.n	80017da <W25Qxxx_Read_Unique_ID+0x16>
	for (uint8_t i = 0; i < 8; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	71bb      	strb	r3, [r7, #6]
 80017f0:	e00a      	b.n	8001808 <W25Qxxx_Read_Unique_ID+0x44>
		W25Qxxx_UniqID[i] = W25Qxxx_SPI(CMD_DUMMY);
 80017f2:	79bc      	ldrb	r4, [r7, #6]
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff35 	bl	8001664 <W25Qxxx_SPI>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <W25Qxxx_Read_Unique_ID+0x58>)
 8001800:	551a      	strb	r2, [r3, r4]
	for (uint8_t i = 0; i < 8; i++)
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	3301      	adds	r3, #1
 8001806:	71bb      	strb	r3, [r7, #6]
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	2b07      	cmp	r3, #7
 800180c:	d9f1      	bls.n	80017f2 <W25Qxxx_Read_Unique_ID+0x2e>

	W25Qxxx_Disable();
 800180e:	f7ff ff4b 	bl	80016a8 <W25Qxxx_Disable>
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	20002274 	.word	0x20002274

08001820 <W25Qxxx_Write_Enable>:
	instruction is entered by driving /CS low, shifting the instruction code “06h” into the Data Input (DI) pin on
	the rising edge of CLK, and then driving /CS high.
  * @param  none
  */
static void W25Qxxx_Write_Enable(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 8001824:	f7ff ff34 	bl	8001690 <W25Qxxx_Enable>

	W25Qxxx_SPI(CMD_Write_Enable);
 8001828:	2006      	movs	r0, #6
 800182a:	f7ff ff1b 	bl	8001664 <W25Qxxx_SPI>

	W25Qxxx_Disable();
 800182e:	f7ff ff3b 	bl	80016a8 <W25Qxxx_Disable>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}

08001836 <W25Qxxx_WaitForWriteEnd>:
/** ############################################################################################
  * @brief detect SR1-bit0 BUSY bit
  *
  */
static int8_t W25Qxxx_WaitForWriteEnd(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
	W25Qxxx_Enable();
 800183c:	f7ff ff28 	bl	8001690 <W25Qxxx_Enable>

	uint32_t sTime = HAL_GetTick();
 8001840:	f000 fcbe 	bl	80021c0 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]
	uint32_t useTime = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
	uint8_t reg_res;
	W25Qxxx_SPI(CMD_Reg_1_Read);
 800184a:	2005      	movs	r0, #5
 800184c:	f7ff ff0a 	bl	8001664 <W25Qxxx_SPI>
	do
	{
		reg_res = W25Qxxx_SPI(CMD_DUMMY);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff07 	bl	8001664 <W25Qxxx_SPI>
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]

		useTime = HAL_GetTick() - sTime;
 800185a:	f000 fcb1 	bl	80021c0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	60bb      	str	r3, [r7, #8]
	} while (((reg_res & SR1_S0_BUSY) == SR1_S0_BUSY) && (useTime < SPI_FLASH_TIMEOUT));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <W25Qxxx_WaitForWriteEnd+0x44>
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f247 522f 	movw	r2, #29999	; 0x752f
 8001876:	4293      	cmp	r3, r2
 8001878:	d9ea      	bls.n	8001850 <W25Qxxx_WaitForWriteEnd+0x1a>

	W25Qxxx_Disable();
 800187a:	f7ff ff15 	bl	80016a8 <W25Qxxx_Disable>

	if (useTime >= SPI_FLASH_TIMEOUT)	// timeOut return 1
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f247 522f 	movw	r2, #29999	; 0x752f
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <W25Qxxx_WaitForWriteEnd+0x56>
		return 1;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <W25Qxxx_WaitForWriteEnd+0x58>
	return 0;	// passed return 0
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <W25Qxxx_SectorToPage>:
/** ############################################################################################
  * @brief  sector convert to pageAddr
  * @retval return pageAddr
  */
static uint32_t W25Qxxx_SectorToPage(uint32_t SectorAddress)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <W25Qxxx_SectorToPage+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <W25Qxxx_SectorToPage+0x2c>)
 80018ac:	8812      	ldrh	r2, [r2, #0]
 80018ae:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20002294 	.word	0x20002294
 80018c4:	20002268 	.word	0x20002268

080018c8 <W25Qxxx_Read_REG_x>:
  * @brief  Read Status Register-1, 2, 3(05h, 35h, 15h)
  * @param  reg_x: [in] 1,2,3
  * @retval retrun SR_x value [Byte]
  */
uint8_t W25Qxxx_Read_REG_x(uint8_t reg_x)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
	W25Qxxx_Enable();
 80018d2:	f7ff fedd 	bl	8001690 <W25Qxxx_Enable>

	uint8_t res;

	switch(reg_x)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d018      	beq.n	800190e <W25Qxxx_Read_REG_x+0x46>
 80018dc:	2b03      	cmp	r3, #3
 80018de:	dc1f      	bgt.n	8001920 <W25Qxxx_Read_REG_x+0x58>
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d002      	beq.n	80018ea <W25Qxxx_Read_REG_x+0x22>
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d009      	beq.n	80018fc <W25Qxxx_Read_REG_x+0x34>
		case 3:	// reg 3
			W25Qxxx_SPI(CMD_Reg_3_Read);
			res = W25Qxxx_SPI(CMD_DUMMY);
			break;
		default:
			break;
 80018e8:	e01a      	b.n	8001920 <W25Qxxx_Read_REG_x+0x58>
			W25Qxxx_SPI(CMD_Reg_1_Read);
 80018ea:	2005      	movs	r0, #5
 80018ec:	f7ff feba 	bl	8001664 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff feb7 	bl	8001664 <W25Qxxx_SPI>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
			break;
 80018fa:	e012      	b.n	8001922 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_2_Read);
 80018fc:	2035      	movs	r0, #53	; 0x35
 80018fe:	f7ff feb1 	bl	8001664 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff feae 	bl	8001664 <W25Qxxx_SPI>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
			break;
 800190c:	e009      	b.n	8001922 <W25Qxxx_Read_REG_x+0x5a>
			W25Qxxx_SPI(CMD_Reg_3_Read);
 800190e:	2015      	movs	r0, #21
 8001910:	f7ff fea8 	bl	8001664 <W25Qxxx_SPI>
			res = W25Qxxx_SPI(CMD_DUMMY);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fea5 	bl	8001664 <W25Qxxx_SPI>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
			break;
 800191e:	e000      	b.n	8001922 <W25Qxxx_Read_REG_x+0x5a>
			break;
 8001920:	bf00      	nop
	}

	W25Qxxx_Disable();
 8001922:	f7ff fec1 	bl	80016a8 <W25Qxxx_Disable>

	return res;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <W25Qxxx_Init>:
/** ############################################################################################
  * @brief W25Qxxx Init global static variable
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	while (HAL_GetTick() < 20)
 8001936:	e002      	b.n	800193e <W25Qxxx_Init+0xe>
		HAL_Delay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f000 fc4d 	bl	80021d8 <HAL_Delay>
	while (HAL_GetTick() < 20)
 800193e:	f000 fc3f 	bl	80021c0 <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	2b13      	cmp	r3, #19
 8001946:	d9f7      	bls.n	8001938 <W25Qxxx_Init+0x8>
	W25Qxxx_Disable();
 8001948:	f7ff feae 	bl	80016a8 <W25Qxxx_Disable>
	HAL_Delay(20);
 800194c:	2014      	movs	r0, #20
 800194e:	f000 fc43 	bl	80021d8 <HAL_Delay>

	W25Qxxx_Power_Up();
 8001952:	f7ff feb5 	bl	80016c0 <W25Qxxx_Power_Up>
	W25Qxxx_Read_Manu_Dev_ID();
 8001956:	f7ff fed1 	bl	80016fc <W25Qxxx_Read_Manu_Dev_ID>
	W25Qxxx_Read_JEDEC_ID();
 800195a:	f7ff ff01 	bl	8001760 <W25Qxxx_Read_JEDEC_ID>

	switch (W25Qxxx_JEDEC_ID & 0x000000FF)
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <W25Qxxx_Init+0x18c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3b11      	subs	r3, #17
 8001966:	2b0f      	cmp	r3, #15
 8001968:	d86b      	bhi.n	8001a42 <W25Qxxx_Init+0x112>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <W25Qxxx_Init+0x40>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	08001a35 	.word	0x08001a35
 8001974:	08001a27 	.word	0x08001a27
 8001978:	08001a19 	.word	0x08001a19
 800197c:	08001a0b 	.word	0x08001a0b
 8001980:	080019fd 	.word	0x080019fd
 8001984:	080019ef 	.word	0x080019ef
 8001988:	080019e1 	.word	0x080019e1
 800198c:	080019d1 	.word	0x080019d1
 8001990:	080019c1 	.word	0x080019c1
 8001994:	08001a43 	.word	0x08001a43
 8001998:	08001a43 	.word	0x08001a43
 800199c:	08001a43 	.word	0x08001a43
 80019a0:	08001a43 	.word	0x08001a43
 80019a4:	08001a43 	.word	0x08001a43
 80019a8:	08001a43 	.word	0x08001a43
 80019ac:	080019b1 	.word	0x080019b1
	{
	case 0x20: // 	W25Q512
		W25Qxxx_ID = W25Q512;
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019b2:	220a      	movs	r2, #10
 80019b4:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 1024;
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <W25Qxxx_Init+0x194>)
 80019b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019bc:	601a      	str	r2, [r3, #0]
		break;
 80019be:	e042      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x19: // 	W25Q256
		W25Qxxx_ID = W25Q256;
 80019c0:	4b3f      	ldr	r3, [pc, #252]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019c2:	2209      	movs	r2, #9
 80019c4:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 512;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <W25Qxxx_Init+0x194>)
 80019c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
		break;
 80019ce:	e03a      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x18: // 	W25Q128
		W25Qxxx_ID = W25Q128;
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019d2:	2208      	movs	r2, #8
 80019d4:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 256;
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <W25Qxxx_Init+0x194>)
 80019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019dc:	601a      	str	r2, [r3, #0]
		break;
 80019de:	e032      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x17: //	W25Q64
		W25Qxxx_ID = W25Q64;
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019e2:	2207      	movs	r2, #7
 80019e4:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 128;
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <W25Qxxx_Init+0x194>)
 80019e8:	2280      	movs	r2, #128	; 0x80
 80019ea:	601a      	str	r2, [r3, #0]
		break;
 80019ec:	e02b      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x16: //	W25Q32
		W25Qxxx_ID = W25Q32;
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 64;
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <W25Qxxx_Init+0x194>)
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	601a      	str	r2, [r3, #0]
		break;
 80019fa:	e024      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x15: //	W25Q16
		W25Qxxx_ID = W25Q16;
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <W25Qxxx_Init+0x190>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 32;
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	601a      	str	r2, [r3, #0]
		break;
 8001a08:	e01d      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x14: //	W25Q80
		W25Qxxx_ID = W25Q80;
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <W25Qxxx_Init+0x190>)
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 16;
 8001a10:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a12:	2210      	movs	r2, #16
 8001a14:	601a      	str	r2, [r3, #0]
		break;
 8001a16:	e016      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x13: //	W25Q40
		W25Qxxx_ID = W25Q40;
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <W25Qxxx_Init+0x190>)
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 8;
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
		break;
 8001a24:	e00f      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x12: //	W25Q20
		W25Qxxx_ID = W25Q20;
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <W25Qxxx_Init+0x190>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 4;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a2e:	2204      	movs	r2, #4
 8001a30:	601a      	str	r2, [r3, #0]
		break;
 8001a32:	e008      	b.n	8001a46 <W25Qxxx_Init+0x116>
	case 0x11: //	W25Q10
		W25Qxxx_ID = W25Q10;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <W25Qxxx_Init+0x190>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
		W25Qxxx_BlockCount = 2;
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	601a      	str	r2, [r3, #0]
		break;
 8001a40:	e001      	b.n	8001a46 <W25Qxxx_Init+0x116>
	default:
		return 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e035      	b.n	8001ab2 <W25Qxxx_Init+0x182>
	}
	W25Qxxx_PageSize = 256;					// 256  Byte
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <W25Qxxx_Init+0x198>)
 8001a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4c:	801a      	strh	r2, [r3, #0]
	W25Qxxx_SectorSize = 0x1000;			// 4096 Byte
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <W25Qxxx_Init+0x19c>)
 8001a50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a54:	601a      	str	r2, [r3, #0]
	W25Qxxx_SectorCount = W25Qxxx_BlockCount * 16;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <W25Qxxx_Init+0x194>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <W25Qxxx_Init+0x1a0>)
 8001a5e:	6013      	str	r3, [r2, #0]
	W25Qxxx_PageCount = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / W25Qxxx_PageSize;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <W25Qxxx_Init+0x1a0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <W25Qxxx_Init+0x19c>)
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <W25Qxxx_Init+0x198>)
 8001a6e:	8812      	ldrh	r2, [r2, #0]
 8001a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <W25Qxxx_Init+0x1a4>)
 8001a76:	6013      	str	r3, [r2, #0]
	W25Qxxx_BlockSize = W25Qxxx_SectorSize * 16;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <W25Qxxx_Init+0x19c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <W25Qxxx_Init+0x1a8>)
 8001a80:	6013      	str	r3, [r2, #0]
	W25Qxxx_CapacityInKiloByte = (W25Qxxx_SectorCount * W25Qxxx_SectorSize) / 1024;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <W25Qxxx_Init+0x1a0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <W25Qxxx_Init+0x19c>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <W25Qxxx_Init+0x1ac>)
 8001a92:	6013      	str	r3, [r2, #0]
	W25Qxxx_Read_Unique_ID();
 8001a94:	f7ff fe96 	bl	80017c4 <W25Qxxx_Read_Unique_ID>

	uint8_t regVal = W25Qxxx_Read_REG_x(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ff15 	bl	80018c8 <W25Qxxx_Read_REG_x>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]

	if ((regVal&SR1_S0_BUSY) == SR1_S0_BUSY)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <W25Qxxx_Init+0x180>
		return 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <W25Qxxx_Init+0x182>

	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20002270 	.word	0x20002270
 8001ac0:	20002288 	.word	0x20002288
 8001ac4:	2000226c 	.word	0x2000226c
 8001ac8:	20002268 	.word	0x20002268
 8001acc:	20002294 	.word	0x20002294
 8001ad0:	2000228c 	.word	0x2000228c
 8001ad4:	20002298 	.word	0x20002298
 8001ad8:	20002280 	.word	0x20002280
 8001adc:	20002284 	.word	0x20002284

08001ae0 <W25Qxxx_EraseSector>:
  * @brief  Sector erase 4KB
  * @param  SectorAddr: [in] 0 ~ W25Qxxx_SectorCount-1
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_EraseSector(uint32_t SectorAddr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if (W25Qxxx_ID == 0)
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <W25Qxxx_EraseSector+0x84>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <W25Qxxx_EraseSector+0x14>
		return 1;		// w25qxx Unknown
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <W25Qxxx_EraseSector+0x7a>

	W25Qxxx_WaitForWriteEnd();
 8001af4:	f7ff fe9f 	bl	8001836 <W25Qxxx_WaitForWriteEnd>

	SectorAddr = SectorAddr * W25Qxxx_SectorSize;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <W25Qxxx_EraseSector+0x88>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	607b      	str	r3, [r7, #4]
	W25Qxxx_Write_Enable();
 8001b04:	f7ff fe8c 	bl	8001820 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001b08:	f7ff fdc2 	bl	8001690 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <W25Qxxx_EraseSector+0x84>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d909      	bls.n	8001b28 <W25Qxxx_EraseSector+0x48>
	{
		W25Qxxx_SPI(CMD_Erase_Sector_4_Byte_Addr);
 8001b14:	2021      	movs	r0, #33	; 0x21
 8001b16:	f7ff fda5 	bl	8001664 <W25Qxxx_SPI>
		W25Qxxx_SPI((SectorAddr & 0xFF000000) >> 24);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0e1b      	lsrs	r3, r3, #24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fd9f 	bl	8001664 <W25Qxxx_SPI>
 8001b26:	e002      	b.n	8001b2e <W25Qxxx_EraseSector+0x4e>
	}
	else
	{
		W25Qxxx_SPI(CMD_Erase_Sector);
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f7ff fd9b 	bl	8001664 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((SectorAddr & 0xFF0000) >> 16);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd95 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI((SectorAddr & 0xFF00) >> 8);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd8f 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI( SectorAddr & 0xFF);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd8a 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_Disable();
 8001b50:	f7ff fdaa 	bl	80016a8 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001b54:	f7ff fe6f 	bl	8001836 <W25Qxxx_WaitForWriteEnd>

	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20002288 	.word	0x20002288
 8001b68:	20002294 	.word	0x20002294

08001b6c <W25Qxxx_WritePage>:
  * @param Page_Address: [in] page address (0 - W25Qxxx_PageCount-1)
  * @param OffsetInByte: [in] offset address
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WritePage(const uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <W25Qxxx_WritePage+0xc4>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <W25Qxxx_WritePage+0x1a>
		return 1;		// w25qxx Unknown
 8001b82:	2301      	movs	r3, #1
 8001b84:	e050      	b.n	8001c28 <W25Qxxx_WritePage+0xbc>

	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > W25Qxxx_PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a29      	ldr	r2, [pc, #164]	; (8001c34 <W25Qxxx_WritePage+0xc8>)
 8001b8e:	8812      	ldrh	r2, [r2, #0]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d802      	bhi.n	8001b9a <W25Qxxx_WritePage+0x2e>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d105      	bne.n	8001ba6 <W25Qxxx_WritePage+0x3a>
		NumByteToWrite_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <W25Qxxx_WritePage+0xc8>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	603b      	str	r3, [r7, #0]

	W25Qxxx_WaitForWriteEnd();
 8001ba6:	f7ff fe46 	bl	8001836 <W25Qxxx_WaitForWriteEnd>

	W25Qxxx_Write_Enable();
 8001baa:	f7ff fe39 	bl	8001820 <W25Qxxx_Write_Enable>

	W25Qxxx_Enable();
 8001bae:	f7ff fd6f 	bl	8001690 <W25Qxxx_Enable>

	Page_Address = (Page_Address * W25Qxxx_PageSize) + OffsetInByte;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <W25Qxxx_WritePage+0xc8>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	fb03 f302 	mul.w	r3, r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
	if (W25Qxxx_ID >= W25Q256)
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <W25Qxxx_WritePage+0xc4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d909      	bls.n	8001be0 <W25Qxxx_WritePage+0x74>
	{
		W25Qxxx_SPI(CMD_Page_Program_4_Byte_Addr);
 8001bcc:	2012      	movs	r0, #18
 8001bce:	f7ff fd49 	bl	8001664 <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0e1b      	lsrs	r3, r3, #24
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd43 	bl	8001664 <W25Qxxx_SPI>
 8001bde:	e002      	b.n	8001be6 <W25Qxxx_WritePage+0x7a>
	}
	else
	{
		W25Qxxx_SPI(CMD_Page_Program);
 8001be0:	2002      	movs	r0, #2
 8001be2:	f7ff fd3f 	bl	8001664 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd39 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fd33 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fd2e 	bl	8001664 <W25Qxxx_SPI>
	HAL_SPI_Transmit(&hspi_flash, (uint8_t *)pBuffer, NumByteToWrite_up_to_PageSize, SPI_FLASH_TIMEOUT);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f247 5330 	movw	r3, #30000	; 0x7530
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <W25Qxxx_WritePage+0xcc>)
 8001c14:	f001 fa9b 	bl	800314e <HAL_SPI_Transmit>

	W25Qxxx_Disable();
 8001c18:	f7ff fd46 	bl	80016a8 <W25Qxxx_Disable>

	W25Qxxx_WaitForWriteEnd();
 8001c1c:	f7ff fe0b 	bl	8001836 <W25Qxxx_WaitForWriteEnd>

	HAL_Delay(1);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f000 fad9 	bl	80021d8 <HAL_Delay>

	return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20002288 	.word	0x20002288
 8001c34:	20002268 	.word	0x20002268
 8001c38:	20001164 	.word	0x20001164

08001c3c <W25Qxxx_WriteSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToWrite_up_to_SectorSize: [in] Byte data number
  * @retval status 0:passed  1:failed
  */
uint8_t W25Qxxx_WriteSector(const uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001c4a:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <W25Qxxx_WriteSector+0xdc>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <W25Qxxx_WriteSector+0x1a>
		return 1;		// w25qxx Unknown
 8001c52:	2301      	movs	r3, #1
 8001c54:	e05c      	b.n	8001d10 <W25Qxxx_WriteSector+0xd4>

	if ((NumByteToWrite_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <W25Qxxx_WriteSector+0xe0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d802      	bhi.n	8001c66 <W25Qxxx_WriteSector+0x2a>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <W25Qxxx_WriteSector+0x30>
		NumByteToWrite_up_to_SectorSize = W25Qxxx_SectorSize;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <W25Qxxx_WriteSector+0xe0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	603b      	str	r3, [r7, #0]

	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <W25Qxxx_WriteSector+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d301      	bcc.n	8001c7a <W25Qxxx_WriteSector+0x3e>
	{
		return 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e04a      	b.n	8001d10 <W25Qxxx_WriteSector+0xd4>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	441a      	add	r2, r3
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <W25Qxxx_WriteSector+0xe0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d905      	bls.n	8001c94 <W25Qxxx_WriteSector+0x58>
		BytesToWrite = W25Qxxx_SectorSize - OffsetInByte;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <W25Qxxx_WriteSector+0xe0>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	e001      	b.n	8001c98 <W25Qxxx_WriteSector+0x5c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	61bb      	str	r3, [r7, #24]

	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001c98:	68b8      	ldr	r0, [r7, #8]
 8001c9a:	f7ff fdfd 	bl	8001898 <W25Qxxx_SectorToPage>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <W25Qxxx_WriteSector+0xe4>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cac:	4413      	add	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <W25Qxxx_WriteSector+0xe4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cbc:	fb02 f201 	mul.w	r2, r2, r1
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
	do
	{
		uint8_t res = W25Qxxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	69f9      	ldr	r1, [r7, #28]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ff4e 	bl	8001b6c <W25Qxxx_WritePage>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	74fb      	strb	r3, [r7, #19]
		if (res != 0)
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <W25Qxxx_WriteSector+0xa2>
			return 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e018      	b.n	8001d10 <W25Qxxx_WriteSector+0xd4>
		StartPage++;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= W25Qxxx_PageSize - LocalOffset;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <W25Qxxx_WriteSector+0xe4>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	1a9a      	subs	r2, r3, r2
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <W25Qxxx_WriteSector+0xe4>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	dcda      	bgt.n	8001cc4 <W25Qxxx_WriteSector+0x88>

	return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20002288 	.word	0x20002288
 8001d1c:	20002294 	.word	0x20002294
 8001d20:	20002268 	.word	0x20002268

08001d24 <W25Qxxx_ReadPage>:
  * @param OffsetInByte: [in] offset byte number   [0 --- offset ------ 255]
  * @param NumByteToRead_up_to_PageSize: [in] read byte number  max 256Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001d32:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <W25Qxxx_ReadPage+0xcc>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <W25Qxxx_ReadPage+0x1a>
		return 1;		// w25qxx Unknown
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e053      	b.n	8001de6 <W25Qxxx_ReadPage+0xc2>

	if ((NumByteToRead_up_to_PageSize > W25Qxxx_PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <W25Qxxx_ReadPage+0xd0>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d802      	bhi.n	8001d50 <W25Qxxx_ReadPage+0x2c>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <W25Qxxx_ReadPage+0x32>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize;
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <W25Qxxx_ReadPage+0xd0>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > W25Qxxx_PageSize)
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <W25Qxxx_ReadPage+0xd0>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d905      	bls.n	8001d70 <W25Qxxx_ReadPage+0x4c>
		NumByteToRead_up_to_PageSize = W25Qxxx_PageSize - OffsetInByte;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <W25Qxxx_ReadPage+0xd0>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	603b      	str	r3, [r7, #0]

	Page_Address = Page_Address * W25Qxxx_PageSize + OffsetInByte;
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <W25Qxxx_ReadPage+0xd0>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	fb03 f302 	mul.w	r3, r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60bb      	str	r3, [r7, #8]

	W25Qxxx_Enable();
 8001d82:	f7ff fc85 	bl	8001690 <W25Qxxx_Enable>
	if (W25Qxxx_ID >= W25Q256)
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <W25Qxxx_ReadPage+0xcc>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d909      	bls.n	8001da2 <W25Qxxx_ReadPage+0x7e>
	{
		W25Qxxx_SPI(CMD_Fast_Read_4_Byte_Addr);
 8001d8e:	200c      	movs	r0, #12
 8001d90:	f7ff fc68 	bl	8001664 <W25Qxxx_SPI>
		W25Qxxx_SPI((Page_Address & 0xFF000000) >> 24);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	0e1b      	lsrs	r3, r3, #24
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fc62 	bl	8001664 <W25Qxxx_SPI>
 8001da0:	e002      	b.n	8001da8 <W25Qxxx_ReadPage+0x84>
	}
	else
	{
		W25Qxxx_SPI(CMD_Fast_Read);
 8001da2:	200b      	movs	r0, #11
 8001da4:	f7ff fc5e 	bl	8001664 <W25Qxxx_SPI>
	}
	W25Qxxx_SPI((Page_Address & 0xFF0000) >> 16);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fc58 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI((Page_Address & 0xFF00) >> 8);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fc52 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(Page_Address & 0xFF);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc4d 	bl	8001664 <W25Qxxx_SPI>
	W25Qxxx_SPI(CMD_DUMMY);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7ff fc4a 	bl	8001664 <W25Qxxx_SPI>
	HAL_SPI_Receive(&hspi_flash, pBuffer, NumByteToRead_up_to_PageSize, SPI_FLASH_TIMEOUT);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f247 5330 	movw	r3, #30000	; 0x7530
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <W25Qxxx_ReadPage+0xd4>)
 8001ddc:	f001 faf3 	bl	80033c6 <HAL_SPI_Receive>

	W25Qxxx_Disable();
 8001de0:	f7ff fc62 	bl	80016a8 <W25Qxxx_Disable>

	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20002288 	.word	0x20002288
 8001df4:	20002268 	.word	0x20002268
 8001df8:	20001164 	.word	0x20001164

08001dfc <W25Qxxx_ReadSector>:
  * @param OffsetInByte: [in] offset byte number
  * @param NumByteToRead_up_to_SectorSize: [in] read byte number  max 4096Bytes
  * @retval status 0:passed   1:failed
  */
uint8_t W25Qxxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
	if (W25Qxxx_ID == 0)
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <W25Qxxx_ReadSector+0xd0>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <W25Qxxx_ReadSector+0x1a>
		return 1;		// w25qxx Unknown
 8001e12:	2301      	movs	r3, #1
 8001e14:	e055      	b.n	8001ec2 <W25Qxxx_ReadSector+0xc6>

	if ((NumByteToRead_up_to_SectorSize > W25Qxxx_SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <W25Qxxx_ReadSector+0xd4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d802      	bhi.n	8001e26 <W25Qxxx_ReadSector+0x2a>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <W25Qxxx_ReadSector+0x30>
		NumByteToRead_up_to_SectorSize = W25Qxxx_SectorSize;
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <W25Qxxx_ReadSector+0xd4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	603b      	str	r3, [r7, #0]
	if (OffsetInByte >= W25Qxxx_SectorSize)
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <W25Qxxx_ReadSector+0xd4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d301      	bcc.n	8001e3a <W25Qxxx_ReadSector+0x3e>
	{
		return 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e043      	b.n	8001ec2 <W25Qxxx_ReadSector+0xc6>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > W25Qxxx_SectorSize)
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	441a      	add	r2, r3
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <W25Qxxx_ReadSector+0xd4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d905      	bls.n	8001e54 <W25Qxxx_ReadSector+0x58>
		BytesToRead = W25Qxxx_SectorSize - OffsetInByte;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <W25Qxxx_ReadSector+0xd4>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e001      	b.n	8001e58 <W25Qxxx_ReadSector+0x5c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
	StartPage = W25Qxxx_SectorToPage(Sector_Address) + (OffsetInByte / W25Qxxx_PageSize);
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	f7ff fd1d 	bl	8001898 <W25Qxxx_SectorToPage>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <W25Qxxx_ReadSector+0xd8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % W25Qxxx_PageSize;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <W25Qxxx_ReadSector+0xd8>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e7c:	fb02 f201 	mul.w	r2, r2, r1
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
	do
	{
		W25Qxxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	69f9      	ldr	r1, [r7, #28]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff ff4a 	bl	8001d24 <W25Qxxx_ReadPage>
		StartPage++;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
		BytesToRead -= W25Qxxx_PageSize - LocalOffset;
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <W25Qxxx_ReadSector+0xd8>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1a9a      	subs	r2, r3, r2
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
		pBuffer += W25Qxxx_PageSize - LocalOffset;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <W25Qxxx_ReadSector+0xd8>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	dce1      	bgt.n	8001e84 <W25Qxxx_ReadSector+0x88>

	return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20002288 	.word	0x20002288
 8001ed0:	20002294 	.word	0x20002294
 8001ed4:	20002268 	.word	0x20002268

08001ed8 <W25Qxxx_diskio_initialize>:
/** ------------------------------------------------------------------------ /
  * @brief  Initializes a Drive [spi flash W25Qxxx]
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_initialize (void)               /*!< Initialize Disk Drive                     */
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <W25Qxxx_diskio_initialize+0x30>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
	if (W25Qxxx_Init() == FLASH_OK)
 8001ee2:	f7ff fd25 	bl	8001930 <W25Qxxx_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <W25Qxxx_diskio_initialize+0x24>
	{
		Stat &= ~STA_NOINIT;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <W25Qxxx_diskio_initialize+0x30>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <W25Qxxx_diskio_initialize+0x30>)
 8001efa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001efc:	4b02      	ldr	r3, [pc, #8]	; (8001f08 <W25Qxxx_diskio_initialize+0x30>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000003c 	.word	0x2000003c

08001f0c <W25Qxxx_diskio_status>:
/** ------------------------------------------------------------------------ /
  * @brief  Gets Disk Status
  * @retval DSTATUS: Operation status
  */
DSTATUS W25Qxxx_diskio_status (void)                     /*!< Get Disk Status */
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	Stat = STA_NOINIT;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <W25Qxxx_diskio_status+0x34>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]

	if ((W25Qxxx_Read_REG_x(1)&SR1_S0_BUSY) != SR1_S0_BUSY)
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff fcd6 	bl	80018c8 <W25Qxxx_Read_REG_x>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d007      	beq.n	8001f36 <W25Qxxx_diskio_status+0x2a>
	{
		Stat &= ~STA_NOINIT;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <W25Qxxx_diskio_status+0x34>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <W25Qxxx_diskio_status+0x34>)
 8001f34:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8001f36:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <W25Qxxx_diskio_status+0x34>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000003c 	.word	0x2000003c

08001f44 <W25Qxxx_diskio_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..8192)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_read (BYTE *buff, DWORD sector, UINT count)	     /*!< Read Sector(s) */
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001f54:	f7ff fc6f 	bl	8001836 <W25Qxxx_WaitForWriteEnd>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <W25Qxxx_diskio_read+0x1e>
		return res;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	e011      	b.n	8001f86 <W25Qxxx_diskio_read+0x42>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <W25Qxxx_diskio_read+0x4c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_ReadSector(buff, sector, 0, sectorCount) == 0)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2200      	movs	r2, #0
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff ff41 	bl	8001dfc <W25Qxxx_ReadSector>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <W25Qxxx_diskio_read+0x40>
	{
		res = RES_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
	}

	return res;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20002294 	.word	0x20002294

08001f94 <W25Qxxx_diskio_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_write (const BYTE *buff, DWORD sector, UINT count) /*!< Write Sector(s) when _USE_WRITE = 0 */
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
	DRESULT res = RES_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	75fb      	strb	r3, [r7, #23]

	/*
	 * ensure the SPI Flash is ready for a new operation
	 */

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001fa4:	f7ff fc47 	bl	8001836 <W25Qxxx_WaitForWriteEnd>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <W25Qxxx_diskio_write+0x1e>
		return res;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	e027      	b.n	8002002 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_EraseSector(sector) != 0)
 8001fb2:	68b8      	ldr	r0, [r7, #8]
 8001fb4:	f7ff fd94 	bl	8001ae0 <W25Qxxx_EraseSector>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <W25Qxxx_diskio_write+0x2e>
		return res;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	e01f      	b.n	8002002 <W25Qxxx_diskio_write+0x6e>

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001fc2:	f7ff fc38 	bl	8001836 <W25Qxxx_WaitForWriteEnd>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <W25Qxxx_diskio_write+0x3c>
		return res;
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	e018      	b.n	8002002 <W25Qxxx_diskio_write+0x6e>

	UINT sectorCount = count * W25Qxxx_SectorSize;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <W25Qxxx_diskio_write+0x78>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	613b      	str	r3, [r7, #16]
	if (W25Qxxx_WriteSector(buff, sector, 0, sectorCount) == 0)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7ff fe2a 	bl	8001c3c <W25Qxxx_WriteSector>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <W25Qxxx_diskio_write+0x5e>
	{
		res = RES_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
	}

	if (W25Qxxx_WaitForWriteEnd() != 0)
 8001ff2:	f7ff fc20 	bl	8001836 <W25Qxxx_WaitForWriteEnd>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <W25Qxxx_diskio_write+0x6c>
			return res;
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
 8001ffe:	e000      	b.n	8002002 <W25Qxxx_diskio_write+0x6e>

	return res;
 8002000:	7dfb      	ldrb	r3, [r7, #23]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20002294 	.word	0x20002294

08002010 <W25Qxxx_diskio_ioctl>:
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
DRESULT W25Qxxx_diskio_ioctl(BYTE cmd, void *buff)             /*!< I/O control operation when _USE_IOCTL = 1 */
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
	  DRESULT res = RES_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]

	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <W25Qxxx_diskio_ioctl+0x84>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <W25Qxxx_diskio_ioctl+0x22>
 800202e:	2303      	movs	r3, #3
 8002030:	e029      	b.n	8002086 <W25Qxxx_diskio_ioctl+0x76>

	  switch (cmd)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d823      	bhi.n	8002080 <W25Qxxx_diskio_ioctl+0x70>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <W25Qxxx_diskio_ioctl+0x30>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002051 	.word	0x08002051
 8002044:	08002057 	.word	0x08002057
 8002048:	08002065 	.word	0x08002065
 800204c:	08002075 	.word	0x08002075
	  {
	  /* Make sure that no pending write process */
	  case CTRL_SYNC :
	    res = RES_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
	    break;
 8002054:	e016      	b.n	8002084 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get number of sectors on the disk (DWORD) */
	  case GET_SECTOR_COUNT :
	    *(DWORD*)buff = W25Qxxx_SectorCount;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <W25Qxxx_diskio_ioctl+0x88>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
	    break;
 8002062:	e00f      	b.n	8002084 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get R/W sector size (WORD) */
	  case GET_SECTOR_SIZE :
	    *(WORD*)buff = W25Qxxx_SectorSize;
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <W25Qxxx_diskio_ioctl+0x8c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29a      	uxth	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
	    break;
 8002072:	e007      	b.n	8002084 <W25Qxxx_diskio_ioctl+0x74>

	  /* Get erase block size in unit of sector (DWORD) */
	  case GET_BLOCK_SIZE :
	    *(DWORD*)buff = 1;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]
	    res = RES_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
	    break;
 800207e:	e001      	b.n	8002084 <W25Qxxx_diskio_ioctl+0x74>

	  default:
	    res = RES_PARERR;
 8002080:	2304      	movs	r3, #4
 8002082:	73fb      	strb	r3, [r7, #15]
	  }

	  return res;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	2000003c 	.word	0x2000003c
 8002098:	2000228c 	.word	0x2000228c
 800209c:	20002294 	.word	0x20002294

080020a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020a6:	490e      	ldr	r1, [pc, #56]	; (80020e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020bc:	4c0b      	ldr	r4, [pc, #44]	; (80020ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020ca:	f7ff fab9 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ce:	f004 fda7 	bl	8006c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d2:	f7fe ff2f 	bl	8000f34 <main>
  bx  lr    
 80020d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80020e4:	080082fc 	.word	0x080082fc
  ldr r2, =_sbss
 80020e8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80020ec:	2000431c 	.word	0x2000431c

080020f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_Init+0x40>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_Init+0x40>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_Init+0x40>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 f931 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff f920 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f93b 	bl	80023d2 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f911 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000038 	.word	0x20000038
 8002190:	20000044 	.word	0x20000044
 8002194:	20000040 	.word	0x20000040

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000044 	.word	0x20000044
 80021bc:	2000229c 	.word	0x2000229c

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000229c 	.word	0x2000229c

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000044 	.word	0x20000044

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff47 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff5c 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffb0 	bl	8002340 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	e177      	b.n	80026f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8166 	bne.w	80026f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d005      	beq.n	800243e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243a:	2b02      	cmp	r3, #2
 800243c:	d130      	bne.n	80024a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 0201 	and.w	r2, r3, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d017      	beq.n	80024dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d123      	bne.n	8002530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	08da      	lsrs	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3208      	adds	r2, #8
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	220f      	movs	r2, #15
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80c0 	beq.w	80026f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b66      	ldr	r3, [pc, #408]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a65      	ldr	r2, [pc, #404]	; (8002710 <HAL_GPIO_Init+0x324>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_GPIO_Init+0x324>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258e:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_GPIO_Init+0x328>)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_GPIO_Init+0x32c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d037      	beq.n	800262a <HAL_GPIO_Init+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a57      	ldr	r2, [pc, #348]	; (800271c <HAL_GPIO_Init+0x330>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d031      	beq.n	8002626 <HAL_GPIO_Init+0x23a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a56      	ldr	r2, [pc, #344]	; (8002720 <HAL_GPIO_Init+0x334>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x236>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_GPIO_Init+0x338>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x232>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_GPIO_Init+0x33c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x22e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a53      	ldr	r2, [pc, #332]	; (800272c <HAL_GPIO_Init+0x340>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x22a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_GPIO_Init+0x344>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_GPIO_Init+0x348>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	; (8002738 <HAL_GPIO_Init+0x34c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	; (800273c <HAL_GPIO_Init+0x350>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x21a>
 8002602:	2309      	movs	r3, #9
 8002604:	e012      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002606:	230a      	movs	r3, #10
 8002608:	e010      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260a:	2308      	movs	r3, #8
 800260c:	e00e      	b.n	800262c <HAL_GPIO_Init+0x240>
 800260e:	2307      	movs	r3, #7
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002612:	2306      	movs	r3, #6
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x240>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x240>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x240>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	; (8002714 <HAL_GPIO_Init+0x328>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_GPIO_Init+0x354>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266e:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_GPIO_Init+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002698:	4a29      	ldr	r2, [pc, #164]	; (8002740 <HAL_GPIO_Init+0x354>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_GPIO_Init+0x354>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae84 	bls.w	8002408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40021c00 	.word	0x40021c00
 8002738:	40022000 	.word	0x40022000
 800273c:	40022400 	.word	0x40022400
 8002740:	40013c00 	.word	0x40013c00

08002744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
 8002750:	4613      	mov	r3, r2
 8002752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002754:	787b      	ldrb	r3, [r7, #1]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002760:	e003      	b.n	800276a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	041a      	lsls	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	619a      	str	r2, [r3, #24]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002788:	887a      	ldrh	r2, [r7, #2]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	041a      	lsls	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43d9      	mvns	r1, r3
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	400b      	ands	r3, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e264      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d075      	beq.n	80028b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ca:	4ba3      	ldr	r3, [pc, #652]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d00c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d6:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d112      	bne.n	8002808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b9d      	ldr	r3, [pc, #628]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ee:	d10b      	bne.n	8002808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	4b99      	ldr	r3, [pc, #612]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d05b      	beq.n	80028b4 <HAL_RCC_OscConfig+0x108>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d157      	bne.n	80028b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e23f      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x74>
 8002812:	4b91      	ldr	r3, [pc, #580]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a90      	ldr	r2, [pc, #576]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e01d      	b.n	800285c <HAL_RCC_OscConfig+0xb0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x98>
 800282a:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a8a      	ldr	r2, [pc, #552]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a87      	ldr	r2, [pc, #540]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xb0>
 8002844:	4b84      	ldr	r3, [pc, #528]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a83      	ldr	r2, [pc, #524]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a80      	ldr	r2, [pc, #512]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fcac 	bl	80021c0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff fca8 	bl	80021c0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e204      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0xc0>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff fc98 	bl	80021c0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff fc94 	bl	80021c0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1f0      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0xe8>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d063      	beq.n	800298a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c2:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d11c      	bne.n	8002914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	4b5c      	ldr	r3, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_RCC_OscConfig+0x152>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1c4      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b56      	ldr	r3, [pc, #344]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4952      	ldr	r1, [pc, #328]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	e03a      	b.n	800298a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_OscConfig+0x2b0>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7ff fc4d 	bl	80021c0 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292a:	f7ff fc49 	bl	80021c0 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1a5      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4940      	ldr	r1, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_RCC_OscConfig+0x2b0>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff fc2c 	bl	80021c0 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296c:	f7ff fc28 	bl	80021c0 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e184      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d030      	beq.n	80029f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <HAL_RCC_OscConfig+0x2b4>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7ff fc0c 	bl	80021c0 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ac:	f7ff fc08 	bl	80021c0 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e164      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x200>
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029cc:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_RCC_OscConfig+0x2b4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d2:	f7ff fbf5 	bl	80021c0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029da:	f7ff fbf1 	bl	80021c0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e14d      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80a0 	beq.w	8002b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x2b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d121      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_RCC_OscConfig+0x2b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_RCC_OscConfig+0x2b8>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff fbb7 	bl	80021c0 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e011      	b.n	8002a7a <HAL_RCC_OscConfig+0x2ce>
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	42470000 	.word	0x42470000
 8002a60:	42470e80 	.word	0x42470e80
 8002a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7ff fbaa 	bl	80021c0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e106      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x4e4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
 8002a8e:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a80      	ldr	r2, [pc, #512]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	e01c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x32a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x312>
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a7a      	ldr	r2, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	4b78      	ldr	r3, [pc, #480]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e00b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x32a>
 8002abe:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a74      	ldr	r2, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	4b72      	ldr	r3, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a71      	ldr	r2, [pc, #452]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d015      	beq.n	8002b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb6f 	bl	80021c0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7ff fb6b 	bl	80021c0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0c5      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x33a>
 8002b08:	e014      	b.n	8002b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff fb59 	bl	80021c0 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff fb55 	bl	80021c0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0af      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	4b5a      	ldr	r3, [pc, #360]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 809b 	beq.w	8002c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d05c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d141      	bne.n	8002be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7ff fb29 	bl	80021c0 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b72:	f7ff fb25 	bl	80021c0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e081      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b84:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	019b      	lsls	r3, r3, #6
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	4937      	ldr	r1, [pc, #220]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_OscConfig+0x4ec>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fafe 	bl	80021c0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff fafa 	bl	80021c0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e056      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
 8002be6:	e04e      	b.n	8002c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_OscConfig+0x4ec>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7ff fae7 	bl	80021c0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7ff fae3 	bl	80021c0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e03f      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x44a>
 8002c14:	e037      	b.n	8002c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e032      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d028      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d121      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d11a      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c52:	4013      	ands	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d111      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40007000 	.word	0x40007000
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470060 	.word	0x42470060

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0cc      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b68      	ldr	r3, [pc, #416]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b8      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	494d      	ldr	r1, [pc, #308]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d044      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d119      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e067      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7a:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 0203 	bic.w	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4934      	ldr	r1, [pc, #208]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff fa18 	bl	80021c0 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d94:	f7ff fa14 	bl	80021c0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e04f      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 020c 	and.w	r2, r3, #12
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1eb      	bne.n	8002d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d20c      	bcs.n	8002de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e032      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d008      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4916      	ldr	r1, [pc, #88]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	490e      	ldr	r1, [pc, #56]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e22:	f000 f821 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	490a      	ldr	r1, [pc, #40]	; (8002e5c <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	5ccb      	ldrb	r3, [r1, r3]
 8002e36:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3a:	4a09      	ldr	r2, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f978 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023c00 	.word	0x40023c00
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	080081a8 	.word	0x080081a8
 8002e60:	20000038 	.word	0x20000038
 8002e64:	20000040 	.word	0x20000040

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e6e:	2100      	movs	r1, #0
 8002e70:	6079      	str	r1, [r7, #4]
 8002e72:	2100      	movs	r1, #0
 8002e74:	60f9      	str	r1, [r7, #12]
 8002e76:	2100      	movs	r1, #0
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e7e:	4952      	ldr	r1, [pc, #328]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e80:	6889      	ldr	r1, [r1, #8]
 8002e82:	f001 010c 	and.w	r1, r1, #12
 8002e86:	2908      	cmp	r1, #8
 8002e88:	d00d      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002e8a:	2908      	cmp	r1, #8
 8002e8c:	f200 8094 	bhi.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x150>
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0x32>
 8002e94:	2904      	cmp	r1, #4
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8002e98:	e08e      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8002e9c:	60bb      	str	r3, [r7, #8]
       break;
 8002e9e:	e08e      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ea2:	60bb      	str	r3, [r7, #8]
      break;
 8002ea4:	e08b      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea6:	4948      	ldr	r1, [pc, #288]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ea8:	6849      	ldr	r1, [r1, #4]
 8002eaa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002eae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb0:	4945      	ldr	r1, [pc, #276]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eb2:	6849      	ldr	r1, [r1, #4]
 8002eb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002eb8:	2900      	cmp	r1, #0
 8002eba:	d024      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebc:	4942      	ldr	r1, [pc, #264]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ebe:	6849      	ldr	r1, [r1, #4]
 8002ec0:	0989      	lsrs	r1, r1, #6
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ecc:	f04f 0500 	mov.w	r5, #0
 8002ed0:	ea00 0204 	and.w	r2, r0, r4
 8002ed4:	ea01 0305 	and.w	r3, r1, r5
 8002ed8:	493d      	ldr	r1, [pc, #244]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eda:	fb01 f003 	mul.w	r0, r1, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	fb01 f102 	mul.w	r1, r1, r2
 8002ee4:	1844      	adds	r4, r0, r1
 8002ee6:	493a      	ldr	r1, [pc, #232]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ee8:	fba2 0101 	umull	r0, r1, r2, r1
 8002eec:	1863      	adds	r3, r4, r1
 8002eee:	4619      	mov	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	f7fd fdc0 	bl	8000a7c <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e04a      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	ea02 0400 	and.w	r4, r2, r0
 8002f1e:	ea03 0501 	and.w	r5, r3, r1
 8002f22:	4620      	mov	r0, r4
 8002f24:	4629      	mov	r1, r5
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	014b      	lsls	r3, r1, #5
 8002f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f34:	0142      	lsls	r2, r0, #5
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	1b00      	subs	r0, r0, r4
 8002f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	018b      	lsls	r3, r1, #6
 8002f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f4e:	0182      	lsls	r2, r0, #6
 8002f50:	1a12      	subs	r2, r2, r0
 8002f52:	eb63 0301 	sbc.w	r3, r3, r1
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	00d9      	lsls	r1, r3, #3
 8002f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f64:	00d0      	lsls	r0, r2, #3
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	1912      	adds	r2, r2, r4
 8002f6c:	eb45 0303 	adc.w	r3, r5, r3
 8002f70:	f04f 0000 	mov.w	r0, #0
 8002f74:	f04f 0100 	mov.w	r1, #0
 8002f78:	0299      	lsls	r1, r3, #10
 8002f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f7e:	0290      	lsls	r0, r2, #10
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	f7fd fd74 	bl	8000a7c <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	60bb      	str	r3, [r7, #8]
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8002fba:	60bb      	str	r3, [r7, #8]
      break;
 8002fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	017d7840 	.word	0x017d7840

08002fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000038 	.word	0x20000038

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a9b      	lsrs	r3, r3, #10
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	080081b8 	.word	0x080081b8

08003014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003018:	f7ff ffdc 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0b5b      	lsrs	r3, r3, #13
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	080081b8 	.word	0x080081b8

0800303c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07b      	b.n	8003146 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d009      	beq.n	8003074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	e005      	b.n	8003074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe f994 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	ea42 0103 	orr.w	r1, r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	f003 0104 	and.w	r1, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0210 	and.w	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003134:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b088      	sub	sp, #32
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_SPI_Transmit+0x22>
 800316c:	2302      	movs	r3, #2
 800316e:	e126      	b.n	80033be <HAL_SPI_Transmit+0x270>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003178:	f7ff f822 	bl	80021c0 <HAL_GetTick>
 800317c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003192:	e10b      	b.n	80033ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0x52>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a4:	e102      	b.n	80033ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ec:	d10f      	bne.n	800320e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d007      	beq.n	800322c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003234:	d14b      	bne.n	80032ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Transmit+0xf6>
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d13e      	bne.n	80032c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003268:	e02b      	b.n	80032c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d112      	bne.n	800329e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	86da      	strh	r2, [r3, #54]	; 0x36
 800329c:	e011      	b.n	80032c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329e:	f7fe ff8f 	bl	80021c0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d803      	bhi.n	80032b6 <HAL_SPI_Transmit+0x168>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d102      	bne.n	80032bc <HAL_SPI_Transmit+0x16e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032c0:	e074      	b.n	80033ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ce      	bne.n	800326a <HAL_SPI_Transmit+0x11c>
 80032cc:	e04c      	b.n	8003368 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_Transmit+0x18e>
 80032d6:	8afb      	ldrh	r3, [r7, #22]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d140      	bne.n	800335e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003302:	e02c      	b.n	800335e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d113      	bne.n	800333a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	7812      	ldrb	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	86da      	strh	r2, [r3, #54]	; 0x36
 8003338:	e011      	b.n	800335e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333a:	f7fe ff41 	bl	80021c0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d803      	bhi.n	8003352 <HAL_SPI_Transmit+0x204>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d102      	bne.n	8003358 <HAL_SPI_Transmit+0x20a>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800335c:	e026      	b.n	80033ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1cd      	bne.n	8003304 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fbcb 	bl	8003b08 <SPI_EndRxTxTransaction>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e000      	b.n	80033ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80033aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b088      	sub	sp, #32
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033e2:	d112      	bne.n	800340a <HAL_SPI_Receive+0x44>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2204      	movs	r2, #4
 80033f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f8f1 	bl	80035e8 <HAL_SPI_TransmitReceive>
 8003406:	4603      	mov	r3, r0
 8003408:	e0ea      	b.n	80035e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_SPI_Receive+0x52>
 8003414:	2302      	movs	r3, #2
 8003416:	e0e3      	b.n	80035e0 <HAL_SPI_Receive+0x21a>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003420:	f7fe fece 	bl	80021c0 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d002      	beq.n	8003438 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003432:	2302      	movs	r3, #2
 8003434:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003436:	e0ca      	b.n	80035ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_SPI_Receive+0x7e>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003448:	e0c1      	b.n	80035ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2204      	movs	r2, #4
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88fa      	ldrh	r2, [r7, #6]
 8003462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	d10f      	bne.n	80034b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d162      	bne.n	800359e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034d8:	e02e      	b.n	8003538 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d115      	bne.n	8003514 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f103 020c 	add.w	r2, r3, #12
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003512:	e011      	b.n	8003538 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003514:	f7fe fe54 	bl	80021c0 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d803      	bhi.n	800352c <HAL_SPI_Receive+0x166>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Receive+0x16c>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003536:	e04a      	b.n	80035ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1cb      	bne.n	80034da <HAL_SPI_Receive+0x114>
 8003542:	e031      	b.n	80035a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d113      	bne.n	800357a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	b292      	uxth	r2, r2
 800355e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003578:	e011      	b.n	800359e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800357a:	f7fe fe21 	bl	80021c0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d803      	bhi.n	8003592 <HAL_SPI_Receive+0x1cc>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d102      	bne.n	8003598 <HAL_SPI_Receive+0x1d2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d102      	bne.n	800359e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800359c:	e017      	b.n	80035ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1cd      	bne.n	8003544 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	6839      	ldr	r1, [r7, #0]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fa45 	bl	8003a3c <SPI_EndRxTransaction>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
 80035ca:	e000      	b.n	80035ce <HAL_SPI_Receive+0x208>
  }

error :
 80035cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035f6:	2301      	movs	r3, #1
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_SPI_TransmitReceive+0x26>
 800360a:	2302      	movs	r3, #2
 800360c:	e18a      	b.n	8003924 <HAL_SPI_TransmitReceive+0x33c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003616:	f7fe fdd3 	bl	80021c0 <HAL_GetTick>
 800361a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003634:	2b01      	cmp	r3, #1
 8003636:	d00f      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x70>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363e:	d107      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x68>
 8003648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800364c:	2b04      	cmp	r3, #4
 800364e:	d003      	beq.n	8003658 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003656:	e15b      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_SPI_TransmitReceive+0x82>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_TransmitReceive+0x82>
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003670:	e14e      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b04      	cmp	r3, #4
 800367c:	d003      	beq.n	8003686 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2205      	movs	r2, #5
 8003682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	887a      	ldrh	r2, [r7, #2]
 8003696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	887a      	ldrh	r2, [r7, #2]
 80036ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d007      	beq.n	80036da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e2:	d178      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x10a>
 80036ec:	8b7b      	ldrh	r3, [r7, #26]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d166      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003716:	e053      	b.n	80037c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d11b      	bne.n	800375e <HAL_SPI_TransmitReceive+0x176>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_SPI_TransmitReceive+0x176>
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b01      	cmp	r3, #1
 8003734:	d113      	bne.n	800375e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d119      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x1b8>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d014      	beq.n	80037a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	b292      	uxth	r2, r2
 8003782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800379c:	2301      	movs	r3, #1
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a0:	f7fe fd0e 	bl	80021c0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d807      	bhi.n	80037c0 <HAL_SPI_TransmitReceive+0x1d8>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d003      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037be:	e0a7      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1a6      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x130>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1a1      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x130>
 80037d4:	e07c      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x1fc>
 80037de:	8b7b      	ldrh	r3, [r7, #26]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d16b      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380a:	e057      	b.n	80038bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d11c      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x26c>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d017      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x26c>
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d114      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d119      	bne.n	8003896 <HAL_SPI_TransmitReceive+0x2ae>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d014      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003892:	2301      	movs	r3, #1
 8003894:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003896:	f7fe fc93 	bl	80021c0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d803      	bhi.n	80038ae <HAL_SPI_TransmitReceive+0x2c6>
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d102      	bne.n	80038b4 <HAL_SPI_TransmitReceive+0x2cc>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038ba:	e029      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1a2      	bne.n	800380c <HAL_SPI_TransmitReceive+0x224>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d19d      	bne.n	800380c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f917 	bl	8003b08 <SPI_EndRxTxTransaction>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038ec:	e010      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	e000      	b.n	8003910 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800390e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003924:	4618      	mov	r0, r3
 8003926:	3730      	adds	r7, #48	; 0x30
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800393c:	f7fe fc40 	bl	80021c0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	4413      	add	r3, r2
 800394a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800394c:	f7fe fc38 	bl	80021c0 <HAL_GetTick>
 8003950:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	015b      	lsls	r3, r3, #5
 8003958:	0d1b      	lsrs	r3, r3, #20
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	e054      	b.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d050      	beq.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800396c:	f7fe fc28 	bl	80021c0 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	d902      	bls.n	8003982 <SPI_WaitFlagStateUntilTimeout+0x56>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13d      	bne.n	80039fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d111      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	d004      	beq.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d107      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d10f      	bne.n	80039ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e017      	b.n	8003a2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d19b      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000038 	.word	0x20000038

08003a3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a50:	d111      	bne.n	8003a76 <SPI_EndRxTransaction+0x3a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d004      	beq.n	8003a66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d107      	bne.n	8003a76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7e:	d12a      	bne.n	8003ad6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d012      	beq.n	8003ab0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ff49 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02d      	beq.n	8003afc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e026      	b.n	8003afe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2101      	movs	r1, #1
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff ff36 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01a      	beq.n	8003afc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e013      	b.n	8003afe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2101      	movs	r1, #1
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff ff23 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e000      	b.n	8003afe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <SPI_EndRxTxTransaction+0x7c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <SPI_EndRxTxTransaction+0x80>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0d5b      	lsrs	r3, r3, #21
 8003b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b32:	d112      	bne.n	8003b5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f7ff fef4 	bl	800392c <SPI_WaitFlagStateUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e00f      	b.n	8003b7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d0f2      	beq.n	8003b5a <SPI_EndRxTxTransaction+0x52>
 8003b74:	e000      	b.n	8003b78 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b76:	bf00      	nop
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000038 	.word	0x20000038
 8003b88:	165e9f81 	.word	0x165e9f81

08003b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e03f      	b.n	8003c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fc4a 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f929 	bl	8003e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b08a      	sub	sp, #40	; 0x28
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d17c      	bne.n	8003d40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_UART_Transmit+0x2c>
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e075      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Transmit+0x3e>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e06e      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2221      	movs	r2, #33	; 0x21
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7a:	f7fe faa1 	bl	80021c0 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c94:	d108      	bne.n	8003ca8 <HAL_UART_Transmit+0x82>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e003      	b.n	8003cb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cb8:	e02a      	b.n	8003d10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f840 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e036      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3302      	adds	r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e007      	b.n	8003d02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1cf      	bne.n	8003cba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	; 0x40
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f810 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e006      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b090      	sub	sp, #64	; 0x40
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	e050      	b.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d04c      	beq.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	f7fe fa29 	bl	80021c0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d241      	bcs.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dce:	623a      	str	r2, [r7, #32]
 8003dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	69f9      	ldr	r1, [r7, #28]
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00f      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d09f      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3740      	adds	r7, #64	; 0x40
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	b09f      	sub	sp, #124	; 0x7c
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3e:	68d9      	ldr	r1, [r3, #12]
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	ea40 0301 	orr.w	r3, r0, r1
 8003e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e6c:	f021 010c 	bic.w	r1, r1, #12
 8003e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e76:	430b      	orrs	r3, r1
 8003e78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e86:	6999      	ldr	r1, [r3, #24]
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	ea40 0301 	orr.w	r3, r0, r1
 8003e90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4bc5      	ldr	r3, [pc, #788]	; (80041ac <UART_SetConfig+0x384>)
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d004      	beq.n	8003ea6 <UART_SetConfig+0x7e>
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4bc3      	ldr	r3, [pc, #780]	; (80041b0 <UART_SetConfig+0x388>)
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d103      	bne.n	8003eae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea6:	f7ff f8b5 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 8003eaa:	6778      	str	r0, [r7, #116]	; 0x74
 8003eac:	e002      	b.n	8003eb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eae:	f7ff f89d 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8003eb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	f040 80b6 	bne.w	800402c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	f04f 0500 	mov.w	r5, #0
 8003ec8:	4622      	mov	r2, r4
 8003eca:	462b      	mov	r3, r5
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	6439      	str	r1, [r7, #64]	; 0x40
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ed8:	1912      	adds	r2, r2, r4
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	00d9      	lsls	r1, r3, #3
 8003ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eec:	00d0      	lsls	r0, r2, #3
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	1911      	adds	r1, r2, r4
 8003ef4:	6639      	str	r1, [r7, #96]	; 0x60
 8003ef6:	416b      	adcs	r3, r5
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	1891      	adds	r1, r2, r2
 8003f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f08:	415b      	adcs	r3, r3
 8003f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f14:	f7fc fdb2 	bl	8000a7c <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4ba5      	ldr	r3, [pc, #660]	; (80041b4 <UART_SetConfig+0x38c>)
 8003f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	011e      	lsls	r6, r3, #4
 8003f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f28:	461c      	mov	r4, r3
 8003f2a:	f04f 0500 	mov.w	r5, #0
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	6339      	str	r1, [r7, #48]	; 0x30
 8003f36:	415b      	adcs	r3, r3
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f3e:	1912      	adds	r2, r2, r4
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	00d9      	lsls	r1, r3, #3
 8003f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f52:	00d0      	lsls	r0, r2, #3
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	1911      	adds	r1, r2, r4
 8003f5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f5c:	416b      	adcs	r3, r5
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	1891      	adds	r1, r2, r2
 8003f6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f6e:	415b      	adcs	r3, r3
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f7a:	f7fc fd7f 	bl	8000a7c <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4b8c      	ldr	r3, [pc, #560]	; (80041b4 <UART_SetConfig+0x38c>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a87      	ldr	r2, [pc, #540]	; (80041b4 <UART_SetConfig+0x38c>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fa4:	441e      	add	r6, r3
 8003fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	1894      	adds	r4, r2, r2
 8003fb4:	623c      	str	r4, [r7, #32]
 8003fb6:	415b      	adcs	r3, r3
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fbe:	1812      	adds	r2, r2, r0
 8003fc0:	eb41 0303 	adc.w	r3, r1, r3
 8003fc4:	f04f 0400 	mov.w	r4, #0
 8003fc8:	f04f 0500 	mov.w	r5, #0
 8003fcc:	00dd      	lsls	r5, r3, #3
 8003fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fd2:	00d4      	lsls	r4, r2, #3
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	1814      	adds	r4, r2, r0
 8003fda:	653c      	str	r4, [r7, #80]	; 0x50
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	61b9      	str	r1, [r7, #24]
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ffa:	f7fc fd3f 	bl	8000a7c <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <UART_SetConfig+0x38c>)
 8004004:	fba3 1302 	umull	r1, r3, r3, r2
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	2164      	movs	r1, #100	; 0x64
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	3332      	adds	r3, #50	; 0x32
 8004016:	4a67      	ldr	r2, [pc, #412]	; (80041b4 <UART_SetConfig+0x38c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	f003 0207 	and.w	r2, r3, #7
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4432      	add	r2, r6
 8004028:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800402a:	e0b9      	b.n	80041a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	461c      	mov	r4, r3
 8004030:	f04f 0500 	mov.w	r5, #0
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	1891      	adds	r1, r2, r2
 800403a:	6139      	str	r1, [r7, #16]
 800403c:	415b      	adcs	r3, r3
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004044:	1912      	adds	r2, r2, r4
 8004046:	eb45 0303 	adc.w	r3, r5, r3
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004058:	00d0      	lsls	r0, r2, #3
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	eb12 0804 	adds.w	r8, r2, r4
 8004062:	eb43 0905 	adc.w	r9, r3, r5
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4618      	mov	r0, r3
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	008b      	lsls	r3, r1, #2
 800407a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800407e:	0082      	lsls	r2, r0, #2
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc fcfa 	bl	8000a7c <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <UART_SetConfig+0x38c>)
 800408e:	fba3 2302 	umull	r2, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	011e      	lsls	r6, r3, #4
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	4618      	mov	r0, r3
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	1894      	adds	r4, r2, r2
 80040a4:	60bc      	str	r4, [r7, #8]
 80040a6:	415b      	adcs	r3, r3
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ae:	1812      	adds	r2, r2, r0
 80040b0:	eb41 0303 	adc.w	r3, r1, r3
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	f04f 0500 	mov.w	r5, #0
 80040bc:	00dd      	lsls	r5, r3, #3
 80040be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c2:	00d4      	lsls	r4, r2, #3
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	1814      	adds	r4, r2, r0
 80040ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80040cc:	414b      	adcs	r3, r1
 80040ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f04f 0100 	mov.w	r1, #0
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	008b      	lsls	r3, r1, #2
 80040e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040e8:	0082      	lsls	r2, r0, #2
 80040ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040ee:	f7fc fcc5 	bl	8000a7c <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <UART_SetConfig+0x38c>)
 80040f8:	fba3 1302 	umull	r1, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3332      	adds	r3, #50	; 0x32
 800410a:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <UART_SetConfig+0x38c>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004116:	441e      	add	r6, r3
 8004118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411a:	4618      	mov	r0, r3
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	1894      	adds	r4, r2, r2
 8004126:	603c      	str	r4, [r7, #0]
 8004128:	415b      	adcs	r3, r3
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004130:	1812      	adds	r2, r2, r0
 8004132:	eb41 0303 	adc.w	r3, r1, r3
 8004136:	f04f 0400 	mov.w	r4, #0
 800413a:	f04f 0500 	mov.w	r5, #0
 800413e:	00dd      	lsls	r5, r3, #3
 8004140:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004144:	00d4      	lsls	r4, r2, #3
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	eb12 0a00 	adds.w	sl, r2, r0
 800414e:	eb43 0b01 	adc.w	fp, r3, r1
 8004152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	008b      	lsls	r3, r1, #2
 8004166:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800416a:	0082      	lsls	r2, r0, #2
 800416c:	4650      	mov	r0, sl
 800416e:	4659      	mov	r1, fp
 8004170:	f7fc fc84 	bl	8000a7c <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <UART_SetConfig+0x38c>)
 800417a:	fba3 1302 	umull	r1, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2164      	movs	r1, #100	; 0x64
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <UART_SetConfig+0x38c>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	f003 020f 	and.w	r2, r3, #15
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4432      	add	r2, r6
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	377c      	adds	r7, #124	; 0x7c
 80041a4:	46bd      	mov	sp, r7
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	bf00      	nop
 80041ac:	40011000 	.word	0x40011000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80041bc:	4904      	ldr	r1, [pc, #16]	; (80041d0 <MX_FATFS_Init+0x18>)
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <MX_FATFS_Init+0x1c>)
 80041c0:	f002 fd18 	bl	8006bf4 <FATFS_LinkDriver>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <MX_FATFS_Init+0x20>)
 80041ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	200022a0 	.word	0x200022a0
 80041d4:	20000048 	.word	0x20000048
 80041d8:	200022a4 	.word	0x200022a4

080041dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80041e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <USER_initialize+0x24>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <USER_initialize+0x24>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000045 	.word	0x20000045

08004214 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <USER_status+0x24>)
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <USER_status+0x24>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000045 	.word	0x20000045

0800423c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800424c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800426a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	603a      	str	r2, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	460b      	mov	r3, r1
 8004286:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
    return res;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = SPI_Flash_Driver.disk_status();
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <disk_status+0x20>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4798      	blx	r3
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]

  return stat;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	080081c0 	.word	0x080081c0

080042c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]

  stat = SPI_Flash_Driver.disk_initialize();
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <disk_initialize+0x24>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4798      	blx	r3
 80042d4:	4603      	mov	r3, r0
 80042d6:	73fb      	strb	r3, [r7, #15]

  return stat;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	080081c0 	.word	0x080081c0

080042e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	4603      	mov	r3, r0
 80042f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_read(buff, sector, count);
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <disk_read+0x2c>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	4798      	blx	r3
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
  return res;
 8004308:	7dfb      	ldrb	r3, [r7, #23]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	080081c0 	.word	0x080081c0

08004318 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4603      	mov	r3, r0
 8004326:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = SPI_Flash_Driver.disk_write(buff, sector, count);
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <disk_write+0x2c>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	4798      	blx	r3
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]

  return res;
 8004338:	7dfb      	ldrb	r3, [r7, #23]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	080081c0 	.word	0x080081c0

08004348 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	603a      	str	r2, [r7, #0]
 8004352:	71fb      	strb	r3, [r7, #7]
 8004354:	460b      	mov	r3, r1
 8004356:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = SPI_Flash_Driver.disk_ioctl(cmd, buff);
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <disk_ioctl+0x2c>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	79ba      	ldrb	r2, [r7, #6]
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	4610      	mov	r0, r2
 8004362:	4798      	blx	r3
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
  return res;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	080081c0 	.word	0x080081c0

08004378 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3301      	adds	r3, #1
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004388:	89fb      	ldrh	r3, [r7, #14]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	b21a      	sxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b21b      	sxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	b21b      	sxth	r3, r3
 8004398:	81fb      	strh	r3, [r7, #14]
	return rv;
 800439a:	89fb      	ldrh	r3, [r7, #14]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3303      	adds	r3, #3
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	3202      	adds	r2, #2
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	3201      	adds	r2, #1
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
	return rv;
 80043e0:	68fb      	ldr	r3, [r7, #12]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	887a      	ldrh	r2, [r7, #2]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	1c53      	adds	r3, r2, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	6179      	str	r1, [r7, #20]
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f1      	bne.n	8004496 <mem_cpy+0x1a>
	}
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	617a      	str	r2, [r7, #20]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3b01      	subs	r3, #1
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f3      	bne.n	80044ce <mem_set+0x10>
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	61fa      	str	r2, [r7, #28]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	61ba      	str	r2, [r7, #24]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	1acb      	subs	r3, r1, r3
 8004520:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3b01      	subs	r3, #1
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <mem_cmp+0x40>
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0eb      	beq.n	800450c <mem_cmp+0x18>

	return r;
 8004534:	697b      	ldr	r3, [r7, #20]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800454c:	e002      	b.n	8004554 <chk_chr+0x12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3301      	adds	r3, #1
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <chk_chr+0x26>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4293      	cmp	r3, r2
 8004566:	d1f2      	bne.n	800454e <chk_chr+0xc>
	return *str;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	781b      	ldrb	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e029      	b.n	80045e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <chk_lock+0xb4>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01d      	beq.n	80045d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800459a:	4a24      	ldr	r2, [pc, #144]	; (800462c <chk_lock+0xb4>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	4413      	add	r3, r2
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d116      	bne.n	80045da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <chk_lock+0xb4>)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045bc:	429a      	cmp	r2, r3
 80045be:	d10c      	bne.n	80045da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045c0:	4a1a      	ldr	r2, [pc, #104]	; (800462c <chk_lock+0xb4>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	3308      	adds	r3, #8
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d102      	bne.n	80045da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045d4:	e007      	b.n	80045e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d9d2      	bls.n	800458c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d109      	bne.n	8004600 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <chk_lock+0x80>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d101      	bne.n	80045fc <chk_lock+0x84>
 80045f8:	2300      	movs	r3, #0
 80045fa:	e010      	b.n	800461e <chk_lock+0xa6>
 80045fc:	2312      	movs	r3, #18
 80045fe:	e00e      	b.n	800461e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <chk_lock+0xa0>
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <chk_lock+0xb4>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4413      	add	r3, r2
 800460e:	330c      	adds	r3, #12
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d101      	bne.n	800461c <chk_lock+0xa4>
 8004618:	2310      	movs	r3, #16
 800461a:	e000      	b.n	800461e <chk_lock+0xa6>
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000100 	.word	0x20000100

08004630 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e002      	b.n	8004642 <enq_lock+0x12>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3301      	adds	r3, #1
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d806      	bhi.n	8004656 <enq_lock+0x26>
 8004648:	4a09      	ldr	r2, [pc, #36]	; (8004670 <enq_lock+0x40>)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f2      	bne.n	800463c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b02      	cmp	r3, #2
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000100 	.word	0x20000100

08004674 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e01f      	b.n	80046c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004684:	4a41      	ldr	r2, [pc, #260]	; (800478c <inc_lock+0x118>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d113      	bne.n	80046be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <inc_lock+0x118>)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4413      	add	r3, r2
 800469e:	3304      	adds	r3, #4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d109      	bne.n	80046be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80046aa:	4a38      	ldr	r2, [pc, #224]	; (800478c <inc_lock+0x118>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4413      	add	r3, r2
 80046b2:	3308      	adds	r3, #8
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d006      	beq.n	80046cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d9dc      	bls.n	8004684 <inc_lock+0x10>
 80046ca:	e000      	b.n	80046ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80046cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d132      	bne.n	800473a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e002      	b.n	80046e0 <inc_lock+0x6c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d806      	bhi.n	80046f4 <inc_lock+0x80>
 80046e6:	4a29      	ldr	r2, [pc, #164]	; (800478c <inc_lock+0x118>)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f2      	bne.n	80046da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d101      	bne.n	80046fe <inc_lock+0x8a>
 80046fa:	2300      	movs	r3, #0
 80046fc:	e040      	b.n	8004780 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4922      	ldr	r1, [pc, #136]	; (800478c <inc_lock+0x118>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	440b      	add	r3, r1
 800470a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	491e      	ldr	r1, [pc, #120]	; (800478c <inc_lock+0x118>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	440b      	add	r3, r1
 8004718:	3304      	adds	r3, #4
 800471a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	491a      	ldr	r1, [pc, #104]	; (800478c <inc_lock+0x118>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	440b      	add	r3, r1
 8004728:	3308      	adds	r3, #8
 800472a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <inc_lock+0x118>)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	4413      	add	r3, r2
 8004734:	330c      	adds	r3, #12
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <inc_lock+0xe0>
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <inc_lock+0x118>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	330c      	adds	r3, #12
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <inc_lock+0xe0>
 8004750:	2300      	movs	r3, #0
 8004752:	e015      	b.n	8004780 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d108      	bne.n	800476c <inc_lock+0xf8>
 800475a:	4a0c      	ldr	r2, [pc, #48]	; (800478c <inc_lock+0x118>)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4413      	add	r3, r2
 8004762:	330c      	adds	r3, #12
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	e001      	b.n	8004770 <inc_lock+0xfc>
 800476c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004770:	4906      	ldr	r1, [pc, #24]	; (800478c <inc_lock+0x118>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	440b      	add	r3, r1
 8004778:	330c      	adds	r3, #12
 800477a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3301      	adds	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000100 	.word	0x20000100

08004790 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d825      	bhi.n	80047f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80047a4:	4a17      	ldr	r2, [pc, #92]	; (8004804 <dec_lock+0x74>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4413      	add	r3, r2
 80047ac:	330c      	adds	r3, #12
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b8:	d101      	bne.n	80047be <dec_lock+0x2e>
 80047ba:	2300      	movs	r3, #0
 80047bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <dec_lock+0x3a>
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <dec_lock+0x74>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4413      	add	r3, r2
 80047d2:	330c      	adds	r3, #12
 80047d4:	89fa      	ldrh	r2, [r7, #14]
 80047d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047d8:	89fb      	ldrh	r3, [r7, #14]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <dec_lock+0x5a>
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <dec_lock+0x74>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	737b      	strb	r3, [r7, #13]
 80047ee:	e001      	b.n	80047f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047f0:	2302      	movs	r3, #2
 80047f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80047f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000100 	.word	0x20000100

08004808 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e010      	b.n	8004838 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004816:	4a0d      	ldr	r2, [pc, #52]	; (800484c <clear_lock+0x44>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d105      	bne.n	8004832 <clear_lock+0x2a>
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <clear_lock+0x44>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d9eb      	bls.n	8004816 <clear_lock+0xe>
	}
}
 800483e:	bf00      	nop
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	20000100 	.word	0x20000100

08004850 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d034      	beq.n	80048ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7858      	ldrb	r0, [r3, #1]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004874:	2301      	movs	r3, #1
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	f7ff fd4e 	bl	8004318 <disk_write>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e022      	b.n	80048ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	1ad2      	subs	r2, r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d217      	bcs.n	80048ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	789b      	ldrb	r3, [r3, #2]
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e010      	b.n	80048c8 <sync_window+0x78>
					wsect += fs->fsize;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4413      	add	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	7858      	ldrb	r0, [r3, #1]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048ba:	2301      	movs	r3, #1
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	f7ff fd2b 	bl	8004318 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d8eb      	bhi.n	80048a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d01b      	beq.n	8004928 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffad 	bl	8004850 <sync_window>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d113      	bne.n	8004928 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7858      	ldrb	r0, [r3, #1]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800490a:	2301      	movs	r3, #1
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	f7ff fceb 	bl	80042e8 <disk_read>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff87 	bl	8004850 <sync_window>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d159      	bne.n	8004a00 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d149      	bne.n	80049e8 <sync_fs+0xb4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	791b      	ldrb	r3, [r3, #4]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d145      	bne.n	80049e8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	899b      	ldrh	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	2100      	movs	r1, #0
 800496a:	f7ff fda8 	bl	80044be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3334      	adds	r3, #52	; 0x34
 8004972:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004976:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd37 	bl	80043ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3334      	adds	r3, #52	; 0x34
 8004984:	4921      	ldr	r1, [pc, #132]	; (8004a0c <sync_fs+0xd8>)
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fd4c 	bl	8004424 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3334      	adds	r3, #52	; 0x34
 8004990:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004994:	491e      	ldr	r1, [pc, #120]	; (8004a10 <sync_fs+0xdc>)
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fd44 	bl	8004424 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3334      	adds	r3, #52	; 0x34
 80049a0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7ff fd3a 	bl	8004424 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3334      	adds	r3, #52	; 0x34
 80049b4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f7ff fd30 	bl	8004424 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7858      	ldrb	r0, [r3, #1]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	2301      	movs	r3, #1
 80049de:	f7ff fc9b 	bl	8004318 <disk_write>
			fs->fsi_flag = 0;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fca9 	bl	8004348 <disk_ioctl>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <sync_fs+0xcc>
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	41615252 	.word	0x41615252
 8004a10:	61417272 	.word	0x61417272

08004a14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3b02      	subs	r3, #2
 8004a22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	3b02      	subs	r3, #2
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d301      	bcc.n	8004a34 <clust2sect+0x20>
 8004a30:	2300      	movs	r3, #0
 8004a32:	e008      	b.n	8004a46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	895b      	ldrh	r3, [r3, #10]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	fb03 f202 	mul.w	r2, r3, r2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	4413      	add	r3, r2
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d904      	bls.n	8004a72 <get_fat+0x20>
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004a72:	2301      	movs	r3, #1
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e0bb      	b.n	8004bf0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	f000 8083 	beq.w	8004b8e <get_fat+0x13c>
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	f300 80a7 	bgt.w	8004bdc <get_fat+0x18a>
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d002      	beq.n	8004a98 <get_fat+0x46>
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d056      	beq.n	8004b44 <get_fat+0xf2>
 8004a96:	e0a1      	b.n	8004bdc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	899b      	ldrh	r3, [r3, #12]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6938      	ldr	r0, [r7, #16]
 8004abc:	f7ff ff0c 	bl	80048d8 <move_window>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 808d 	bne.w	8004be2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	60fa      	str	r2, [r7, #12]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	8992      	ldrh	r2, [r2, #12]
 8004ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad6:	fb02 f201 	mul.w	r2, r2, r1
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ae4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	899b      	ldrh	r3, [r3, #12]
 8004aee:	4619      	mov	r1, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004af6:	4413      	add	r3, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	6938      	ldr	r0, [r7, #16]
 8004afc:	f7ff feec 	bl	80048d8 <move_window>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d16f      	bne.n	8004be6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	899b      	ldrh	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b12:	fb02 f201 	mul.w	r2, r2, r1
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <get_fat+0xe8>
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	e002      	b.n	8004b40 <get_fat+0xee>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b40:	617b      	str	r3, [r7, #20]
			break;
 8004b42:	e055      	b.n	8004bf0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	899b      	ldrh	r3, [r3, #12]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	4619      	mov	r1, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b58:	4413      	add	r3, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6938      	ldr	r0, [r7, #16]
 8004b5e:	f7ff febb 	bl	80048d8 <move_window>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d140      	bne.n	8004bea <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	8992      	ldrh	r2, [r2, #12]
 8004b76:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b7a:	fb02 f200 	mul.w	r2, r2, r0
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	440b      	add	r3, r1
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fbf8 	bl	8004378 <ld_word>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	617b      	str	r3, [r7, #20]
			break;
 8004b8c:	e030      	b.n	8004bf0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	899b      	ldrh	r3, [r3, #12]
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6938      	ldr	r0, [r7, #16]
 8004ba8:	f7ff fe96 	bl	80048d8 <move_window>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d11d      	bne.n	8004bee <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	8992      	ldrh	r2, [r2, #12]
 8004bc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bc4:	fb02 f200 	mul.w	r2, r2, r0
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fbeb 	bl	80043a8 <ld_dword>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bd8:	617b      	str	r3, [r7, #20]
			break;
 8004bda:	e009      	b.n	8004bf0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e006      	b.n	8004bf0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004be2:	bf00      	nop
 8004be4:	e004      	b.n	8004bf0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bee:	bf00      	nop
		}
	}

	return val;
 8004bf0:	697b      	ldr	r3, [r7, #20]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004bfa:	b590      	push	{r4, r7, lr}
 8004bfc:	b089      	sub	sp, #36	; 0x24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004c06:	2302      	movs	r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f240 8102 	bls.w	8004e16 <put_fat+0x21c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	f080 80fc 	bcs.w	8004e16 <put_fat+0x21c>
		switch (fs->fs_type) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	f000 80b6 	beq.w	8004d94 <put_fat+0x19a>
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	f300 80fd 	bgt.w	8004e28 <put_fat+0x22e>
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d003      	beq.n	8004c3a <put_fat+0x40>
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f000 8083 	beq.w	8004d3e <put_fat+0x144>
 8004c38:	e0f6      	b.n	8004e28 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	899b      	ldrh	r3, [r3, #12]
 8004c50:	4619      	mov	r1, r3
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c58:	4413      	add	r3, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff fe3b 	bl	80048d8 <move_window>
 8004c62:	4603      	mov	r3, r0
 8004c64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 80d6 	bne.w	8004e1a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	61ba      	str	r2, [r7, #24]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	8992      	ldrh	r2, [r2, #12]
 8004c7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c82:	fb02 f200 	mul.w	r2, r2, r0
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	440b      	add	r3, r1
 8004c8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <put_fat+0xb8>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	b25a      	sxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e001      	b.n	8004cb6 <put_fat+0xbc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	899b      	ldrh	r3, [r3, #12]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff fdff 	bl	80048d8 <move_window>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cde:	7ffb      	ldrb	r3, [r7, #31]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 809c 	bne.w	8004e1e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	899b      	ldrh	r3, [r3, #12]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cf8:	fb02 f200 	mul.w	r2, r2, r0
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	440b      	add	r3, r1
 8004d00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <put_fat+0x11a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e00e      	b.n	8004d32 <put_fat+0x138>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	f023 030f 	bic.w	r3, r3, #15
 8004d1e:	b25a      	sxtb	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	70da      	strb	r2, [r3, #3]
			break;
 8004d3c:	e074      	b.n	8004e28 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	899b      	ldrh	r3, [r3, #12]
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d52:	4413      	add	r3, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fdbe 	bl	80048d8 <move_window>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d15d      	bne.n	8004e22 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	8992      	ldrh	r2, [r2, #12]
 8004d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d78:	fb02 f200 	mul.w	r2, r2, r0
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	440b      	add	r3, r1
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	b292      	uxth	r2, r2
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fb31 	bl	80043ee <st_word>
			fs->wflag = 1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	70da      	strb	r2, [r3, #3]
			break;
 8004d92:	e049      	b.n	8004e28 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	899b      	ldrh	r3, [r3, #12]
 8004d9c:	089b      	lsrs	r3, r3, #2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004da8:	4413      	add	r3, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fd93 	bl	80048d8 <move_window>
 8004db2:	4603      	mov	r3, r0
 8004db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d134      	bne.n	8004e26 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	8992      	ldrh	r2, [r2, #12]
 8004dd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dd4:	fb02 f200 	mul.w	r2, r2, r0
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fae3 	bl	80043a8 <ld_dword>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004de8:	4323      	orrs	r3, r4
 8004dea:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	8992      	ldrh	r2, [r2, #12]
 8004dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004dfe:	fb02 f200 	mul.w	r2, r2, r0
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fb0b 	bl	8004424 <st_dword>
			fs->wflag = 1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	70da      	strb	r2, [r3, #3]
			break;
 8004e14:	e008      	b.n	8004e28 <put_fat+0x22e>
		}
	}
 8004e16:	bf00      	nop
 8004e18:	e006      	b.n	8004e28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004e26:	bf00      	nop
	return res;
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3724      	adds	r7, #36	; 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd90      	pop	{r4, r7, pc}

08004e32 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b088      	sub	sp, #32
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d904      	bls.n	8004e58 <remove_chain+0x26>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d301      	bcc.n	8004e5c <remove_chain+0x2a>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e04b      	b.n	8004ef4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	69b8      	ldr	r0, [r7, #24]
 8004e6a:	f7ff fec6 	bl	8004bfa <put_fat>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004e72:	7ffb      	ldrb	r3, [r7, #31]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <remove_chain+0x4a>
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
 8004e7a:	e03b      	b.n	8004ef4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fde7 	bl	8004a52 <get_fat>
 8004e84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d031      	beq.n	8004ef0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <remove_chain+0x64>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e02e      	b.n	8004ef4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d101      	bne.n	8004ea2 <remove_chain+0x70>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e028      	b.n	8004ef4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	69b8      	ldr	r0, [r7, #24]
 8004ea8:	f7ff fea7 	bl	8004bfa <put_fat>
 8004eac:	4603      	mov	r3, r0
 8004eae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004eb0:	7ffb      	ldrb	r3, [r7, #31]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <remove_chain+0x88>
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
 8004eb8:	e01c      	b.n	8004ef4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	3b02      	subs	r3, #2
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d20b      	bcs.n	8004ee0 <remove_chain+0xae>
			fs->free_clst++;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	791b      	ldrb	r3, [r3, #4]
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d3c6      	bcc.n	8004e7c <remove_chain+0x4a>
 8004eee:	e000      	b.n	8004ef2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ef0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <create_chain+0x2c>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d31b      	bcc.n	8004f60 <create_chain+0x64>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e018      	b.n	8004f60 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fd8e 	bl	8004a52 <get_fat>
 8004f36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d801      	bhi.n	8004f42 <create_chain+0x46>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e070      	b.n	8005024 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d101      	bne.n	8004f4e <create_chain+0x52>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	e06a      	b.n	8005024 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d201      	bcs.n	8004f5c <create_chain+0x60>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	e063      	b.n	8005024 <create_chain+0x128>
		scl = clst;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d307      	bcc.n	8004f84 <create_chain+0x88>
				ncl = 2;
 8004f74:	2302      	movs	r3, #2
 8004f76:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d901      	bls.n	8004f84 <create_chain+0x88>
 8004f80:	2300      	movs	r3, #0
 8004f82:	e04f      	b.n	8005024 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fd63 	bl	8004a52 <get_fat>
 8004f8c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00e      	beq.n	8004fb2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d003      	beq.n	8004fa2 <create_chain+0xa6>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d101      	bne.n	8004fa6 <create_chain+0xaa>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	e03e      	b.n	8005024 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d1da      	bne.n	8004f64 <create_chain+0x68>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e038      	b.n	8005024 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004fb2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb8:	69f9      	ldr	r1, [r7, #28]
 8004fba:	6938      	ldr	r0, [r7, #16]
 8004fbc:	f7ff fe1d 	bl	8004bfa <put_fat>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <create_chain+0xe2>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	6938      	ldr	r0, [r7, #16]
 8004fd6:	f7ff fe10 	bl	8004bfa <put_fat>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <create_chain+0x116>
		fs->last_clst = ncl;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	3b02      	subs	r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d804      	bhi.n	8005002 <create_chain+0x106>
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	791b      	ldrb	r3, [r3, #4]
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	711a      	strb	r2, [r3, #4]
 8005010:	e007      	b.n	8005022 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d102      	bne.n	800501e <create_chain+0x122>
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e000      	b.n	8005020 <create_chain+0x124>
 800501e:	2301      	movs	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005022:	69fb      	ldr	r3, [r7, #28]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	3304      	adds	r3, #4
 8005042:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	899b      	ldrh	r3, [r3, #12]
 8005048:	461a      	mov	r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	8952      	ldrh	r2, [r2, #10]
 8005054:	fbb3 f3f2 	udiv	r3, r3, r2
 8005058:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1d1a      	adds	r2, r3, #4
 800505e:	613a      	str	r2, [r7, #16]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <clmt_clust+0x42>
 800506a:	2300      	movs	r3, #0
 800506c:	e010      	b.n	8005090 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	d307      	bcc.n	8005086 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3304      	adds	r3, #4
 8005082:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005084:	e7e9      	b.n	800505a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005086:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
}
 8005090:	4618      	mov	r0, r3
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050b2:	d204      	bcs.n	80050be <dir_sdi+0x22>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80050be:	2302      	movs	r3, #2
 80050c0:	e071      	b.n	80051a6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <dir_sdi+0x46>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d902      	bls.n	80050e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10c      	bne.n	8005102 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	8912      	ldrh	r2, [r2, #8]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d301      	bcc.n	80050f8 <dir_sdi+0x5c>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e056      	b.n	80051a6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	61da      	str	r2, [r3, #28]
 8005100:	e02d      	b.n	800515e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	895b      	ldrh	r3, [r3, #10]
 8005106:	461a      	mov	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	899b      	ldrh	r3, [r3, #12]
 800510c:	fb03 f302 	mul.w	r3, r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005112:	e019      	b.n	8005148 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6979      	ldr	r1, [r7, #20]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fc9a 	bl	8004a52 <get_fat>
 800511e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d101      	bne.n	800512c <dir_sdi+0x90>
 8005128:	2301      	movs	r3, #1
 800512a:	e03c      	b.n	80051a6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d904      	bls.n	800513c <dir_sdi+0xa0>
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	429a      	cmp	r2, r3
 800513a:	d301      	bcc.n	8005140 <dir_sdi+0xa4>
 800513c:	2302      	movs	r3, #2
 800513e:	e032      	b.n	80051a6 <dir_sdi+0x10a>
			ofs -= csz;
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	429a      	cmp	r2, r3
 800514e:	d2e1      	bcs.n	8005114 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f7ff fc5e 	bl	8004a14 <clust2sect>
 8005158:	4602      	mov	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <dir_sdi+0xd4>
 800516c:	2302      	movs	r3, #2
 800516e:	e01a      	b.n	80051a6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	899b      	ldrh	r3, [r3, #12]
 8005178:	4619      	mov	r1, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	899b      	ldrh	r3, [r3, #12]
 8005190:	461a      	mov	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	fbb3 f0f2 	udiv	r0, r3, r2
 8005198:	fb02 f200 	mul.w	r2, r2, r0
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	18ca      	adds	r2, r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	3320      	adds	r3, #32
 80051c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <dir_next+0x28>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051d4:	d301      	bcc.n	80051da <dir_next+0x2c>
 80051d6:	2304      	movs	r3, #4
 80051d8:	e0bb      	b.n	8005352 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	899b      	ldrh	r3, [r3, #12]
 80051de:	461a      	mov	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e6:	fb02 f201 	mul.w	r2, r2, r1
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 809d 	bne.w	800532c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	8912      	ldrh	r2, [r2, #8]
 800520c:	4293      	cmp	r3, r2
 800520e:	f0c0 808d 	bcc.w	800532c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	61da      	str	r2, [r3, #28]
 8005218:	2304      	movs	r3, #4
 800521a:	e09a      	b.n	8005352 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	899b      	ldrh	r3, [r3, #12]
 8005220:	461a      	mov	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	fbb3 f3f2 	udiv	r3, r3, r2
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	8952      	ldrh	r2, [r2, #10]
 800522c:	3a01      	subs	r2, #1
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d17b      	bne.n	800532c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7ff fc08 	bl	8004a52 <get_fat>
 8005242:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d801      	bhi.n	800524e <dir_next+0xa0>
 800524a:	2302      	movs	r3, #2
 800524c:	e081      	b.n	8005352 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d101      	bne.n	800525a <dir_next+0xac>
 8005256:	2301      	movs	r3, #1
 8005258:	e07b      	b.n	8005352 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d359      	bcc.n	8005318 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	61da      	str	r2, [r3, #28]
 8005270:	2304      	movs	r3, #4
 8005272:	e06e      	b.n	8005352 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7ff fe3d 	bl	8004efc <create_chain>
 8005282:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <dir_next+0xe0>
 800528a:	2307      	movs	r3, #7
 800528c:	e061      	b.n	8005352 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <dir_next+0xea>
 8005294:	2302      	movs	r3, #2
 8005296:	e05c      	b.n	8005352 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d101      	bne.n	80052a4 <dir_next+0xf6>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e056      	b.n	8005352 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff fad3 	bl	8004850 <sync_window>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <dir_next+0x106>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04e      	b.n	8005352 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	899b      	ldrh	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	2100      	movs	r1, #0
 80052c2:	f7ff f8fc 	bl	80044be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff fba1 	bl	8004a14 <clust2sect>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
 80052d8:	e012      	b.n	8005300 <dir_next+0x152>
						fs->wflag = 1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff fab5 	bl	8004850 <sync_window>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <dir_next+0x142>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e030      	b.n	8005352 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	3301      	adds	r3, #1
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	895b      	ldrh	r3, [r3, #10]
 8005304:	461a      	mov	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4293      	cmp	r3, r2
 800530a:	d3e6      	bcc.n	80052da <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fb77 	bl	8004a14 <clust2sect>
 8005326:	4602      	mov	r2, r0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	899b      	ldrh	r3, [r3, #12]
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	fbb3 f0f2 	udiv	r0, r3, r2
 8005344:	fb02 f200 	mul.w	r2, r2, r0
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	18ca      	adds	r2, r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800536a:	2100      	movs	r1, #0
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fe95 	bl	800509c <dir_sdi>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d12b      	bne.n	80053d4 <dir_alloc+0x7a>
		n = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff faa6 	bl	80048d8 <move_window>
 800538c:	4603      	mov	r3, r0
 800538e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11d      	bne.n	80053d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2be5      	cmp	r3, #229	; 0xe5
 800539e:	d004      	beq.n	80053aa <dir_alloc+0x50>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d102      	bne.n	80053be <dir_alloc+0x64>
 80053b8:	e00c      	b.n	80053d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80053be:	2101      	movs	r1, #1
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fef4 	bl	80051ae <dir_next>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0d7      	beq.n	8005380 <dir_alloc+0x26>
 80053d0:	e000      	b.n	80053d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80053d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d101      	bne.n	80053de <dir_alloc+0x84>
 80053da:	2307      	movs	r3, #7
 80053dc:	75fb      	strb	r3, [r7, #23]
	return res;
 80053de:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	331a      	adds	r3, #26
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe ffbe 	bl	8004378 <ld_word>
 80053fc:	4603      	mov	r3, r0
 80053fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d109      	bne.n	800541c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe ffb3 	bl	8004378 <ld_word>
 8005412:	4603      	mov	r3, r0
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800541c:	68fb      	ldr	r3, [r7, #12]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	331a      	adds	r3, #26
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	b292      	uxth	r2, r2
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe ffd6 	bl	80043ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d109      	bne.n	800545e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f103 0214 	add.w	r2, r3, #20
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	b29b      	uxth	r3, r3
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7fe ffc8 	bl	80043ee <st_word>
	}
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b086      	sub	sp, #24
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005470:	2304      	movs	r3, #4
 8005472:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800547a:	e03c      	b.n	80054f6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	4619      	mov	r1, r3
 8005482:	6938      	ldr	r0, [r7, #16]
 8005484:	f7ff fa28 	bl	80048d8 <move_window>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d136      	bne.n	8005500 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80054a0:	2304      	movs	r3, #4
 80054a2:	75fb      	strb	r3, [r7, #23]
 80054a4:	e031      	b.n	800550a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	330b      	adds	r3, #11
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b2:	73bb      	strb	r3, [r7, #14]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	7bba      	ldrb	r2, [r7, #14]
 80054b8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2be5      	cmp	r3, #229	; 0xe5
 80054be:	d011      	beq.n	80054e4 <dir_read+0x7e>
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b2e      	cmp	r3, #46	; 0x2e
 80054c4:	d00e      	beq.n	80054e4 <dir_read+0x7e>
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d00b      	beq.n	80054e4 <dir_read+0x7e>
 80054cc:	7bbb      	ldrb	r3, [r7, #14]
 80054ce:	f023 0320 	bic.w	r3, r3, #32
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00f      	beq.n	8005504 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80054e4:	2100      	movs	r1, #0
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fe61 	bl	80051ae <dir_next>
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <dir_read+0xa2>
	while (dp->sect) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1be      	bne.n	800547c <dir_read+0x16>
 80054fe:	e004      	b.n	800550a <dir_read+0xa4>
		if (res != FR_OK) break;
 8005500:	bf00      	nop
 8005502:	e002      	b.n	800550a <dir_read+0xa4>
				break;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <dir_read+0xa4>
		if (res != FR_OK) break;
 8005508:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <dir_read+0xb0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	61da      	str	r2, [r3, #28]
	return res;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800552e:	2100      	movs	r1, #0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fdb3 	bl	800509c <dir_sdi>
 8005536:	4603      	mov	r3, r0
 8005538:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <dir_find+0x24>
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	e03e      	b.n	80055c2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4619      	mov	r1, r3
 800554a:	6938      	ldr	r0, [r7, #16]
 800554c:	f7ff f9c4 	bl	80048d8 <move_window>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d12f      	bne.n	80055ba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <dir_find+0x4e>
 8005568:	2304      	movs	r3, #4
 800556a:	75fb      	strb	r3, [r7, #23]
 800556c:	e028      	b.n	80055c0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	330b      	adds	r3, #11
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800557a:	b2da      	uxtb	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	330b      	adds	r3, #11
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <dir_find+0x86>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a18      	ldr	r0, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3324      	adds	r3, #36	; 0x24
 8005598:	220b      	movs	r2, #11
 800559a:	4619      	mov	r1, r3
 800559c:	f7fe ffaa 	bl	80044f4 <mem_cmp>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80055a6:	2100      	movs	r1, #0
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fe00 	bl	80051ae <dir_next>
 80055ae:	4603      	mov	r3, r0
 80055b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0c5      	beq.n	8005544 <dir_find+0x24>
 80055b8:	e002      	b.n	80055c0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055be:	bf00      	nop

	return res;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80055d8:	2101      	movs	r1, #1
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff febd 	bl	800535a <dir_alloc>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d11c      	bne.n	8005624 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	4619      	mov	r1, r3
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f7ff f971 	bl	80048d8 <move_window>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d111      	bne.n	8005624 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	2220      	movs	r2, #32
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe ff58 	bl	80044be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a18      	ldr	r0, [r3, #32]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3324      	adds	r3, #36	; 0x24
 8005616:	220b      	movs	r2, #11
 8005618:	4619      	mov	r1, r3
 800561a:	f7fe ff2f 	bl	800447c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2201      	movs	r2, #1
 8005622:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04e      	beq.n	80056e4 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800564e:	e021      	b.n	8005694 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	6179      	str	r1, [r7, #20]
 800565a:	4413      	add	r3, r2
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b20      	cmp	r3, #32
 8005664:	d100      	bne.n	8005668 <get_fileinfo+0x3a>
 8005666:	e015      	b.n	8005694 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d101      	bne.n	8005672 <get_fileinfo+0x44>
 800566e:	23e5      	movs	r3, #229	; 0xe5
 8005670:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b09      	cmp	r3, #9
 8005676:	d106      	bne.n	8005686 <get_fileinfo+0x58>
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	613a      	str	r2, [r7, #16]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	4413      	add	r3, r2
 8005682:	222e      	movs	r2, #46	; 0x2e
 8005684:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	613a      	str	r2, [r7, #16]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	4413      	add	r3, r2
 8005690:	7bfa      	ldrb	r2, [r7, #15]
 8005692:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b0a      	cmp	r3, #10
 8005698:	d9da      	bls.n	8005650 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	3309      	adds	r3, #9
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	7ada      	ldrb	r2, [r3, #11]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	331c      	adds	r3, #28
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe fe76 	bl	80043a8 <ld_dword>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	3316      	adds	r3, #22
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe fe6d 	bl	80043a8 <ld_dword>
 80056ce:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	80da      	strh	r2, [r3, #6]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	0c1b      	lsrs	r3, r3, #16
 80056dc:	b29a      	uxth	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	809a      	strh	r2, [r3, #4]
 80056e2:	e000      	b.n	80056e6 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80056e4:	bf00      	nop
}
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005702:	220b      	movs	r2, #11
 8005704:	2120      	movs	r1, #32
 8005706:	68b8      	ldr	r0, [r7, #8]
 8005708:	f7fe fed9 	bl	80044be <mem_set>
	si = i = 0; ni = 8;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	2308      	movs	r3, #8
 8005716:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	61fa      	str	r2, [r7, #28]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005726:	7efb      	ldrb	r3, [r7, #27]
 8005728:	2b20      	cmp	r3, #32
 800572a:	d94e      	bls.n	80057ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800572c:	7efb      	ldrb	r3, [r7, #27]
 800572e:	2b2f      	cmp	r3, #47	; 0x2f
 8005730:	d006      	beq.n	8005740 <create_name+0x54>
 8005732:	7efb      	ldrb	r3, [r7, #27]
 8005734:	2b5c      	cmp	r3, #92	; 0x5c
 8005736:	d110      	bne.n	800575a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005738:	e002      	b.n	8005740 <create_name+0x54>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b2f      	cmp	r3, #47	; 0x2f
 800574a:	d0f6      	beq.n	800573a <create_name+0x4e>
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b5c      	cmp	r3, #92	; 0x5c
 8005756:	d0f0      	beq.n	800573a <create_name+0x4e>
			break;
 8005758:	e038      	b.n	80057cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800575a:	7efb      	ldrb	r3, [r7, #27]
 800575c:	2b2e      	cmp	r3, #46	; 0x2e
 800575e:	d003      	beq.n	8005768 <create_name+0x7c>
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d30c      	bcc.n	8005782 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b0b      	cmp	r3, #11
 800576c:	d002      	beq.n	8005774 <create_name+0x88>
 800576e:	7efb      	ldrb	r3, [r7, #27]
 8005770:	2b2e      	cmp	r3, #46	; 0x2e
 8005772:	d001      	beq.n	8005778 <create_name+0x8c>
 8005774:	2306      	movs	r3, #6
 8005776:	e044      	b.n	8005802 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005778:	2308      	movs	r3, #8
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	230b      	movs	r3, #11
 800577e:	617b      	str	r3, [r7, #20]
			continue;
 8005780:	e022      	b.n	80057c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005782:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005786:	2b00      	cmp	r3, #0
 8005788:	da04      	bge.n	8005794 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800578a:	7efb      	ldrb	r3, [r7, #27]
 800578c:	3b80      	subs	r3, #128	; 0x80
 800578e:	4a1f      	ldr	r2, [pc, #124]	; (800580c <create_name+0x120>)
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005794:	7efb      	ldrb	r3, [r7, #27]
 8005796:	4619      	mov	r1, r3
 8005798:	481d      	ldr	r0, [pc, #116]	; (8005810 <create_name+0x124>)
 800579a:	f7fe fed2 	bl	8004542 <chk_chr>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <create_name+0xbc>
 80057a4:	2306      	movs	r3, #6
 80057a6:	e02c      	b.n	8005802 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80057a8:	7efb      	ldrb	r3, [r7, #27]
 80057aa:	2b60      	cmp	r3, #96	; 0x60
 80057ac:	d905      	bls.n	80057ba <create_name+0xce>
 80057ae:	7efb      	ldrb	r3, [r7, #27]
 80057b0:	2b7a      	cmp	r3, #122	; 0x7a
 80057b2:	d802      	bhi.n	80057ba <create_name+0xce>
 80057b4:	7efb      	ldrb	r3, [r7, #27]
 80057b6:	3b20      	subs	r3, #32
 80057b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	613a      	str	r2, [r7, #16]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	4413      	add	r3, r2
 80057c4:	7efa      	ldrb	r2, [r7, #27]
 80057c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80057c8:	e7a6      	b.n	8005718 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80057ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	441a      	add	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <create_name+0xf4>
 80057dc:	2306      	movs	r3, #6
 80057de:	e010      	b.n	8005802 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2be5      	cmp	r3, #229	; 0xe5
 80057e6:	d102      	bne.n	80057ee <create_name+0x102>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2205      	movs	r2, #5
 80057ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80057ee:	7efb      	ldrb	r3, [r7, #27]
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d801      	bhi.n	80057f8 <create_name+0x10c>
 80057f4:	2204      	movs	r2, #4
 80057f6:	e000      	b.n	80057fa <create_name+0x10e>
 80057f8:	2200      	movs	r2, #0
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	330b      	adds	r3, #11
 80057fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005800:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	080081d4 	.word	0x080081d4
 8005810:	08008164 	.word	0x08008164

08005814 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005828:	e002      	b.n	8005830 <follow_path+0x1c>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b2f      	cmp	r3, #47	; 0x2f
 8005836:	d0f8      	beq.n	800582a <follow_path+0x16>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b5c      	cmp	r3, #92	; 0x5c
 800583e:	d0f4      	beq.n	800582a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2200      	movs	r2, #0
 8005844:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b1f      	cmp	r3, #31
 800584c:	d80a      	bhi.n	8005864 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005856:	2100      	movs	r1, #0
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fc1f 	bl	800509c <dir_sdi>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
 8005862:	e048      	b.n	80058f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005864:	463b      	mov	r3, r7
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff3f 	bl	80056ec <create_name>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d139      	bne.n	80058ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fe51 	bl	8005520 <dir_find>
 800587e:	4603      	mov	r3, r0
 8005880:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005888:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d12c      	bne.n	80058f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d127      	bne.n	80058f0 <follow_path+0xdc>
 80058a0:	2305      	movs	r3, #5
 80058a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80058a4:	e024      	b.n	80058f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d121      	bne.n	80058f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	799b      	ldrb	r3, [r3, #6]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80058bc:	2305      	movs	r3, #5
 80058be:	75fb      	strb	r3, [r7, #23]
 80058c0:	e019      	b.n	80058f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	8992      	ldrh	r2, [r2, #12]
 80058d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80058d4:	fb02 f200 	mul.w	r2, r2, r0
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	440b      	add	r3, r1
 80058dc:	4619      	mov	r1, r3
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fd82 	bl	80053e8 <ld_clust>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058ea:	e7bb      	b.n	8005864 <follow_path+0x50>
			if (res != FR_OK) break;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <follow_path+0xe2>
				break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80058f4:	bf00      	nop
			}
		}
	}

	return res;
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d031      	beq.n	800597a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e002      	b.n	8005924 <get_ldnumber+0x24>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b20      	cmp	r3, #32
 800592a:	d903      	bls.n	8005934 <get_ldnumber+0x34>
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b3a      	cmp	r3, #58	; 0x3a
 8005932:	d1f4      	bne.n	800591e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b3a      	cmp	r3, #58	; 0x3a
 800593a:	d11c      	bne.n	8005976 <get_ldnumber+0x76>
			tp = *path;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	60fa      	str	r2, [r7, #12]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3b30      	subs	r3, #48	; 0x30
 800594c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b09      	cmp	r3, #9
 8005952:	d80e      	bhi.n	8005972 <get_ldnumber+0x72>
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	429a      	cmp	r2, r3
 800595a:	d10a      	bne.n	8005972 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <get_ldnumber+0x72>
					vol = (int)i;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3301      	adds	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	e002      	b.n	800597c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800597a:	693b      	ldr	r3, [r7, #16]
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	70da      	strb	r2, [r3, #3]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f04f 32ff 	mov.w	r2, #4294967295
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fe ff98 	bl	80048d8 <move_window>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <check_fs+0x2a>
 80059ae:	2304      	movs	r3, #4
 80059b0:	e038      	b.n	8005a24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3334      	adds	r3, #52	; 0x34
 80059b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fcdc 	bl	8004378 <ld_word>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <check_fs+0x48>
 80059cc:	2303      	movs	r3, #3
 80059ce:	e029      	b.n	8005a24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059d6:	2be9      	cmp	r3, #233	; 0xe9
 80059d8:	d009      	beq.n	80059ee <check_fs+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059e0:	2beb      	cmp	r3, #235	; 0xeb
 80059e2:	d11e      	bne.n	8005a22 <check_fs+0x9a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80059ea:	2b90      	cmp	r3, #144	; 0x90
 80059ec:	d119      	bne.n	8005a22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3334      	adds	r3, #52	; 0x34
 80059f2:	3336      	adds	r3, #54	; 0x36
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fcd7 	bl	80043a8 <ld_dword>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a00:	4a0a      	ldr	r2, [pc, #40]	; (8005a2c <check_fs+0xa4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d101      	bne.n	8005a0a <check_fs+0x82>
 8005a06:	2300      	movs	r3, #0
 8005a08:	e00c      	b.n	8005a24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3334      	adds	r3, #52	; 0x34
 8005a0e:	3352      	adds	r3, #82	; 0x52
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fcc9 	bl	80043a8 <ld_dword>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a05      	ldr	r2, [pc, #20]	; (8005a30 <check_fs+0xa8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <check_fs+0x9a>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e000      	b.n	8005a24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a22:	2302      	movs	r3, #2
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	00544146 	.word	0x00544146
 8005a30:	33544146 	.word	0x33544146

08005a34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b096      	sub	sp, #88	; 0x58
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff ff59 	bl	8005900 <get_ldnumber>
 8005a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da01      	bge.n	8005a5a <find_volume+0x26>
 8005a56:	230b      	movs	r3, #11
 8005a58:	e265      	b.n	8005f26 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005a5a:	4ab0      	ldr	r2, [pc, #704]	; (8005d1c <find_volume+0x2e8>)
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <find_volume+0x3a>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	e25b      	b.n	8005f26 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01a      	beq.n	8005aba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fc07 	bl	800429c <disk_status>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10c      	bne.n	8005aba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <find_volume+0x82>
 8005aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	e237      	b.n	8005f26 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e235      	b.n	8005f26 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fbf7 	bl	80042c0 <disk_initialize>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e21e      	b.n	8005f26 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <find_volume+0xca>
 8005aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005afa:	230a      	movs	r3, #10
 8005afc:	e213      	b.n	8005f26 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	7858      	ldrb	r0, [r3, #1]
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	330c      	adds	r3, #12
 8005b06:	461a      	mov	r2, r3
 8005b08:	2102      	movs	r1, #2
 8005b0a:	f7fe fc1d 	bl	8004348 <disk_ioctl>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <find_volume+0xe4>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e206      	b.n	8005f26 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	899b      	ldrh	r3, [r3, #12]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d80d      	bhi.n	8005b3e <find_volume+0x10a>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	899b      	ldrh	r3, [r3, #12]
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2a:	d308      	bcc.n	8005b3e <find_volume+0x10a>
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	899b      	ldrh	r3, [r3, #12]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	899b      	ldrh	r3, [r3, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <find_volume+0x10e>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e1f1      	b.n	8005f26 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b4a:	f7ff ff1d 	bl	8005988 <check_fs>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d14b      	bne.n	8005bf4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b60:	e01f      	b.n	8005ba2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005b70:	4413      	add	r3, r2
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	3304      	adds	r3, #4
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <find_volume+0x158>
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	3308      	adds	r3, #8
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fc10 	bl	80043a8 <ld_dword>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	e000      	b.n	8005b8e <find_volume+0x15a>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005b96:	440b      	add	r3, r1
 8005b98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d9dc      	bls.n	8005b62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005ba8:	2300      	movs	r3, #0
 8005baa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <find_volume+0x184>
 8005bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005bc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <find_volume+0x1a6>
 8005bce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bd2:	f7ff fed9 	bl	8005988 <check_fs>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	e000      	b.n	8005bdc <find_volume+0x1a8>
 8005bda:	2303      	movs	r3, #3
 8005bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d905      	bls.n	8005bf4 <find_volume+0x1c0>
 8005be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bea:	3301      	adds	r3, #1
 8005bec:	643b      	str	r3, [r7, #64]	; 0x40
 8005bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d9e1      	bls.n	8005bb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d101      	bne.n	8005c00 <find_volume+0x1cc>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e192      	b.n	8005f26 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d901      	bls.n	8005c0c <find_volume+0x1d8>
 8005c08:	230d      	movs	r3, #13
 8005c0a:	e18c      	b.n	8005f26 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	3334      	adds	r3, #52	; 0x34
 8005c10:	330b      	adds	r3, #11
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fbb0 	bl	8004378 <ld_word>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	899b      	ldrh	r3, [r3, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <find_volume+0x1f4>
 8005c24:	230d      	movs	r3, #13
 8005c26:	e17e      	b.n	8005f26 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	3334      	adds	r3, #52	; 0x34
 8005c2c:	3316      	adds	r3, #22
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fba2 	bl	8004378 <ld_word>
 8005c34:	4603      	mov	r3, r0
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <find_volume+0x218>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	3334      	adds	r3, #52	; 0x34
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe fbaf 	bl	80043a8 <ld_dword>
 8005c4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c50:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d005      	beq.n	8005c70 <find_volume+0x23c>
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	789b      	ldrb	r3, [r3, #2]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d001      	beq.n	8005c70 <find_volume+0x23c>
 8005c6c:	230d      	movs	r3, #13
 8005c6e:	e15a      	b.n	8005f26 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	895b      	ldrh	r3, [r3, #10]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <find_volume+0x270>
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	895b      	ldrh	r3, [r3, #10]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	895b      	ldrh	r3, [r3, #10]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <find_volume+0x274>
 8005ca4:	230d      	movs	r3, #13
 8005ca6:	e13e      	b.n	8005f26 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	3334      	adds	r3, #52	; 0x34
 8005cac:	3311      	adds	r3, #17
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fb62 	bl	8004378 <ld_word>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	891b      	ldrh	r3, [r3, #8]
 8005cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc2:	8992      	ldrh	r2, [r2, #12]
 8005cc4:	0952      	lsrs	r2, r2, #5
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ccc:	fb02 f201 	mul.w	r2, r2, r1
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <find_volume+0x2a8>
 8005cd8:	230d      	movs	r3, #13
 8005cda:	e124      	b.n	8005f26 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	3334      	adds	r3, #52	; 0x34
 8005ce0:	3313      	adds	r3, #19
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fb48 	bl	8004378 <ld_word>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <find_volume+0x2cc>
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	3334      	adds	r3, #52	; 0x34
 8005cf6:	3320      	adds	r3, #32
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fb55 	bl	80043a8 <ld_dword>
 8005cfe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	3334      	adds	r3, #52	; 0x34
 8005d04:	330e      	adds	r3, #14
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fb36 	bl	8004378 <ld_word>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <find_volume+0x2ec>
 8005d16:	230d      	movs	r3, #13
 8005d18:	e105      	b.n	8005f26 <find_volume+0x4f2>
 8005d1a:	bf00      	nop
 8005d1c:	200000f8 	.word	0x200000f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d24:	4413      	add	r3, r2
 8005d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d28:	8911      	ldrh	r1, [r2, #8]
 8005d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d2c:	8992      	ldrh	r2, [r2, #12]
 8005d2e:	0952      	lsrs	r2, r2, #5
 8005d30:	b292      	uxth	r2, r2
 8005d32:	fbb1 f2f2 	udiv	r2, r1, r2
 8005d36:	b292      	uxth	r2, r2
 8005d38:	4413      	add	r3, r2
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d201      	bcs.n	8005d48 <find_volume+0x314>
 8005d44:	230d      	movs	r3, #13
 8005d46:	e0ee      	b.n	8005f26 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d50:	8952      	ldrh	r2, [r2, #10]
 8005d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <find_volume+0x32e>
 8005d5e:	230d      	movs	r3, #13
 8005d60:	e0e1      	b.n	8005f26 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005d62:	2303      	movs	r3, #3
 8005d64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d802      	bhi.n	8005d78 <find_volume+0x344>
 8005d72:	2302      	movs	r3, #2
 8005d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d802      	bhi.n	8005d88 <find_volume+0x354>
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	1c9a      	adds	r2, r3, #2
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d94:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005d96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9a:	441a      	add	r2, r3
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	441a      	add	r2, r3
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005daa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d11e      	bne.n	8005df0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	3334      	adds	r3, #52	; 0x34
 8005db6:	332a      	adds	r3, #42	; 0x2a
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fadd 	bl	8004378 <ld_word>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <find_volume+0x394>
 8005dc4:	230d      	movs	r3, #13
 8005dc6:	e0ae      	b.n	8005f26 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	891b      	ldrh	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <find_volume+0x3a0>
 8005dd0:	230d      	movs	r3, #13
 8005dd2:	e0a8      	b.n	8005f26 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	3334      	adds	r3, #52	; 0x34
 8005dd8:	332c      	adds	r3, #44	; 0x2c
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fae4 	bl	80043a8 <ld_dword>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	647b      	str	r3, [r7, #68]	; 0x44
 8005dee:	e01f      	b.n	8005e30 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	891b      	ldrh	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <find_volume+0x3c8>
 8005df8:	230d      	movs	r3, #13
 8005dfa:	e094      	b.n	8005f26 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e02:	441a      	add	r2, r3
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d103      	bne.n	8005e18 <find_volume+0x3e4>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	e00a      	b.n	8005e2e <find_volume+0x3fa>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	085a      	lsrs	r2, r3, #1
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	899b      	ldrh	r3, [r3, #12]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e42:	8989      	ldrh	r1, [r1, #12]
 8005e44:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d201      	bcs.n	8005e50 <find_volume+0x41c>
 8005e4c:	230d      	movs	r3, #13
 8005e4e:	e06a      	b.n	8005f26 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	615a      	str	r2, [r3, #20]
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d149      	bne.n	8005f02 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	3334      	adds	r3, #52	; 0x34
 8005e72:	3330      	adds	r3, #48	; 0x30
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe fa7f 	bl	8004378 <ld_word>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d140      	bne.n	8005f02 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	3301      	adds	r3, #1
 8005e84:	4619      	mov	r1, r3
 8005e86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e88:	f7fe fd26 	bl	80048d8 <move_window>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d137      	bne.n	8005f02 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	2200      	movs	r2, #0
 8005e96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	3334      	adds	r3, #52	; 0x34
 8005e9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fa69 	bl	8004378 <ld_word>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d127      	bne.n	8005f02 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	3334      	adds	r3, #52	; 0x34
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fa76 	bl	80043a8 <ld_dword>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <find_volume+0x4fc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d11e      	bne.n	8005f02 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	3334      	adds	r3, #52	; 0x34
 8005ec8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fa6b 	bl	80043a8 <ld_dword>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <find_volume+0x500>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d113      	bne.n	8005f02 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	3334      	adds	r3, #52	; 0x34
 8005ede:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe fa60 	bl	80043a8 <ld_dword>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	3334      	adds	r3, #52	; 0x34
 8005ef2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fa56 	bl	80043a8 <ld_dword>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <find_volume+0x504>)
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <find_volume+0x504>)
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <find_volume+0x504>)
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f20:	f7fe fc72 	bl	8004808 <clear_lock>
#endif
	return FR_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3758      	adds	r7, #88	; 0x58
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	41615252 	.word	0x41615252
 8005f34:	61417272 	.word	0x61417272
 8005f38:	200000fc 	.word	0x200000fc

08005f3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f46:	2309      	movs	r3, #9
 8005f48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01c      	beq.n	8005f8a <validate+0x4e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d018      	beq.n	8005f8a <validate+0x4e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d013      	beq.n	8005f8a <validate+0x4e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	889a      	ldrh	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	88db      	ldrh	r3, [r3, #6]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d10c      	bne.n	8005f8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe f990 	bl	800429c <disk_status>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <validate+0x4e>
			res = FR_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <validate+0x5a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	e000      	b.n	8005f98 <validate+0x5c>
 8005f96:	2300      	movs	r3, #0
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	6013      	str	r3, [r2, #0]
	return res;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005fba:	f107 0310 	add.w	r3, r7, #16
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fc9e 	bl	8005900 <get_ldnumber>
 8005fc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da01      	bge.n	8005fd0 <f_mount+0x28>
 8005fcc:	230b      	movs	r3, #11
 8005fce:	e02b      	b.n	8006028 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fd0:	4a17      	ldr	r2, [pc, #92]	; (8006030 <f_mount+0x88>)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005fe0:	69b8      	ldr	r0, [r7, #24]
 8005fe2:	f7fe fc11 	bl	8004808 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	490d      	ldr	r1, [pc, #52]	; (8006030 <f_mount+0x88>)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <f_mount+0x66>
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <f_mount+0x6a>
 800600e:	2300      	movs	r3, #0
 8006010:	e00a      	b.n	8006028 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006012:	f107 010c 	add.w	r1, r7, #12
 8006016:	f107 0308 	add.w	r3, r7, #8
 800601a:	2200      	movs	r2, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fd09 	bl	8005a34 <find_volume>
 8006022:	4603      	mov	r3, r0
 8006024:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006026:	7dfb      	ldrb	r3, [r7, #23]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200000f8 	.word	0x200000f8

08006034 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b098      	sub	sp, #96	; 0x60
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	4613      	mov	r3, r2
 8006040:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <f_open+0x18>
 8006048:	2309      	movs	r3, #9
 800604a:	e1bb      	b.n	80063c4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006052:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006054:	79fa      	ldrb	r2, [r7, #7]
 8006056:	f107 0110 	add.w	r1, r7, #16
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fce8 	bl	8005a34 <find_volume>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800606a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 819f 	bne.w	80063b2 <f_open+0x37e>
		dj.obj.fs = fs;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	f107 0314 	add.w	r3, r7, #20
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fbc7 	bl	8005814 <follow_path>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800608c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006090:	2b00      	cmp	r3, #0
 8006092:	d11a      	bne.n	80060ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006094:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006098:	b25b      	sxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	da03      	bge.n	80060a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800609e:	2306      	movs	r3, #6
 80060a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060a4:	e011      	b.n	80060ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	f107 0314 	add.w	r3, r7, #20
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fa5a 	bl	8004578 <chk_lock>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	f003 031c 	and.w	r3, r3, #28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d07f      	beq.n	80061d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80060d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d10e      	bne.n	8006102 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060e4:	f7fe faa4 	bl	8004630 <enq_lock>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <f_open+0xc8>
 80060ee:	f107 0314 	add.w	r3, r7, #20
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fa69 	bl	80055ca <dir_register>
 80060f8:	4603      	mov	r3, r0
 80060fa:	e000      	b.n	80060fe <f_open+0xca>
 80060fc:	2312      	movs	r3, #18
 80060fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	f043 0308 	orr.w	r3, r3, #8
 8006108:	71fb      	strb	r3, [r7, #7]
 800610a:	e010      	b.n	800612e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800610c:	7ebb      	ldrb	r3, [r7, #26]
 800610e:	f003 0311 	and.w	r3, r3, #17
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <f_open+0xea>
					res = FR_DENIED;
 8006116:	2307      	movs	r3, #7
 8006118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800611c:	e007      	b.n	800612e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <f_open+0xfa>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800612e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d168      	bne.n	8006208 <f_open+0x1d4>
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d063      	beq.n	8006208 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006140:	f7fe f84c 	bl	80041dc <get_fattime>
 8006144:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	330e      	adds	r3, #14
 800614a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe f969 	bl	8004424 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006154:	3316      	adds	r3, #22
 8006156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe f963 	bl	8004424 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	330b      	adds	r3, #11
 8006162:	2220      	movs	r2, #32
 8006164:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff f93b 	bl	80053e8 <ld_clust>
 8006172:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006178:	2200      	movs	r2, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f953 	bl	8005426 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	331c      	adds	r3, #28
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe f94c 	bl	8004424 <st_dword>
					fs->wflag = 1;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2201      	movs	r2, #1
 8006190:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d037      	beq.n	8006208 <f_open+0x1d4>
						dw = fs->winsect;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	2200      	movs	r2, #0
 80061a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fe43 	bl	8004e32 <remove_chain>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80061b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d126      	bne.n	8006208 <f_open+0x1d4>
							res = move_window(fs, dw);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fb8a 	bl	80048d8 <move_window>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ce:	3a01      	subs	r2, #1
 80061d0:	611a      	str	r2, [r3, #16]
 80061d2:	e019      	b.n	8006208 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80061d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d115      	bne.n	8006208 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80061dc:	7ebb      	ldrb	r3, [r7, #26]
 80061de:	f003 0310 	and.w	r3, r3, #16
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <f_open+0x1ba>
					res = FR_NO_FILE;
 80061e6:	2304      	movs	r3, #4
 80061e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061ec:	e00c      	b.n	8006208 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <f_open+0x1d4>
 80061f8:	7ebb      	ldrb	r3, [r7, #26]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <f_open+0x1d4>
						res = FR_DENIED;
 8006202:	2307      	movs	r3, #7
 8006204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800620c:	2b00      	cmp	r3, #0
 800620e:	d128      	bne.n	8006262 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006220:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800622a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	f107 0314 	add.w	r3, r7, #20
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe fa13 	bl	8004674 <inc_lock>
 800624e:	4602      	mov	r2, r0
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <f_open+0x22e>
 800625c:	2302      	movs	r3, #2
 800625e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 80a3 	bne.w	80063b2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006270:	4611      	mov	r1, r2
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff f8b8 	bl	80053e8 <ld_clust>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	331c      	adds	r3, #28
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe f890 	bl	80043a8 <ld_dword>
 8006288:	4602      	mov	r2, r0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	88da      	ldrh	r2, [r3, #6]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	79fa      	ldrb	r2, [r7, #7]
 80062a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3330      	adds	r3, #48	; 0x30
 80062be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe f8fa 	bl	80044be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d06e      	beq.n	80063b2 <f_open+0x37e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d06a      	beq.n	80063b2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	895b      	ldrh	r3, [r3, #10]
 80062e8:	461a      	mov	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	899b      	ldrh	r3, [r3, #12]
 80062ee:	fb03 f302 	mul.w	r3, r3, r2
 80062f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006300:	e016      	b.n	8006330 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fba3 	bl	8004a52 <get_fat>
 800630c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800630e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006310:	2b01      	cmp	r3, #1
 8006312:	d802      	bhi.n	800631a <f_open+0x2e6>
 8006314:	2302      	movs	r3, #2
 8006316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800631a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d102      	bne.n	8006328 <f_open+0x2f4>
 8006322:	2301      	movs	r3, #1
 8006324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800632a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	657b      	str	r3, [r7, #84]	; 0x54
 8006330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <f_open+0x30c>
 8006338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800633a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633c:	429a      	cmp	r2, r3
 800633e:	d8e0      	bhi.n	8006302 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006344:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800634a:	2b00      	cmp	r3, #0
 800634c:	d131      	bne.n	80063b2 <f_open+0x37e>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	899b      	ldrh	r3, [r3, #12]
 8006352:	461a      	mov	r2, r3
 8006354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006356:	fbb3 f1f2 	udiv	r1, r3, r2
 800635a:	fb02 f201 	mul.w	r2, r2, r1
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d026      	beq.n	80063b2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fb53 	bl	8004a14 <clust2sect>
 800636e:	6478      	str	r0, [r7, #68]	; 0x44
 8006370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <f_open+0x34a>
						res = FR_INT_ERR;
 8006376:	2302      	movs	r3, #2
 8006378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800637c:	e019      	b.n	80063b2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	899b      	ldrh	r3, [r3, #12]
 8006382:	461a      	mov	r2, r3
 8006384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006386:	fbb3 f2f2 	udiv	r2, r3, r2
 800638a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	7858      	ldrb	r0, [r3, #1]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	2301      	movs	r3, #1
 80063a2:	f7fd ffa1 	bl	80042e8 <disk_read>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <f_open+0x37e>
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80063b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <f_open+0x38c>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80063c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3760      	adds	r7, #96	; 0x60
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	; 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f107 0210 	add.w	r2, r7, #16
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fda5 	bl	8005f3c <validate>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80063f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d107      	bne.n	8006410 <f_write+0x44>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	7d5b      	ldrb	r3, [r3, #21]
 8006404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <f_write+0x4a>
 8006410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006414:	e16a      	b.n	80066ec <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	7d1b      	ldrb	r3, [r3, #20]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <f_write+0x5a>
 8006422:	2307      	movs	r3, #7
 8006424:	e162      	b.n	80066ec <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	441a      	add	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	429a      	cmp	r2, r3
 8006434:	f080 814c 	bcs.w	80066d0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	43db      	mvns	r3, r3
 800643e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006440:	e146      	b.n	80066d0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	8992      	ldrh	r2, [r2, #12]
 800644a:	fbb3 f1f2 	udiv	r1, r3, r2
 800644e:	fb02 f201 	mul.w	r2, r2, r1
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	f040 80f1 	bne.w	800663c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	8992      	ldrh	r2, [r2, #12]
 8006462:	fbb3 f3f2 	udiv	r3, r3, r2
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	8952      	ldrh	r2, [r2, #10]
 800646a:	3a01      	subs	r2, #1
 800646c:	4013      	ands	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d143      	bne.n	80064fe <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10c      	bne.n	8006498 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11a      	bne.n	80064c0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe fd34 	bl	8004efc <create_chain>
 8006494:	62b8      	str	r0, [r7, #40]	; 0x28
 8006496:	e013      	b.n	80064c0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	4619      	mov	r1, r3
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7fe fdc0 	bl	800502c <clmt_clust>
 80064ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80064ae:	e007      	b.n	80064c0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f7fe fd1f 	bl	8004efc <create_chain>
 80064be:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8109 	beq.w	80066da <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d104      	bne.n	80064d8 <f_write+0x10c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2202      	movs	r2, #2
 80064d2:	755a      	strb	r2, [r3, #21]
 80064d4:	2302      	movs	r3, #2
 80064d6:	e109      	b.n	80066ec <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d104      	bne.n	80064ea <f_write+0x11e>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	755a      	strb	r2, [r3, #21]
 80064e6:	2301      	movs	r3, #1
 80064e8:	e100      	b.n	80066ec <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <f_write+0x132>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	7d1b      	ldrb	r3, [r3, #20]
 8006502:	b25b      	sxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	da18      	bge.n	800653a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	7858      	ldrb	r0, [r3, #1]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	2301      	movs	r3, #1
 8006518:	f7fd fefe 	bl	8004318 <disk_write>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <f_write+0x160>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	755a      	strb	r2, [r3, #21]
 8006528:	2301      	movs	r3, #1
 800652a:	e0df      	b.n	80066ec <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	7d1b      	ldrb	r3, [r3, #20]
 8006530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006534:	b2da      	uxtb	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f7fe fa66 	bl	8004a14 <clust2sect>
 8006548:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <f_write+0x18e>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2202      	movs	r2, #2
 8006554:	755a      	strb	r2, [r3, #21]
 8006556:	2302      	movs	r3, #2
 8006558:	e0c8      	b.n	80066ec <f_write+0x320>
			sect += csect;
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	4413      	add	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	899b      	ldrh	r3, [r3, #12]
 8006566:	461a      	mov	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	fbb3 f3f2 	udiv	r3, r3, r2
 800656e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d043      	beq.n	80065fe <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	4413      	add	r3, r2
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	8952      	ldrh	r2, [r2, #10]
 8006580:	4293      	cmp	r3, r2
 8006582:	d905      	bls.n	8006590 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	895b      	ldrh	r3, [r3, #10]
 8006588:	461a      	mov	r2, r3
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	7858      	ldrb	r0, [r3, #1]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	f7fd febd 	bl	8004318 <disk_write>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <f_write+0x1e2>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	755a      	strb	r2, [r3, #21]
 80065aa:	2301      	movs	r3, #1
 80065ac:	e09e      	b.n	80066ec <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d918      	bls.n	80065ee <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	8992      	ldrh	r2, [r2, #12]
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	18d1      	adds	r1, r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	899b      	ldrh	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fd ff4e 	bl	800447c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	7d1b      	ldrb	r3, [r3, #20]
 80065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	899b      	ldrh	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80065fc:	e04b      	b.n	8006696 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	429a      	cmp	r2, r3
 8006606:	d016      	beq.n	8006636 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006610:	429a      	cmp	r2, r3
 8006612:	d210      	bcs.n	8006636 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	7858      	ldrb	r0, [r3, #1]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800661e:	2301      	movs	r3, #1
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	f7fd fe61 	bl	80042e8 <disk_read>
 8006626:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	755a      	strb	r2, [r3, #21]
 8006632:	2301      	movs	r3, #1
 8006634:	e05a      	b.n	80066ec <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	899b      	ldrh	r3, [r3, #12]
 8006640:	4618      	mov	r0, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	8992      	ldrh	r2, [r2, #12]
 800664a:	fbb3 f1f2 	udiv	r1, r3, r2
 800664e:	fb02 f201 	mul.w	r2, r2, r1
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	1ac3      	subs	r3, r0, r3
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d901      	bls.n	8006664 <f_write+0x298>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	fbb3 f0f2 	udiv	r0, r3, r2
 8006676:	fb02 f200 	mul.w	r2, r2, r0
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	440b      	add	r3, r1
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	69f9      	ldr	r1, [r7, #28]
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fefa 	bl	800447c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	7d1b      	ldrb	r3, [r3, #20]
 800668c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	4413      	add	r3, r2
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	bf38      	it	cc
 80066b6:	461a      	movcc	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60da      	str	r2, [r3, #12]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	441a      	add	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f47f aeb5 	bne.w	8006442 <f_write+0x76>
 80066d8:	e000      	b.n	80066dc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80066da:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	7d1b      	ldrb	r3, [r3, #20]
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3730      	adds	r7, #48	; 0x30
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f107 0208 	add.w	r2, r7, #8
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fc19 	bl	8005f3c <validate>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d168      	bne.n	80067e6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7d1b      	ldrb	r3, [r3, #20]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d062      	beq.n	80067e6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7d1b      	ldrb	r3, [r3, #20]
 8006724:	b25b      	sxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	da15      	bge.n	8006756 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	7858      	ldrb	r0, [r3, #1]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	2301      	movs	r3, #1
 800673a:	f7fd fded 	bl	8004318 <disk_write>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <f_sync+0x54>
 8006744:	2301      	movs	r3, #1
 8006746:	e04f      	b.n	80067e8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7d1b      	ldrb	r3, [r3, #20]
 800674c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006750:	b2da      	uxtb	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006756:	f7fd fd41 	bl	80041dc <get_fattime>
 800675a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7fe f8b7 	bl	80048d8 <move_window>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d138      	bne.n	80067e6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	330b      	adds	r3, #11
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	330b      	adds	r3, #11
 8006784:	f042 0220 	orr.w	r2, r2, #32
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	461a      	mov	r2, r3
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f7fe fe45 	bl	8005426 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f103 021c 	add.w	r2, r3, #28
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fd fe3b 	bl	8004424 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3316      	adds	r3, #22
 80067b2:	6939      	ldr	r1, [r7, #16]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fd fe35 	bl	8004424 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3312      	adds	r3, #18
 80067be:	2100      	movs	r1, #0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fd fe14 	bl	80043ee <st_word>
					fs->wflag = 1;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2201      	movs	r2, #1
 80067ca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe f8b0 	bl	8004934 <sync_fs>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7d1b      	ldrb	r3, [r3, #20]
 80067dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff7b 	bl	80066f4 <f_sync>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d118      	bne.n	800683a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f107 0208 	add.w	r2, r7, #8
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fb93 	bl	8005f3c <validate>
 8006816:	4603      	mov	r3, r0
 8006818:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd ffb3 	bl	8004790 <dec_lock>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <f_opendir+0x14>
 8006854:	2309      	movs	r3, #9
 8006856:	e064      	b.n	8006922 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800685c:	f107 010c 	add.w	r1, r7, #12
 8006860:	463b      	mov	r3, r7
 8006862:	2200      	movs	r2, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff f8e5 	bl	8005a34 <find_volume>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d14f      	bne.n	8006914 <f_opendir+0xd0>
		obj->fs = fs;
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fe ffc8 	bl	8005814 <follow_path>
 8006884:	4603      	mov	r3, r0
 8006886:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d13d      	bne.n	800690a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006894:	b25b      	sxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	db12      	blt.n	80068c0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	799b      	ldrb	r3, [r3, #6]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fd9a 	bl	80053e8 <ld_clust>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	e001      	b.n	80068c0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80068bc:	2305      	movs	r3, #5
 80068be:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d121      	bne.n	800690a <f_opendir+0xc6>
				obj->id = fs->id;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88da      	ldrh	r2, [r3, #6]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80068ce:	2100      	movs	r1, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fe fbe3 	bl	800509c <dir_sdi>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80068da:	7dfb      	ldrb	r3, [r7, #23]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d114      	bne.n	800690a <f_opendir+0xc6>
					if (obj->sclust) {
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80068e8:	2100      	movs	r1, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fd fec2 	bl	8004674 <inc_lock>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d105      	bne.n	800690a <f_opendir+0xc6>
 80068fe:	2312      	movs	r3, #18
 8006900:	75fb      	strb	r3, [r7, #23]
 8006902:	e002      	b.n	800690a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d101      	bne.n	8006914 <f_opendir+0xd0>
 8006910:	2305      	movs	r3, #5
 8006912:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <f_opendir+0xdc>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006920:	7dfb      	ldrb	r3, [r7, #23]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f107 0208 	add.w	r2, r7, #8
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fafe 	bl	8005f3c <validate>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d110      	bne.n	800696c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d006      	beq.n	8006960 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	4618      	mov	r0, r3
 8006958:	f7fd ff1a 	bl	8004790 <dec_lock>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f107 0208 	add.w	r2, r7, #8
 8006986:	4611      	mov	r1, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fad7 	bl	8005f3c <validate>
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d126      	bne.n	80069e6 <f_readdir+0x70>
		if (!fno) {
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800699e:	2100      	movs	r1, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fe fb7b 	bl	800509c <dir_sdi>
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
 80069aa:	e01c      	b.n	80069e6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe fd59 	bl	8005466 <dir_read>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d101      	bne.n	80069c2 <f_readdir+0x4c>
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10e      	bne.n	80069e6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fe fe2f 	bl	800562e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80069d0:	2100      	movs	r1, #0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fe fbeb 	bl	80051ae <dir_next>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d101      	bne.n	80069e6 <f_readdir+0x70>
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b092      	sub	sp, #72	; 0x48
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80069fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	2200      	movs	r2, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff f814 	bl	8005a34 <find_volume>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006a12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 8099 	bne.w	8006b4e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	3b02      	subs	r3, #2
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d804      	bhi.n	8006a3a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e089      	b.n	8006b4e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d128      	bne.n	8006a98 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006a46:	2302      	movs	r3, #2
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006a4e:	f107 0314 	add.w	r3, r7, #20
 8006a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fd fffc 	bl	8004a52 <get_fat>
 8006a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d103      	bne.n	8006a6c <f_getfree+0x7c>
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a6a:	e063      	b.n	8006b34 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d103      	bne.n	8006a7a <f_getfree+0x8a>
 8006a72:	2302      	movs	r3, #2
 8006a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a78:	e05c      	b.n	8006b34 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d102      	bne.n	8006a86 <f_getfree+0x96>
 8006a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a82:	3301      	adds	r3, #1
 8006a84:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a88:	3301      	adds	r3, #1
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3db      	bcc.n	8006a4e <f_getfree+0x5e>
 8006a96:	e04d      	b.n	8006b34 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d113      	bne.n	8006ada <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	63ba      	str	r2, [r7, #56]	; 0x38
 8006aba:	4619      	mov	r1, r3
 8006abc:	f7fd ff0c 	bl	80048d8 <move_window>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d131      	bne.n	8006b32 <f_getfree+0x142>
							p = fs->win;
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	3334      	adds	r3, #52	; 0x34
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	899b      	ldrh	r3, [r3, #12]
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d10f      	bne.n	8006b02 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae4:	f7fd fc48 	bl	8004378 <ld_word>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <f_getfree+0x104>
 8006aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af0:	3301      	adds	r3, #1
 8006af2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	3302      	adds	r3, #2
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afc:	3b02      	subs	r3, #2
 8006afe:	637b      	str	r3, [r7, #52]	; 0x34
 8006b00:	e010      	b.n	8006b24 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b04:	f7fd fc50 	bl	80043a8 <ld_dword>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <f_getfree+0x128>
 8006b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b14:	3301      	adds	r3, #1
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	3b04      	subs	r3, #4
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	3b01      	subs	r3, #1
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1bd      	bne.n	8006aac <f_getfree+0xbc>
 8006b30:	e000      	b.n	8006b34 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006b32:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b38:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	791a      	ldrb	r2, [r3, #4]
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f042 0201 	orr.w	r2, r2, #1
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3748      	adds	r7, #72	; 0x48
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b74:	7a5b      	ldrb	r3, [r3, #9]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d131      	bne.n	8006be0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006b7c:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b7e:	7a5b      	ldrb	r3, [r3, #9]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b86:	2100      	movs	r1, #0
 8006b88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006b8a:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b8c:	7a5b      	ldrb	r3, [r3, #9]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006b9a:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006b9c:	7a5b      	ldrb	r3, [r3, #9]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006ba4:	4413      	add	r3, r2
 8006ba6:	79fa      	ldrb	r2, [r7, #7]
 8006ba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006baa:	4b11      	ldr	r3, [pc, #68]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006bac:	7a5b      	ldrb	r3, [r3, #9]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	b2d1      	uxtb	r1, r2
 8006bb4:	4a0e      	ldr	r2, [pc, #56]	; (8006bf0 <FATFS_LinkDriverEx+0x94>)
 8006bb6:	7251      	strb	r1, [r2, #9]
 8006bb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006bba:	7dbb      	ldrb	r3, [r7, #22]
 8006bbc:	3330      	adds	r3, #48	; 0x30
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	223a      	movs	r2, #58	; 0x3a
 8006bca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	222f      	movs	r2, #47	; 0x2f
 8006bd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	3303      	adds	r3, #3
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000120 	.word	0x20000120

08006bf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ffaa 	bl	8006b5c <FATFS_LinkDriverEx>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <__errno>:
 8006c14:	4b01      	ldr	r3, [pc, #4]	; (8006c1c <__errno+0x8>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	2000005c 	.word	0x2000005c

08006c20 <__libc_init_array>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4d0d      	ldr	r5, [pc, #52]	; (8006c58 <__libc_init_array+0x38>)
 8006c24:	4c0d      	ldr	r4, [pc, #52]	; (8006c5c <__libc_init_array+0x3c>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d109      	bne.n	8006c44 <__libc_init_array+0x24>
 8006c30:	4d0b      	ldr	r5, [pc, #44]	; (8006c60 <__libc_init_array+0x40>)
 8006c32:	4c0c      	ldr	r4, [pc, #48]	; (8006c64 <__libc_init_array+0x44>)
 8006c34:	f001 f9be 	bl	8007fb4 <_init>
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d105      	bne.n	8006c4e <__libc_init_array+0x2e>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c48:	4798      	blx	r3
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7ee      	b.n	8006c2c <__libc_init_array+0xc>
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	4798      	blx	r3
 8006c54:	3601      	adds	r6, #1
 8006c56:	e7f2      	b.n	8006c3e <__libc_init_array+0x1e>
 8006c58:	080082f4 	.word	0x080082f4
 8006c5c:	080082f4 	.word	0x080082f4
 8006c60:	080082f4 	.word	0x080082f4
 8006c64:	080082f8 	.word	0x080082f8

08006c68 <memset>:
 8006c68:	4402      	add	r2, r0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d100      	bne.n	8006c72 <memset+0xa>
 8006c70:	4770      	bx	lr
 8006c72:	f803 1b01 	strb.w	r1, [r3], #1
 8006c76:	e7f9      	b.n	8006c6c <memset+0x4>

08006c78 <iprintf>:
 8006c78:	b40f      	push	{r0, r1, r2, r3}
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <iprintf+0x2c>)
 8006c7c:	b513      	push	{r0, r1, r4, lr}
 8006c7e:	681c      	ldr	r4, [r3, #0]
 8006c80:	b124      	cbz	r4, 8006c8c <iprintf+0x14>
 8006c82:	69a3      	ldr	r3, [r4, #24]
 8006c84:	b913      	cbnz	r3, 8006c8c <iprintf+0x14>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 fa7e 	bl	8007188 <__sinit>
 8006c8c:	ab05      	add	r3, sp, #20
 8006c8e:	9a04      	ldr	r2, [sp, #16]
 8006c90:	68a1      	ldr	r1, [r4, #8]
 8006c92:	9301      	str	r3, [sp, #4]
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fdab 	bl	80077f0 <_vfiprintf_r>
 8006c9a:	b002      	add	sp, #8
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	b004      	add	sp, #16
 8006ca2:	4770      	bx	lr
 8006ca4:	2000005c 	.word	0x2000005c

08006ca8 <_puts_r>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	460e      	mov	r6, r1
 8006cac:	4605      	mov	r5, r0
 8006cae:	b118      	cbz	r0, 8006cb8 <_puts_r+0x10>
 8006cb0:	6983      	ldr	r3, [r0, #24]
 8006cb2:	b90b      	cbnz	r3, 8006cb8 <_puts_r+0x10>
 8006cb4:	f000 fa68 	bl	8007188 <__sinit>
 8006cb8:	69ab      	ldr	r3, [r5, #24]
 8006cba:	68ac      	ldr	r4, [r5, #8]
 8006cbc:	b913      	cbnz	r3, 8006cc4 <_puts_r+0x1c>
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fa62 	bl	8007188 <__sinit>
 8006cc4:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <_puts_r+0xd0>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d120      	bne.n	8006d0c <_puts_r+0x64>
 8006cca:	686c      	ldr	r4, [r5, #4]
 8006ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cce:	07db      	lsls	r3, r3, #31
 8006cd0:	d405      	bmi.n	8006cde <_puts_r+0x36>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	0598      	lsls	r0, r3, #22
 8006cd6:	d402      	bmi.n	8006cde <_puts_r+0x36>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cda:	f000 faf3 	bl	80072c4 <__retarget_lock_acquire_recursive>
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	0719      	lsls	r1, r3, #28
 8006ce2:	d51d      	bpl.n	8006d20 <_puts_r+0x78>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	b1db      	cbz	r3, 8006d20 <_puts_r+0x78>
 8006ce8:	3e01      	subs	r6, #1
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	60a3      	str	r3, [r4, #8]
 8006cf4:	bb39      	cbnz	r1, 8006d46 <_puts_r+0x9e>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da38      	bge.n	8006d6c <_puts_r+0xc4>
 8006cfa:	4622      	mov	r2, r4
 8006cfc:	210a      	movs	r1, #10
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f868 	bl	8006dd4 <__swbuf_r>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d011      	beq.n	8006d2c <_puts_r+0x84>
 8006d08:	250a      	movs	r5, #10
 8006d0a:	e011      	b.n	8006d30 <_puts_r+0x88>
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <_puts_r+0xd4>)
 8006d0e:	429c      	cmp	r4, r3
 8006d10:	d101      	bne.n	8006d16 <_puts_r+0x6e>
 8006d12:	68ac      	ldr	r4, [r5, #8]
 8006d14:	e7da      	b.n	8006ccc <_puts_r+0x24>
 8006d16:	4b1a      	ldr	r3, [pc, #104]	; (8006d80 <_puts_r+0xd8>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	bf08      	it	eq
 8006d1c:	68ec      	ldreq	r4, [r5, #12]
 8006d1e:	e7d5      	b.n	8006ccc <_puts_r+0x24>
 8006d20:	4621      	mov	r1, r4
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f8a8 	bl	8006e78 <__swsetup_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d0dd      	beq.n	8006ce8 <_puts_r+0x40>
 8006d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d32:	07da      	lsls	r2, r3, #31
 8006d34:	d405      	bmi.n	8006d42 <_puts_r+0x9a>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	059b      	lsls	r3, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_puts_r+0x9a>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3e:	f000 fac2 	bl	80072c6 <__retarget_lock_release_recursive>
 8006d42:	4628      	mov	r0, r5
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	da04      	bge.n	8006d54 <_puts_r+0xac>
 8006d4a:	69a2      	ldr	r2, [r4, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	dc06      	bgt.n	8006d5e <_puts_r+0xb6>
 8006d50:	290a      	cmp	r1, #10
 8006d52:	d004      	beq.n	8006d5e <_puts_r+0xb6>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	6022      	str	r2, [r4, #0]
 8006d5a:	7019      	strb	r1, [r3, #0]
 8006d5c:	e7c5      	b.n	8006cea <_puts_r+0x42>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 f837 	bl	8006dd4 <__swbuf_r>
 8006d66:	3001      	adds	r0, #1
 8006d68:	d1bf      	bne.n	8006cea <_puts_r+0x42>
 8006d6a:	e7df      	b.n	8006d2c <_puts_r+0x84>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	250a      	movs	r5, #10
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	701d      	strb	r5, [r3, #0]
 8006d76:	e7db      	b.n	8006d30 <_puts_r+0x88>
 8006d78:	08008278 	.word	0x08008278
 8006d7c:	08008298 	.word	0x08008298
 8006d80:	08008258 	.word	0x08008258

08006d84 <puts>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <puts+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f7ff bf8d 	b.w	8006ca8 <_puts_r>
 8006d8e:	bf00      	nop
 8006d90:	2000005c 	.word	0x2000005c

08006d94 <siprintf>:
 8006d94:	b40e      	push	{r1, r2, r3}
 8006d96:	b500      	push	{lr}
 8006d98:	b09c      	sub	sp, #112	; 0x70
 8006d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d9c:	9002      	str	r0, [sp, #8]
 8006d9e:	9006      	str	r0, [sp, #24]
 8006da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006da4:	4809      	ldr	r0, [pc, #36]	; (8006dcc <siprintf+0x38>)
 8006da6:	9107      	str	r1, [sp, #28]
 8006da8:	9104      	str	r1, [sp, #16]
 8006daa:	4909      	ldr	r1, [pc, #36]	; (8006dd0 <siprintf+0x3c>)
 8006dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db0:	9105      	str	r1, [sp, #20]
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	a902      	add	r1, sp, #8
 8006db8:	f000 fbf0 	bl	800759c <_svfiprintf_r>
 8006dbc:	9b02      	ldr	r3, [sp, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	b01c      	add	sp, #112	; 0x70
 8006dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc8:	b003      	add	sp, #12
 8006dca:	4770      	bx	lr
 8006dcc:	2000005c 	.word	0x2000005c
 8006dd0:	ffff0208 	.word	0xffff0208

08006dd4 <__swbuf_r>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	460e      	mov	r6, r1
 8006dd8:	4614      	mov	r4, r2
 8006dda:	4605      	mov	r5, r0
 8006ddc:	b118      	cbz	r0, 8006de6 <__swbuf_r+0x12>
 8006dde:	6983      	ldr	r3, [r0, #24]
 8006de0:	b90b      	cbnz	r3, 8006de6 <__swbuf_r+0x12>
 8006de2:	f000 f9d1 	bl	8007188 <__sinit>
 8006de6:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <__swbuf_r+0x98>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d12b      	bne.n	8006e44 <__swbuf_r+0x70>
 8006dec:	686c      	ldr	r4, [r5, #4]
 8006dee:	69a3      	ldr	r3, [r4, #24]
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	071a      	lsls	r2, r3, #28
 8006df6:	d52f      	bpl.n	8006e58 <__swbuf_r+0x84>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	b36b      	cbz	r3, 8006e58 <__swbuf_r+0x84>
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	1ac0      	subs	r0, r0, r3
 8006e02:	6963      	ldr	r3, [r4, #20]
 8006e04:	b2f6      	uxtb	r6, r6
 8006e06:	4283      	cmp	r3, r0
 8006e08:	4637      	mov	r7, r6
 8006e0a:	dc04      	bgt.n	8006e16 <__swbuf_r+0x42>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 f926 	bl	8007060 <_fflush_r>
 8006e14:	bb30      	cbnz	r0, 8006e64 <__swbuf_r+0x90>
 8006e16:	68a3      	ldr	r3, [r4, #8]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	60a3      	str	r3, [r4, #8]
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	6022      	str	r2, [r4, #0]
 8006e22:	701e      	strb	r6, [r3, #0]
 8006e24:	6963      	ldr	r3, [r4, #20]
 8006e26:	3001      	adds	r0, #1
 8006e28:	4283      	cmp	r3, r0
 8006e2a:	d004      	beq.n	8006e36 <__swbuf_r+0x62>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	07db      	lsls	r3, r3, #31
 8006e30:	d506      	bpl.n	8006e40 <__swbuf_r+0x6c>
 8006e32:	2e0a      	cmp	r6, #10
 8006e34:	d104      	bne.n	8006e40 <__swbuf_r+0x6c>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 f911 	bl	8007060 <_fflush_r>
 8006e3e:	b988      	cbnz	r0, 8006e64 <__swbuf_r+0x90>
 8006e40:	4638      	mov	r0, r7
 8006e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <__swbuf_r+0x9c>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d101      	bne.n	8006e4e <__swbuf_r+0x7a>
 8006e4a:	68ac      	ldr	r4, [r5, #8]
 8006e4c:	e7cf      	b.n	8006dee <__swbuf_r+0x1a>
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <__swbuf_r+0xa0>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	bf08      	it	eq
 8006e54:	68ec      	ldreq	r4, [r5, #12]
 8006e56:	e7ca      	b.n	8006dee <__swbuf_r+0x1a>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 f80c 	bl	8006e78 <__swsetup_r>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d0cb      	beq.n	8006dfc <__swbuf_r+0x28>
 8006e64:	f04f 37ff 	mov.w	r7, #4294967295
 8006e68:	e7ea      	b.n	8006e40 <__swbuf_r+0x6c>
 8006e6a:	bf00      	nop
 8006e6c:	08008278 	.word	0x08008278
 8006e70:	08008298 	.word	0x08008298
 8006e74:	08008258 	.word	0x08008258

08006e78 <__swsetup_r>:
 8006e78:	4b32      	ldr	r3, [pc, #200]	; (8006f44 <__swsetup_r+0xcc>)
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	681d      	ldr	r5, [r3, #0]
 8006e7e:	4606      	mov	r6, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	b125      	cbz	r5, 8006e8e <__swsetup_r+0x16>
 8006e84:	69ab      	ldr	r3, [r5, #24]
 8006e86:	b913      	cbnz	r3, 8006e8e <__swsetup_r+0x16>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f97d 	bl	8007188 <__sinit>
 8006e8e:	4b2e      	ldr	r3, [pc, #184]	; (8006f48 <__swsetup_r+0xd0>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d10f      	bne.n	8006eb4 <__swsetup_r+0x3c>
 8006e94:	686c      	ldr	r4, [r5, #4]
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e9c:	0719      	lsls	r1, r3, #28
 8006e9e:	d42c      	bmi.n	8006efa <__swsetup_r+0x82>
 8006ea0:	06dd      	lsls	r5, r3, #27
 8006ea2:	d411      	bmi.n	8006ec8 <__swsetup_r+0x50>
 8006ea4:	2309      	movs	r3, #9
 8006ea6:	6033      	str	r3, [r6, #0]
 8006ea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb2:	e03e      	b.n	8006f32 <__swsetup_r+0xba>
 8006eb4:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <__swsetup_r+0xd4>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d101      	bne.n	8006ebe <__swsetup_r+0x46>
 8006eba:	68ac      	ldr	r4, [r5, #8]
 8006ebc:	e7eb      	b.n	8006e96 <__swsetup_r+0x1e>
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <__swsetup_r+0xd8>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	bf08      	it	eq
 8006ec4:	68ec      	ldreq	r4, [r5, #12]
 8006ec6:	e7e6      	b.n	8006e96 <__swsetup_r+0x1e>
 8006ec8:	0758      	lsls	r0, r3, #29
 8006eca:	d512      	bpl.n	8006ef2 <__swsetup_r+0x7a>
 8006ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ece:	b141      	cbz	r1, 8006ee2 <__swsetup_r+0x6a>
 8006ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d002      	beq.n	8006ede <__swsetup_r+0x66>
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 fa59 	bl	8007390 <_free_r>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	2300      	movs	r3, #0
 8006eec:	6063      	str	r3, [r4, #4]
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f043 0308 	orr.w	r3, r3, #8
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	b94b      	cbnz	r3, 8006f12 <__swsetup_r+0x9a>
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f08:	d003      	beq.n	8006f12 <__swsetup_r+0x9a>
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f9ff 	bl	8007310 <__smakebuf_r>
 8006f12:	89a0      	ldrh	r0, [r4, #12]
 8006f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f18:	f010 0301 	ands.w	r3, r0, #1
 8006f1c:	d00a      	beq.n	8006f34 <__swsetup_r+0xbc>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60a3      	str	r3, [r4, #8]
 8006f22:	6963      	ldr	r3, [r4, #20]
 8006f24:	425b      	negs	r3, r3
 8006f26:	61a3      	str	r3, [r4, #24]
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	b943      	cbnz	r3, 8006f3e <__swsetup_r+0xc6>
 8006f2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f30:	d1ba      	bne.n	8006ea8 <__swsetup_r+0x30>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	0781      	lsls	r1, r0, #30
 8006f36:	bf58      	it	pl
 8006f38:	6963      	ldrpl	r3, [r4, #20]
 8006f3a:	60a3      	str	r3, [r4, #8]
 8006f3c:	e7f4      	b.n	8006f28 <__swsetup_r+0xb0>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e7f7      	b.n	8006f32 <__swsetup_r+0xba>
 8006f42:	bf00      	nop
 8006f44:	2000005c 	.word	0x2000005c
 8006f48:	08008278 	.word	0x08008278
 8006f4c:	08008298 	.word	0x08008298
 8006f50:	08008258 	.word	0x08008258

08006f54 <__sflush_r>:
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	0710      	lsls	r0, r2, #28
 8006f5e:	460c      	mov	r4, r1
 8006f60:	d458      	bmi.n	8007014 <__sflush_r+0xc0>
 8006f62:	684b      	ldr	r3, [r1, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc05      	bgt.n	8006f74 <__sflush_r+0x20>
 8006f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dc02      	bgt.n	8006f74 <__sflush_r+0x20>
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f76:	2e00      	cmp	r6, #0
 8006f78:	d0f9      	beq.n	8006f6e <__sflush_r+0x1a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f80:	682f      	ldr	r7, [r5, #0]
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	d032      	beq.n	8006fec <__sflush_r+0x98>
 8006f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	075a      	lsls	r2, r3, #29
 8006f8c:	d505      	bpl.n	8006f9a <__sflush_r+0x46>
 8006f8e:	6863      	ldr	r3, [r4, #4]
 8006f90:	1ac0      	subs	r0, r0, r3
 8006f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f94:	b10b      	cbz	r3, 8006f9a <__sflush_r+0x46>
 8006f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f98:	1ac0      	subs	r0, r0, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fa0:	6a21      	ldr	r1, [r4, #32]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b0      	blx	r6
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	d106      	bne.n	8006fba <__sflush_r+0x66>
 8006fac:	6829      	ldr	r1, [r5, #0]
 8006fae:	291d      	cmp	r1, #29
 8006fb0:	d82c      	bhi.n	800700c <__sflush_r+0xb8>
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <__sflush_r+0x108>)
 8006fb4:	40ca      	lsrs	r2, r1
 8006fb6:	07d6      	lsls	r6, r2, #31
 8006fb8:	d528      	bpl.n	800700c <__sflush_r+0xb8>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	6062      	str	r2, [r4, #4]
 8006fbe:	04d9      	lsls	r1, r3, #19
 8006fc0:	6922      	ldr	r2, [r4, #16]
 8006fc2:	6022      	str	r2, [r4, #0]
 8006fc4:	d504      	bpl.n	8006fd0 <__sflush_r+0x7c>
 8006fc6:	1c42      	adds	r2, r0, #1
 8006fc8:	d101      	bne.n	8006fce <__sflush_r+0x7a>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	b903      	cbnz	r3, 8006fd0 <__sflush_r+0x7c>
 8006fce:	6560      	str	r0, [r4, #84]	; 0x54
 8006fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fd2:	602f      	str	r7, [r5, #0]
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d0ca      	beq.n	8006f6e <__sflush_r+0x1a>
 8006fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fdc:	4299      	cmp	r1, r3
 8006fde:	d002      	beq.n	8006fe6 <__sflush_r+0x92>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f9d5 	bl	8007390 <_free_r>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8006fea:	e7c1      	b.n	8006f70 <__sflush_r+0x1c>
 8006fec:	6a21      	ldr	r1, [r4, #32]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b0      	blx	r6
 8006ff4:	1c41      	adds	r1, r0, #1
 8006ff6:	d1c7      	bne.n	8006f88 <__sflush_r+0x34>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0c4      	beq.n	8006f88 <__sflush_r+0x34>
 8006ffe:	2b1d      	cmp	r3, #29
 8007000:	d001      	beq.n	8007006 <__sflush_r+0xb2>
 8007002:	2b16      	cmp	r3, #22
 8007004:	d101      	bne.n	800700a <__sflush_r+0xb6>
 8007006:	602f      	str	r7, [r5, #0]
 8007008:	e7b1      	b.n	8006f6e <__sflush_r+0x1a>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	e7ad      	b.n	8006f70 <__sflush_r+0x1c>
 8007014:	690f      	ldr	r7, [r1, #16]
 8007016:	2f00      	cmp	r7, #0
 8007018:	d0a9      	beq.n	8006f6e <__sflush_r+0x1a>
 800701a:	0793      	lsls	r3, r2, #30
 800701c:	680e      	ldr	r6, [r1, #0]
 800701e:	bf08      	it	eq
 8007020:	694b      	ldreq	r3, [r1, #20]
 8007022:	600f      	str	r7, [r1, #0]
 8007024:	bf18      	it	ne
 8007026:	2300      	movne	r3, #0
 8007028:	eba6 0807 	sub.w	r8, r6, r7
 800702c:	608b      	str	r3, [r1, #8]
 800702e:	f1b8 0f00 	cmp.w	r8, #0
 8007032:	dd9c      	ble.n	8006f6e <__sflush_r+0x1a>
 8007034:	6a21      	ldr	r1, [r4, #32]
 8007036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007038:	4643      	mov	r3, r8
 800703a:	463a      	mov	r2, r7
 800703c:	4628      	mov	r0, r5
 800703e:	47b0      	blx	r6
 8007040:	2800      	cmp	r0, #0
 8007042:	dc06      	bgt.n	8007052 <__sflush_r+0xfe>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e78e      	b.n	8006f70 <__sflush_r+0x1c>
 8007052:	4407      	add	r7, r0
 8007054:	eba8 0800 	sub.w	r8, r8, r0
 8007058:	e7e9      	b.n	800702e <__sflush_r+0xda>
 800705a:	bf00      	nop
 800705c:	20400001 	.word	0x20400001

08007060 <_fflush_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	b913      	cbnz	r3, 8007070 <_fflush_r+0x10>
 800706a:	2500      	movs	r5, #0
 800706c:	4628      	mov	r0, r5
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	b118      	cbz	r0, 800707a <_fflush_r+0x1a>
 8007072:	6983      	ldr	r3, [r0, #24]
 8007074:	b90b      	cbnz	r3, 800707a <_fflush_r+0x1a>
 8007076:	f000 f887 	bl	8007188 <__sinit>
 800707a:	4b14      	ldr	r3, [pc, #80]	; (80070cc <_fflush_r+0x6c>)
 800707c:	429c      	cmp	r4, r3
 800707e:	d11b      	bne.n	80070b8 <_fflush_r+0x58>
 8007080:	686c      	ldr	r4, [r5, #4]
 8007082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0ef      	beq.n	800706a <_fflush_r+0xa>
 800708a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800708c:	07d0      	lsls	r0, r2, #31
 800708e:	d404      	bmi.n	800709a <_fflush_r+0x3a>
 8007090:	0599      	lsls	r1, r3, #22
 8007092:	d402      	bmi.n	800709a <_fflush_r+0x3a>
 8007094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007096:	f000 f915 	bl	80072c4 <__retarget_lock_acquire_recursive>
 800709a:	4628      	mov	r0, r5
 800709c:	4621      	mov	r1, r4
 800709e:	f7ff ff59 	bl	8006f54 <__sflush_r>
 80070a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a4:	07da      	lsls	r2, r3, #31
 80070a6:	4605      	mov	r5, r0
 80070a8:	d4e0      	bmi.n	800706c <_fflush_r+0xc>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	059b      	lsls	r3, r3, #22
 80070ae:	d4dd      	bmi.n	800706c <_fflush_r+0xc>
 80070b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b2:	f000 f908 	bl	80072c6 <__retarget_lock_release_recursive>
 80070b6:	e7d9      	b.n	800706c <_fflush_r+0xc>
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <_fflush_r+0x70>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d101      	bne.n	80070c2 <_fflush_r+0x62>
 80070be:	68ac      	ldr	r4, [r5, #8]
 80070c0:	e7df      	b.n	8007082 <_fflush_r+0x22>
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <_fflush_r+0x74>)
 80070c4:	429c      	cmp	r4, r3
 80070c6:	bf08      	it	eq
 80070c8:	68ec      	ldreq	r4, [r5, #12]
 80070ca:	e7da      	b.n	8007082 <_fflush_r+0x22>
 80070cc:	08008278 	.word	0x08008278
 80070d0:	08008298 	.word	0x08008298
 80070d4:	08008258 	.word	0x08008258

080070d8 <std>:
 80070d8:	2300      	movs	r3, #0
 80070da:	b510      	push	{r4, lr}
 80070dc:	4604      	mov	r4, r0
 80070de:	e9c0 3300 	strd	r3, r3, [r0]
 80070e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070e6:	6083      	str	r3, [r0, #8]
 80070e8:	8181      	strh	r1, [r0, #12]
 80070ea:	6643      	str	r3, [r0, #100]	; 0x64
 80070ec:	81c2      	strh	r2, [r0, #14]
 80070ee:	6183      	str	r3, [r0, #24]
 80070f0:	4619      	mov	r1, r3
 80070f2:	2208      	movs	r2, #8
 80070f4:	305c      	adds	r0, #92	; 0x5c
 80070f6:	f7ff fdb7 	bl	8006c68 <memset>
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <std+0x38>)
 80070fc:	6263      	str	r3, [r4, #36]	; 0x24
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <std+0x3c>)
 8007100:	62a3      	str	r3, [r4, #40]	; 0x28
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <std+0x40>)
 8007104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <std+0x44>)
 8007108:	6224      	str	r4, [r4, #32]
 800710a:	6323      	str	r3, [r4, #48]	; 0x30
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	08007d99 	.word	0x08007d99
 8007114:	08007dbb 	.word	0x08007dbb
 8007118:	08007df3 	.word	0x08007df3
 800711c:	08007e17 	.word	0x08007e17

08007120 <_cleanup_r>:
 8007120:	4901      	ldr	r1, [pc, #4]	; (8007128 <_cleanup_r+0x8>)
 8007122:	f000 b8af 	b.w	8007284 <_fwalk_reent>
 8007126:	bf00      	nop
 8007128:	08007061 	.word	0x08007061

0800712c <__sfmoreglue>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	1e4a      	subs	r2, r1, #1
 8007130:	2568      	movs	r5, #104	; 0x68
 8007132:	4355      	muls	r5, r2
 8007134:	460e      	mov	r6, r1
 8007136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800713a:	f000 f979 	bl	8007430 <_malloc_r>
 800713e:	4604      	mov	r4, r0
 8007140:	b140      	cbz	r0, 8007154 <__sfmoreglue+0x28>
 8007142:	2100      	movs	r1, #0
 8007144:	e9c0 1600 	strd	r1, r6, [r0]
 8007148:	300c      	adds	r0, #12
 800714a:	60a0      	str	r0, [r4, #8]
 800714c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007150:	f7ff fd8a 	bl	8006c68 <memset>
 8007154:	4620      	mov	r0, r4
 8007156:	bd70      	pop	{r4, r5, r6, pc}

08007158 <__sfp_lock_acquire>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__sfp_lock_acquire+0x8>)
 800715a:	f000 b8b3 	b.w	80072c4 <__retarget_lock_acquire_recursive>
 800715e:	bf00      	nop
 8007160:	20004314 	.word	0x20004314

08007164 <__sfp_lock_release>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__sfp_lock_release+0x8>)
 8007166:	f000 b8ae 	b.w	80072c6 <__retarget_lock_release_recursive>
 800716a:	bf00      	nop
 800716c:	20004314 	.word	0x20004314

08007170 <__sinit_lock_acquire>:
 8007170:	4801      	ldr	r0, [pc, #4]	; (8007178 <__sinit_lock_acquire+0x8>)
 8007172:	f000 b8a7 	b.w	80072c4 <__retarget_lock_acquire_recursive>
 8007176:	bf00      	nop
 8007178:	2000430f 	.word	0x2000430f

0800717c <__sinit_lock_release>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__sinit_lock_release+0x8>)
 800717e:	f000 b8a2 	b.w	80072c6 <__retarget_lock_release_recursive>
 8007182:	bf00      	nop
 8007184:	2000430f 	.word	0x2000430f

08007188 <__sinit>:
 8007188:	b510      	push	{r4, lr}
 800718a:	4604      	mov	r4, r0
 800718c:	f7ff fff0 	bl	8007170 <__sinit_lock_acquire>
 8007190:	69a3      	ldr	r3, [r4, #24]
 8007192:	b11b      	cbz	r3, 800719c <__sinit+0x14>
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	f7ff bff0 	b.w	800717c <__sinit_lock_release>
 800719c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071a0:	6523      	str	r3, [r4, #80]	; 0x50
 80071a2:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <__sinit+0x68>)
 80071a4:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <__sinit+0x6c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	bf04      	itt	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	61a3      	streq	r3, [r4, #24]
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f820 	bl	80071f8 <__sfp>
 80071b8:	6060      	str	r0, [r4, #4]
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f81c 	bl	80071f8 <__sfp>
 80071c0:	60a0      	str	r0, [r4, #8]
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 f818 	bl	80071f8 <__sfp>
 80071c8:	2200      	movs	r2, #0
 80071ca:	60e0      	str	r0, [r4, #12]
 80071cc:	2104      	movs	r1, #4
 80071ce:	6860      	ldr	r0, [r4, #4]
 80071d0:	f7ff ff82 	bl	80070d8 <std>
 80071d4:	68a0      	ldr	r0, [r4, #8]
 80071d6:	2201      	movs	r2, #1
 80071d8:	2109      	movs	r1, #9
 80071da:	f7ff ff7d 	bl	80070d8 <std>
 80071de:	68e0      	ldr	r0, [r4, #12]
 80071e0:	2202      	movs	r2, #2
 80071e2:	2112      	movs	r1, #18
 80071e4:	f7ff ff78 	bl	80070d8 <std>
 80071e8:	2301      	movs	r3, #1
 80071ea:	61a3      	str	r3, [r4, #24]
 80071ec:	e7d2      	b.n	8007194 <__sinit+0xc>
 80071ee:	bf00      	nop
 80071f0:	08008254 	.word	0x08008254
 80071f4:	08007121 	.word	0x08007121

080071f8 <__sfp>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	4607      	mov	r7, r0
 80071fc:	f7ff ffac 	bl	8007158 <__sfp_lock_acquire>
 8007200:	4b1e      	ldr	r3, [pc, #120]	; (800727c <__sfp+0x84>)
 8007202:	681e      	ldr	r6, [r3, #0]
 8007204:	69b3      	ldr	r3, [r6, #24]
 8007206:	b913      	cbnz	r3, 800720e <__sfp+0x16>
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff ffbd 	bl	8007188 <__sinit>
 800720e:	3648      	adds	r6, #72	; 0x48
 8007210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007214:	3b01      	subs	r3, #1
 8007216:	d503      	bpl.n	8007220 <__sfp+0x28>
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	b30b      	cbz	r3, 8007260 <__sfp+0x68>
 800721c:	6836      	ldr	r6, [r6, #0]
 800721e:	e7f7      	b.n	8007210 <__sfp+0x18>
 8007220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007224:	b9d5      	cbnz	r5, 800725c <__sfp+0x64>
 8007226:	4b16      	ldr	r3, [pc, #88]	; (8007280 <__sfp+0x88>)
 8007228:	60e3      	str	r3, [r4, #12]
 800722a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800722e:	6665      	str	r5, [r4, #100]	; 0x64
 8007230:	f000 f847 	bl	80072c2 <__retarget_lock_init_recursive>
 8007234:	f7ff ff96 	bl	8007164 <__sfp_lock_release>
 8007238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800723c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007240:	6025      	str	r5, [r4, #0]
 8007242:	61a5      	str	r5, [r4, #24]
 8007244:	2208      	movs	r2, #8
 8007246:	4629      	mov	r1, r5
 8007248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800724c:	f7ff fd0c 	bl	8006c68 <memset>
 8007250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007258:	4620      	mov	r0, r4
 800725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725c:	3468      	adds	r4, #104	; 0x68
 800725e:	e7d9      	b.n	8007214 <__sfp+0x1c>
 8007260:	2104      	movs	r1, #4
 8007262:	4638      	mov	r0, r7
 8007264:	f7ff ff62 	bl	800712c <__sfmoreglue>
 8007268:	4604      	mov	r4, r0
 800726a:	6030      	str	r0, [r6, #0]
 800726c:	2800      	cmp	r0, #0
 800726e:	d1d5      	bne.n	800721c <__sfp+0x24>
 8007270:	f7ff ff78 	bl	8007164 <__sfp_lock_release>
 8007274:	230c      	movs	r3, #12
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	e7ee      	b.n	8007258 <__sfp+0x60>
 800727a:	bf00      	nop
 800727c:	08008254 	.word	0x08008254
 8007280:	ffff0001 	.word	0xffff0001

08007284 <_fwalk_reent>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	4606      	mov	r6, r0
 800728a:	4688      	mov	r8, r1
 800728c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007290:	2700      	movs	r7, #0
 8007292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007296:	f1b9 0901 	subs.w	r9, r9, #1
 800729a:	d505      	bpl.n	80072a8 <_fwalk_reent+0x24>
 800729c:	6824      	ldr	r4, [r4, #0]
 800729e:	2c00      	cmp	r4, #0
 80072a0:	d1f7      	bne.n	8007292 <_fwalk_reent+0xe>
 80072a2:	4638      	mov	r0, r7
 80072a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a8:	89ab      	ldrh	r3, [r5, #12]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d907      	bls.n	80072be <_fwalk_reent+0x3a>
 80072ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072b2:	3301      	adds	r3, #1
 80072b4:	d003      	beq.n	80072be <_fwalk_reent+0x3a>
 80072b6:	4629      	mov	r1, r5
 80072b8:	4630      	mov	r0, r6
 80072ba:	47c0      	blx	r8
 80072bc:	4307      	orrs	r7, r0
 80072be:	3568      	adds	r5, #104	; 0x68
 80072c0:	e7e9      	b.n	8007296 <_fwalk_reent+0x12>

080072c2 <__retarget_lock_init_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <__retarget_lock_acquire_recursive>:
 80072c4:	4770      	bx	lr

080072c6 <__retarget_lock_release_recursive>:
 80072c6:	4770      	bx	lr

080072c8 <__swhatbuf_r>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	460e      	mov	r6, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	2900      	cmp	r1, #0
 80072d2:	b096      	sub	sp, #88	; 0x58
 80072d4:	4614      	mov	r4, r2
 80072d6:	461d      	mov	r5, r3
 80072d8:	da07      	bge.n	80072ea <__swhatbuf_r+0x22>
 80072da:	2300      	movs	r3, #0
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	89b3      	ldrh	r3, [r6, #12]
 80072e0:	061a      	lsls	r2, r3, #24
 80072e2:	d410      	bmi.n	8007306 <__swhatbuf_r+0x3e>
 80072e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e8:	e00e      	b.n	8007308 <__swhatbuf_r+0x40>
 80072ea:	466a      	mov	r2, sp
 80072ec:	f000 fdba 	bl	8007e64 <_fstat_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dbf2      	blt.n	80072da <__swhatbuf_r+0x12>
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072fe:	425a      	negs	r2, r3
 8007300:	415a      	adcs	r2, r3
 8007302:	602a      	str	r2, [r5, #0]
 8007304:	e7ee      	b.n	80072e4 <__swhatbuf_r+0x1c>
 8007306:	2340      	movs	r3, #64	; 0x40
 8007308:	2000      	movs	r0, #0
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	b016      	add	sp, #88	; 0x58
 800730e:	bd70      	pop	{r4, r5, r6, pc}

08007310 <__smakebuf_r>:
 8007310:	898b      	ldrh	r3, [r1, #12]
 8007312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007314:	079d      	lsls	r5, r3, #30
 8007316:	4606      	mov	r6, r0
 8007318:	460c      	mov	r4, r1
 800731a:	d507      	bpl.n	800732c <__smakebuf_r+0x1c>
 800731c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	2301      	movs	r3, #1
 8007326:	6163      	str	r3, [r4, #20]
 8007328:	b002      	add	sp, #8
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	ab01      	add	r3, sp, #4
 800732e:	466a      	mov	r2, sp
 8007330:	f7ff ffca 	bl	80072c8 <__swhatbuf_r>
 8007334:	9900      	ldr	r1, [sp, #0]
 8007336:	4605      	mov	r5, r0
 8007338:	4630      	mov	r0, r6
 800733a:	f000 f879 	bl	8007430 <_malloc_r>
 800733e:	b948      	cbnz	r0, 8007354 <__smakebuf_r+0x44>
 8007340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007344:	059a      	lsls	r2, r3, #22
 8007346:	d4ef      	bmi.n	8007328 <__smakebuf_r+0x18>
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	f043 0302 	orr.w	r3, r3, #2
 8007350:	81a3      	strh	r3, [r4, #12]
 8007352:	e7e3      	b.n	800731c <__smakebuf_r+0xc>
 8007354:	4b0d      	ldr	r3, [pc, #52]	; (800738c <__smakebuf_r+0x7c>)
 8007356:	62b3      	str	r3, [r6, #40]	; 0x28
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	6020      	str	r0, [r4, #0]
 800735c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	9b00      	ldr	r3, [sp, #0]
 8007364:	6163      	str	r3, [r4, #20]
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	6120      	str	r0, [r4, #16]
 800736a:	b15b      	cbz	r3, 8007384 <__smakebuf_r+0x74>
 800736c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007370:	4630      	mov	r0, r6
 8007372:	f000 fd89 	bl	8007e88 <_isatty_r>
 8007376:	b128      	cbz	r0, 8007384 <__smakebuf_r+0x74>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	f023 0303 	bic.w	r3, r3, #3
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	89a0      	ldrh	r0, [r4, #12]
 8007386:	4305      	orrs	r5, r0
 8007388:	81a5      	strh	r5, [r4, #12]
 800738a:	e7cd      	b.n	8007328 <__smakebuf_r+0x18>
 800738c:	08007121 	.word	0x08007121

08007390 <_free_r>:
 8007390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007392:	2900      	cmp	r1, #0
 8007394:	d048      	beq.n	8007428 <_free_r+0x98>
 8007396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739a:	9001      	str	r0, [sp, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f1a1 0404 	sub.w	r4, r1, #4
 80073a2:	bfb8      	it	lt
 80073a4:	18e4      	addlt	r4, r4, r3
 80073a6:	f000 fdb9 	bl	8007f1c <__malloc_lock>
 80073aa:	4a20      	ldr	r2, [pc, #128]	; (800742c <_free_r+0x9c>)
 80073ac:	9801      	ldr	r0, [sp, #4]
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	4615      	mov	r5, r2
 80073b2:	b933      	cbnz	r3, 80073c2 <_free_r+0x32>
 80073b4:	6063      	str	r3, [r4, #4]
 80073b6:	6014      	str	r4, [r2, #0]
 80073b8:	b003      	add	sp, #12
 80073ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073be:	f000 bdb3 	b.w	8007f28 <__malloc_unlock>
 80073c2:	42a3      	cmp	r3, r4
 80073c4:	d90b      	bls.n	80073de <_free_r+0x4e>
 80073c6:	6821      	ldr	r1, [r4, #0]
 80073c8:	1862      	adds	r2, r4, r1
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bf04      	itt	eq
 80073ce:	681a      	ldreq	r2, [r3, #0]
 80073d0:	685b      	ldreq	r3, [r3, #4]
 80073d2:	6063      	str	r3, [r4, #4]
 80073d4:	bf04      	itt	eq
 80073d6:	1852      	addeq	r2, r2, r1
 80073d8:	6022      	streq	r2, [r4, #0]
 80073da:	602c      	str	r4, [r5, #0]
 80073dc:	e7ec      	b.n	80073b8 <_free_r+0x28>
 80073de:	461a      	mov	r2, r3
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	b10b      	cbz	r3, 80073e8 <_free_r+0x58>
 80073e4:	42a3      	cmp	r3, r4
 80073e6:	d9fa      	bls.n	80073de <_free_r+0x4e>
 80073e8:	6811      	ldr	r1, [r2, #0]
 80073ea:	1855      	adds	r5, r2, r1
 80073ec:	42a5      	cmp	r5, r4
 80073ee:	d10b      	bne.n	8007408 <_free_r+0x78>
 80073f0:	6824      	ldr	r4, [r4, #0]
 80073f2:	4421      	add	r1, r4
 80073f4:	1854      	adds	r4, r2, r1
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	6011      	str	r1, [r2, #0]
 80073fa:	d1dd      	bne.n	80073b8 <_free_r+0x28>
 80073fc:	681c      	ldr	r4, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	6053      	str	r3, [r2, #4]
 8007402:	4421      	add	r1, r4
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	e7d7      	b.n	80073b8 <_free_r+0x28>
 8007408:	d902      	bls.n	8007410 <_free_r+0x80>
 800740a:	230c      	movs	r3, #12
 800740c:	6003      	str	r3, [r0, #0]
 800740e:	e7d3      	b.n	80073b8 <_free_r+0x28>
 8007410:	6825      	ldr	r5, [r4, #0]
 8007412:	1961      	adds	r1, r4, r5
 8007414:	428b      	cmp	r3, r1
 8007416:	bf04      	itt	eq
 8007418:	6819      	ldreq	r1, [r3, #0]
 800741a:	685b      	ldreq	r3, [r3, #4]
 800741c:	6063      	str	r3, [r4, #4]
 800741e:	bf04      	itt	eq
 8007420:	1949      	addeq	r1, r1, r5
 8007422:	6021      	streq	r1, [r4, #0]
 8007424:	6054      	str	r4, [r2, #4]
 8007426:	e7c7      	b.n	80073b8 <_free_r+0x28>
 8007428:	b003      	add	sp, #12
 800742a:	bd30      	pop	{r4, r5, pc}
 800742c:	2000012c 	.word	0x2000012c

08007430 <_malloc_r>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	1ccd      	adds	r5, r1, #3
 8007434:	f025 0503 	bic.w	r5, r5, #3
 8007438:	3508      	adds	r5, #8
 800743a:	2d0c      	cmp	r5, #12
 800743c:	bf38      	it	cc
 800743e:	250c      	movcc	r5, #12
 8007440:	2d00      	cmp	r5, #0
 8007442:	4606      	mov	r6, r0
 8007444:	db01      	blt.n	800744a <_malloc_r+0x1a>
 8007446:	42a9      	cmp	r1, r5
 8007448:	d903      	bls.n	8007452 <_malloc_r+0x22>
 800744a:	230c      	movs	r3, #12
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	2000      	movs	r0, #0
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007452:	f000 fd63 	bl	8007f1c <__malloc_lock>
 8007456:	4921      	ldr	r1, [pc, #132]	; (80074dc <_malloc_r+0xac>)
 8007458:	680a      	ldr	r2, [r1, #0]
 800745a:	4614      	mov	r4, r2
 800745c:	b99c      	cbnz	r4, 8007486 <_malloc_r+0x56>
 800745e:	4f20      	ldr	r7, [pc, #128]	; (80074e0 <_malloc_r+0xb0>)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	b923      	cbnz	r3, 800746e <_malloc_r+0x3e>
 8007464:	4621      	mov	r1, r4
 8007466:	4630      	mov	r0, r6
 8007468:	f000 fc86 	bl	8007d78 <_sbrk_r>
 800746c:	6038      	str	r0, [r7, #0]
 800746e:	4629      	mov	r1, r5
 8007470:	4630      	mov	r0, r6
 8007472:	f000 fc81 	bl	8007d78 <_sbrk_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d123      	bne.n	80074c2 <_malloc_r+0x92>
 800747a:	230c      	movs	r3, #12
 800747c:	6033      	str	r3, [r6, #0]
 800747e:	4630      	mov	r0, r6
 8007480:	f000 fd52 	bl	8007f28 <__malloc_unlock>
 8007484:	e7e3      	b.n	800744e <_malloc_r+0x1e>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	1b5b      	subs	r3, r3, r5
 800748a:	d417      	bmi.n	80074bc <_malloc_r+0x8c>
 800748c:	2b0b      	cmp	r3, #11
 800748e:	d903      	bls.n	8007498 <_malloc_r+0x68>
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	441c      	add	r4, r3
 8007494:	6025      	str	r5, [r4, #0]
 8007496:	e004      	b.n	80074a2 <_malloc_r+0x72>
 8007498:	6863      	ldr	r3, [r4, #4]
 800749a:	42a2      	cmp	r2, r4
 800749c:	bf0c      	ite	eq
 800749e:	600b      	streq	r3, [r1, #0]
 80074a0:	6053      	strne	r3, [r2, #4]
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 fd40 	bl	8007f28 <__malloc_unlock>
 80074a8:	f104 000b 	add.w	r0, r4, #11
 80074ac:	1d23      	adds	r3, r4, #4
 80074ae:	f020 0007 	bic.w	r0, r0, #7
 80074b2:	1ac2      	subs	r2, r0, r3
 80074b4:	d0cc      	beq.n	8007450 <_malloc_r+0x20>
 80074b6:	1a1b      	subs	r3, r3, r0
 80074b8:	50a3      	str	r3, [r4, r2]
 80074ba:	e7c9      	b.n	8007450 <_malloc_r+0x20>
 80074bc:	4622      	mov	r2, r4
 80074be:	6864      	ldr	r4, [r4, #4]
 80074c0:	e7cc      	b.n	800745c <_malloc_r+0x2c>
 80074c2:	1cc4      	adds	r4, r0, #3
 80074c4:	f024 0403 	bic.w	r4, r4, #3
 80074c8:	42a0      	cmp	r0, r4
 80074ca:	d0e3      	beq.n	8007494 <_malloc_r+0x64>
 80074cc:	1a21      	subs	r1, r4, r0
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 fc52 	bl	8007d78 <_sbrk_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1dd      	bne.n	8007494 <_malloc_r+0x64>
 80074d8:	e7cf      	b.n	800747a <_malloc_r+0x4a>
 80074da:	bf00      	nop
 80074dc:	2000012c 	.word	0x2000012c
 80074e0:	20000130 	.word	0x20000130

080074e4 <__ssputs_r>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	688e      	ldr	r6, [r1, #8]
 80074ea:	429e      	cmp	r6, r3
 80074ec:	4682      	mov	sl, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4690      	mov	r8, r2
 80074f2:	461f      	mov	r7, r3
 80074f4:	d838      	bhi.n	8007568 <__ssputs_r+0x84>
 80074f6:	898a      	ldrh	r2, [r1, #12]
 80074f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074fc:	d032      	beq.n	8007564 <__ssputs_r+0x80>
 80074fe:	6825      	ldr	r5, [r4, #0]
 8007500:	6909      	ldr	r1, [r1, #16]
 8007502:	eba5 0901 	sub.w	r9, r5, r1
 8007506:	6965      	ldr	r5, [r4, #20]
 8007508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800750c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007510:	3301      	adds	r3, #1
 8007512:	444b      	add	r3, r9
 8007514:	106d      	asrs	r5, r5, #1
 8007516:	429d      	cmp	r5, r3
 8007518:	bf38      	it	cc
 800751a:	461d      	movcc	r5, r3
 800751c:	0553      	lsls	r3, r2, #21
 800751e:	d531      	bpl.n	8007584 <__ssputs_r+0xa0>
 8007520:	4629      	mov	r1, r5
 8007522:	f7ff ff85 	bl	8007430 <_malloc_r>
 8007526:	4606      	mov	r6, r0
 8007528:	b950      	cbnz	r0, 8007540 <__ssputs_r+0x5c>
 800752a:	230c      	movs	r3, #12
 800752c:	f8ca 3000 	str.w	r3, [sl]
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	6921      	ldr	r1, [r4, #16]
 8007542:	464a      	mov	r2, r9
 8007544:	f000 fcc2 	bl	8007ecc <memcpy>
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800754e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	6126      	str	r6, [r4, #16]
 8007556:	6165      	str	r5, [r4, #20]
 8007558:	444e      	add	r6, r9
 800755a:	eba5 0509 	sub.w	r5, r5, r9
 800755e:	6026      	str	r6, [r4, #0]
 8007560:	60a5      	str	r5, [r4, #8]
 8007562:	463e      	mov	r6, r7
 8007564:	42be      	cmp	r6, r7
 8007566:	d900      	bls.n	800756a <__ssputs_r+0x86>
 8007568:	463e      	mov	r6, r7
 800756a:	4632      	mov	r2, r6
 800756c:	6820      	ldr	r0, [r4, #0]
 800756e:	4641      	mov	r1, r8
 8007570:	f000 fcba 	bl	8007ee8 <memmove>
 8007574:	68a3      	ldr	r3, [r4, #8]
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	1b9b      	subs	r3, r3, r6
 800757a:	4432      	add	r2, r6
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	2000      	movs	r0, #0
 8007582:	e7db      	b.n	800753c <__ssputs_r+0x58>
 8007584:	462a      	mov	r2, r5
 8007586:	f000 fcd5 	bl	8007f34 <_realloc_r>
 800758a:	4606      	mov	r6, r0
 800758c:	2800      	cmp	r0, #0
 800758e:	d1e1      	bne.n	8007554 <__ssputs_r+0x70>
 8007590:	6921      	ldr	r1, [r4, #16]
 8007592:	4650      	mov	r0, sl
 8007594:	f7ff fefc 	bl	8007390 <_free_r>
 8007598:	e7c7      	b.n	800752a <__ssputs_r+0x46>
	...

0800759c <_svfiprintf_r>:
 800759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	4698      	mov	r8, r3
 80075a2:	898b      	ldrh	r3, [r1, #12]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	b09d      	sub	sp, #116	; 0x74
 80075a8:	4607      	mov	r7, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	d50e      	bpl.n	80075ce <_svfiprintf_r+0x32>
 80075b0:	690b      	ldr	r3, [r1, #16]
 80075b2:	b963      	cbnz	r3, 80075ce <_svfiprintf_r+0x32>
 80075b4:	2140      	movs	r1, #64	; 0x40
 80075b6:	f7ff ff3b 	bl	8007430 <_malloc_r>
 80075ba:	6028      	str	r0, [r5, #0]
 80075bc:	6128      	str	r0, [r5, #16]
 80075be:	b920      	cbnz	r0, 80075ca <_svfiprintf_r+0x2e>
 80075c0:	230c      	movs	r3, #12
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e0d1      	b.n	800776e <_svfiprintf_r+0x1d2>
 80075ca:	2340      	movs	r3, #64	; 0x40
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	9309      	str	r3, [sp, #36]	; 0x24
 80075d2:	2320      	movs	r3, #32
 80075d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075dc:	2330      	movs	r3, #48	; 0x30
 80075de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007788 <_svfiprintf_r+0x1ec>
 80075e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e6:	f04f 0901 	mov.w	r9, #1
 80075ea:	4623      	mov	r3, r4
 80075ec:	469a      	mov	sl, r3
 80075ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f2:	b10a      	cbz	r2, 80075f8 <_svfiprintf_r+0x5c>
 80075f4:	2a25      	cmp	r2, #37	; 0x25
 80075f6:	d1f9      	bne.n	80075ec <_svfiprintf_r+0x50>
 80075f8:	ebba 0b04 	subs.w	fp, sl, r4
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x7a>
 80075fe:	465b      	mov	r3, fp
 8007600:	4622      	mov	r2, r4
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ff6d 	bl	80074e4 <__ssputs_r>
 800760a:	3001      	adds	r0, #1
 800760c:	f000 80aa 	beq.w	8007764 <_svfiprintf_r+0x1c8>
 8007610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007612:	445a      	add	r2, fp
 8007614:	9209      	str	r2, [sp, #36]	; 0x24
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 80a2 	beq.w	8007764 <_svfiprintf_r+0x1c8>
 8007620:	2300      	movs	r3, #0
 8007622:	f04f 32ff 	mov.w	r2, #4294967295
 8007626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800762a:	f10a 0a01 	add.w	sl, sl, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	9307      	str	r3, [sp, #28]
 8007632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007636:	931a      	str	r3, [sp, #104]	; 0x68
 8007638:	4654      	mov	r4, sl
 800763a:	2205      	movs	r2, #5
 800763c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007640:	4851      	ldr	r0, [pc, #324]	; (8007788 <_svfiprintf_r+0x1ec>)
 8007642:	f7f8 fddd 	bl	8000200 <memchr>
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	b9d8      	cbnz	r0, 8007682 <_svfiprintf_r+0xe6>
 800764a:	06d0      	lsls	r0, r2, #27
 800764c:	bf44      	itt	mi
 800764e:	2320      	movmi	r3, #32
 8007650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007654:	0711      	lsls	r1, r2, #28
 8007656:	bf44      	itt	mi
 8007658:	232b      	movmi	r3, #43	; 0x2b
 800765a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765e:	f89a 3000 	ldrb.w	r3, [sl]
 8007662:	2b2a      	cmp	r3, #42	; 0x2a
 8007664:	d015      	beq.n	8007692 <_svfiprintf_r+0xf6>
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	4654      	mov	r4, sl
 800766a:	2000      	movs	r0, #0
 800766c:	f04f 0c0a 	mov.w	ip, #10
 8007670:	4621      	mov	r1, r4
 8007672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007676:	3b30      	subs	r3, #48	; 0x30
 8007678:	2b09      	cmp	r3, #9
 800767a:	d94e      	bls.n	800771a <_svfiprintf_r+0x17e>
 800767c:	b1b0      	cbz	r0, 80076ac <_svfiprintf_r+0x110>
 800767e:	9207      	str	r2, [sp, #28]
 8007680:	e014      	b.n	80076ac <_svfiprintf_r+0x110>
 8007682:	eba0 0308 	sub.w	r3, r0, r8
 8007686:	fa09 f303 	lsl.w	r3, r9, r3
 800768a:	4313      	orrs	r3, r2
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	46a2      	mov	sl, r4
 8007690:	e7d2      	b.n	8007638 <_svfiprintf_r+0x9c>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9103      	str	r1, [sp, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	bfbb      	ittet	lt
 800769e:	425b      	neglt	r3, r3
 80076a0:	f042 0202 	orrlt.w	r2, r2, #2
 80076a4:	9307      	strge	r3, [sp, #28]
 80076a6:	9307      	strlt	r3, [sp, #28]
 80076a8:	bfb8      	it	lt
 80076aa:	9204      	strlt	r2, [sp, #16]
 80076ac:	7823      	ldrb	r3, [r4, #0]
 80076ae:	2b2e      	cmp	r3, #46	; 0x2e
 80076b0:	d10c      	bne.n	80076cc <_svfiprintf_r+0x130>
 80076b2:	7863      	ldrb	r3, [r4, #1]
 80076b4:	2b2a      	cmp	r3, #42	; 0x2a
 80076b6:	d135      	bne.n	8007724 <_svfiprintf_r+0x188>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	1d1a      	adds	r2, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	9203      	str	r2, [sp, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfb8      	it	lt
 80076c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c8:	3402      	adds	r4, #2
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007798 <_svfiprintf_r+0x1fc>
 80076d0:	7821      	ldrb	r1, [r4, #0]
 80076d2:	2203      	movs	r2, #3
 80076d4:	4650      	mov	r0, sl
 80076d6:	f7f8 fd93 	bl	8000200 <memchr>
 80076da:	b140      	cbz	r0, 80076ee <_svfiprintf_r+0x152>
 80076dc:	2340      	movs	r3, #64	; 0x40
 80076de:	eba0 000a 	sub.w	r0, r0, sl
 80076e2:	fa03 f000 	lsl.w	r0, r3, r0
 80076e6:	9b04      	ldr	r3, [sp, #16]
 80076e8:	4303      	orrs	r3, r0
 80076ea:	3401      	adds	r4, #1
 80076ec:	9304      	str	r3, [sp, #16]
 80076ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f2:	4826      	ldr	r0, [pc, #152]	; (800778c <_svfiprintf_r+0x1f0>)
 80076f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f8:	2206      	movs	r2, #6
 80076fa:	f7f8 fd81 	bl	8000200 <memchr>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d038      	beq.n	8007774 <_svfiprintf_r+0x1d8>
 8007702:	4b23      	ldr	r3, [pc, #140]	; (8007790 <_svfiprintf_r+0x1f4>)
 8007704:	bb1b      	cbnz	r3, 800774e <_svfiprintf_r+0x1b2>
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	3307      	adds	r3, #7
 800770a:	f023 0307 	bic.w	r3, r3, #7
 800770e:	3308      	adds	r3, #8
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	4433      	add	r3, r6
 8007716:	9309      	str	r3, [sp, #36]	; 0x24
 8007718:	e767      	b.n	80075ea <_svfiprintf_r+0x4e>
 800771a:	fb0c 3202 	mla	r2, ip, r2, r3
 800771e:	460c      	mov	r4, r1
 8007720:	2001      	movs	r0, #1
 8007722:	e7a5      	b.n	8007670 <_svfiprintf_r+0xd4>
 8007724:	2300      	movs	r3, #0
 8007726:	3401      	adds	r4, #1
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	4619      	mov	r1, r3
 800772c:	f04f 0c0a 	mov.w	ip, #10
 8007730:	4620      	mov	r0, r4
 8007732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007736:	3a30      	subs	r2, #48	; 0x30
 8007738:	2a09      	cmp	r2, #9
 800773a:	d903      	bls.n	8007744 <_svfiprintf_r+0x1a8>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0c5      	beq.n	80076cc <_svfiprintf_r+0x130>
 8007740:	9105      	str	r1, [sp, #20]
 8007742:	e7c3      	b.n	80076cc <_svfiprintf_r+0x130>
 8007744:	fb0c 2101 	mla	r1, ip, r1, r2
 8007748:	4604      	mov	r4, r0
 800774a:	2301      	movs	r3, #1
 800774c:	e7f0      	b.n	8007730 <_svfiprintf_r+0x194>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <_svfiprintf_r+0x1f8>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4638      	mov	r0, r7
 800775a:	f3af 8000 	nop.w
 800775e:	1c42      	adds	r2, r0, #1
 8007760:	4606      	mov	r6, r0
 8007762:	d1d6      	bne.n	8007712 <_svfiprintf_r+0x176>
 8007764:	89ab      	ldrh	r3, [r5, #12]
 8007766:	065b      	lsls	r3, r3, #25
 8007768:	f53f af2c 	bmi.w	80075c4 <_svfiprintf_r+0x28>
 800776c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800776e:	b01d      	add	sp, #116	; 0x74
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	ab03      	add	r3, sp, #12
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	462a      	mov	r2, r5
 800777a:	4b06      	ldr	r3, [pc, #24]	; (8007794 <_svfiprintf_r+0x1f8>)
 800777c:	a904      	add	r1, sp, #16
 800777e:	4638      	mov	r0, r7
 8007780:	f000 f9d4 	bl	8007b2c <_printf_i>
 8007784:	e7eb      	b.n	800775e <_svfiprintf_r+0x1c2>
 8007786:	bf00      	nop
 8007788:	080082b8 	.word	0x080082b8
 800778c:	080082c2 	.word	0x080082c2
 8007790:	00000000 	.word	0x00000000
 8007794:	080074e5 	.word	0x080074e5
 8007798:	080082be 	.word	0x080082be

0800779c <__sfputc_r>:
 800779c:	6893      	ldr	r3, [r2, #8]
 800779e:	3b01      	subs	r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	b410      	push	{r4}
 80077a4:	6093      	str	r3, [r2, #8]
 80077a6:	da08      	bge.n	80077ba <__sfputc_r+0x1e>
 80077a8:	6994      	ldr	r4, [r2, #24]
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	db01      	blt.n	80077b2 <__sfputc_r+0x16>
 80077ae:	290a      	cmp	r1, #10
 80077b0:	d103      	bne.n	80077ba <__sfputc_r+0x1e>
 80077b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b6:	f7ff bb0d 	b.w	8006dd4 <__swbuf_r>
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	1c58      	adds	r0, r3, #1
 80077be:	6010      	str	r0, [r2, #0]
 80077c0:	7019      	strb	r1, [r3, #0]
 80077c2:	4608      	mov	r0, r1
 80077c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <__sfputs_r>:
 80077ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077cc:	4606      	mov	r6, r0
 80077ce:	460f      	mov	r7, r1
 80077d0:	4614      	mov	r4, r2
 80077d2:	18d5      	adds	r5, r2, r3
 80077d4:	42ac      	cmp	r4, r5
 80077d6:	d101      	bne.n	80077dc <__sfputs_r+0x12>
 80077d8:	2000      	movs	r0, #0
 80077da:	e007      	b.n	80077ec <__sfputs_r+0x22>
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	463a      	mov	r2, r7
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff ffda 	bl	800779c <__sfputc_r>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d1f3      	bne.n	80077d4 <__sfputs_r+0xa>
 80077ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077f0 <_vfiprintf_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	460d      	mov	r5, r1
 80077f6:	b09d      	sub	sp, #116	; 0x74
 80077f8:	4614      	mov	r4, r2
 80077fa:	4698      	mov	r8, r3
 80077fc:	4606      	mov	r6, r0
 80077fe:	b118      	cbz	r0, 8007808 <_vfiprintf_r+0x18>
 8007800:	6983      	ldr	r3, [r0, #24]
 8007802:	b90b      	cbnz	r3, 8007808 <_vfiprintf_r+0x18>
 8007804:	f7ff fcc0 	bl	8007188 <__sinit>
 8007808:	4b89      	ldr	r3, [pc, #548]	; (8007a30 <_vfiprintf_r+0x240>)
 800780a:	429d      	cmp	r5, r3
 800780c:	d11b      	bne.n	8007846 <_vfiprintf_r+0x56>
 800780e:	6875      	ldr	r5, [r6, #4]
 8007810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007812:	07d9      	lsls	r1, r3, #31
 8007814:	d405      	bmi.n	8007822 <_vfiprintf_r+0x32>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d402      	bmi.n	8007822 <_vfiprintf_r+0x32>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f7ff fd51 	bl	80072c4 <__retarget_lock_acquire_recursive>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	071b      	lsls	r3, r3, #28
 8007826:	d501      	bpl.n	800782c <_vfiprintf_r+0x3c>
 8007828:	692b      	ldr	r3, [r5, #16]
 800782a:	b9eb      	cbnz	r3, 8007868 <_vfiprintf_r+0x78>
 800782c:	4629      	mov	r1, r5
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff fb22 	bl	8006e78 <__swsetup_r>
 8007834:	b1c0      	cbz	r0, 8007868 <_vfiprintf_r+0x78>
 8007836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007838:	07dc      	lsls	r4, r3, #31
 800783a:	d50e      	bpl.n	800785a <_vfiprintf_r+0x6a>
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b01d      	add	sp, #116	; 0x74
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	4b7b      	ldr	r3, [pc, #492]	; (8007a34 <_vfiprintf_r+0x244>)
 8007848:	429d      	cmp	r5, r3
 800784a:	d101      	bne.n	8007850 <_vfiprintf_r+0x60>
 800784c:	68b5      	ldr	r5, [r6, #8]
 800784e:	e7df      	b.n	8007810 <_vfiprintf_r+0x20>
 8007850:	4b79      	ldr	r3, [pc, #484]	; (8007a38 <_vfiprintf_r+0x248>)
 8007852:	429d      	cmp	r5, r3
 8007854:	bf08      	it	eq
 8007856:	68f5      	ldreq	r5, [r6, #12]
 8007858:	e7da      	b.n	8007810 <_vfiprintf_r+0x20>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	0598      	lsls	r0, r3, #22
 800785e:	d4ed      	bmi.n	800783c <_vfiprintf_r+0x4c>
 8007860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007862:	f7ff fd30 	bl	80072c6 <__retarget_lock_release_recursive>
 8007866:	e7e9      	b.n	800783c <_vfiprintf_r+0x4c>
 8007868:	2300      	movs	r3, #0
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	2320      	movs	r3, #32
 800786e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007872:	f8cd 800c 	str.w	r8, [sp, #12]
 8007876:	2330      	movs	r3, #48	; 0x30
 8007878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a3c <_vfiprintf_r+0x24c>
 800787c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007880:	f04f 0901 	mov.w	r9, #1
 8007884:	4623      	mov	r3, r4
 8007886:	469a      	mov	sl, r3
 8007888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800788c:	b10a      	cbz	r2, 8007892 <_vfiprintf_r+0xa2>
 800788e:	2a25      	cmp	r2, #37	; 0x25
 8007890:	d1f9      	bne.n	8007886 <_vfiprintf_r+0x96>
 8007892:	ebba 0b04 	subs.w	fp, sl, r4
 8007896:	d00b      	beq.n	80078b0 <_vfiprintf_r+0xc0>
 8007898:	465b      	mov	r3, fp
 800789a:	4622      	mov	r2, r4
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f7ff ff93 	bl	80077ca <__sfputs_r>
 80078a4:	3001      	adds	r0, #1
 80078a6:	f000 80aa 	beq.w	80079fe <_vfiprintf_r+0x20e>
 80078aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ac:	445a      	add	r2, fp
 80078ae:	9209      	str	r2, [sp, #36]	; 0x24
 80078b0:	f89a 3000 	ldrb.w	r3, [sl]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80a2 	beq.w	80079fe <_vfiprintf_r+0x20e>
 80078ba:	2300      	movs	r3, #0
 80078bc:	f04f 32ff 	mov.w	r2, #4294967295
 80078c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c4:	f10a 0a01 	add.w	sl, sl, #1
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	9307      	str	r3, [sp, #28]
 80078cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078d0:	931a      	str	r3, [sp, #104]	; 0x68
 80078d2:	4654      	mov	r4, sl
 80078d4:	2205      	movs	r2, #5
 80078d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078da:	4858      	ldr	r0, [pc, #352]	; (8007a3c <_vfiprintf_r+0x24c>)
 80078dc:	f7f8 fc90 	bl	8000200 <memchr>
 80078e0:	9a04      	ldr	r2, [sp, #16]
 80078e2:	b9d8      	cbnz	r0, 800791c <_vfiprintf_r+0x12c>
 80078e4:	06d1      	lsls	r1, r2, #27
 80078e6:	bf44      	itt	mi
 80078e8:	2320      	movmi	r3, #32
 80078ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ee:	0713      	lsls	r3, r2, #28
 80078f0:	bf44      	itt	mi
 80078f2:	232b      	movmi	r3, #43	; 0x2b
 80078f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f8:	f89a 3000 	ldrb.w	r3, [sl]
 80078fc:	2b2a      	cmp	r3, #42	; 0x2a
 80078fe:	d015      	beq.n	800792c <_vfiprintf_r+0x13c>
 8007900:	9a07      	ldr	r2, [sp, #28]
 8007902:	4654      	mov	r4, sl
 8007904:	2000      	movs	r0, #0
 8007906:	f04f 0c0a 	mov.w	ip, #10
 800790a:	4621      	mov	r1, r4
 800790c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007910:	3b30      	subs	r3, #48	; 0x30
 8007912:	2b09      	cmp	r3, #9
 8007914:	d94e      	bls.n	80079b4 <_vfiprintf_r+0x1c4>
 8007916:	b1b0      	cbz	r0, 8007946 <_vfiprintf_r+0x156>
 8007918:	9207      	str	r2, [sp, #28]
 800791a:	e014      	b.n	8007946 <_vfiprintf_r+0x156>
 800791c:	eba0 0308 	sub.w	r3, r0, r8
 8007920:	fa09 f303 	lsl.w	r3, r9, r3
 8007924:	4313      	orrs	r3, r2
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	46a2      	mov	sl, r4
 800792a:	e7d2      	b.n	80078d2 <_vfiprintf_r+0xe2>
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	1d19      	adds	r1, r3, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	9103      	str	r1, [sp, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	bfbb      	ittet	lt
 8007938:	425b      	neglt	r3, r3
 800793a:	f042 0202 	orrlt.w	r2, r2, #2
 800793e:	9307      	strge	r3, [sp, #28]
 8007940:	9307      	strlt	r3, [sp, #28]
 8007942:	bfb8      	it	lt
 8007944:	9204      	strlt	r2, [sp, #16]
 8007946:	7823      	ldrb	r3, [r4, #0]
 8007948:	2b2e      	cmp	r3, #46	; 0x2e
 800794a:	d10c      	bne.n	8007966 <_vfiprintf_r+0x176>
 800794c:	7863      	ldrb	r3, [r4, #1]
 800794e:	2b2a      	cmp	r3, #42	; 0x2a
 8007950:	d135      	bne.n	80079be <_vfiprintf_r+0x1ce>
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	1d1a      	adds	r2, r3, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	9203      	str	r2, [sp, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfb8      	it	lt
 800795e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007962:	3402      	adds	r4, #2
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a4c <_vfiprintf_r+0x25c>
 800796a:	7821      	ldrb	r1, [r4, #0]
 800796c:	2203      	movs	r2, #3
 800796e:	4650      	mov	r0, sl
 8007970:	f7f8 fc46 	bl	8000200 <memchr>
 8007974:	b140      	cbz	r0, 8007988 <_vfiprintf_r+0x198>
 8007976:	2340      	movs	r3, #64	; 0x40
 8007978:	eba0 000a 	sub.w	r0, r0, sl
 800797c:	fa03 f000 	lsl.w	r0, r3, r0
 8007980:	9b04      	ldr	r3, [sp, #16]
 8007982:	4303      	orrs	r3, r0
 8007984:	3401      	adds	r4, #1
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798c:	482c      	ldr	r0, [pc, #176]	; (8007a40 <_vfiprintf_r+0x250>)
 800798e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007992:	2206      	movs	r2, #6
 8007994:	f7f8 fc34 	bl	8000200 <memchr>
 8007998:	2800      	cmp	r0, #0
 800799a:	d03f      	beq.n	8007a1c <_vfiprintf_r+0x22c>
 800799c:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <_vfiprintf_r+0x254>)
 800799e:	bb1b      	cbnz	r3, 80079e8 <_vfiprintf_r+0x1f8>
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	3307      	adds	r3, #7
 80079a4:	f023 0307 	bic.w	r3, r3, #7
 80079a8:	3308      	adds	r3, #8
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ae:	443b      	add	r3, r7
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	e767      	b.n	8007884 <_vfiprintf_r+0x94>
 80079b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b8:	460c      	mov	r4, r1
 80079ba:	2001      	movs	r0, #1
 80079bc:	e7a5      	b.n	800790a <_vfiprintf_r+0x11a>
 80079be:	2300      	movs	r3, #0
 80079c0:	3401      	adds	r4, #1
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	4619      	mov	r1, r3
 80079c6:	f04f 0c0a 	mov.w	ip, #10
 80079ca:	4620      	mov	r0, r4
 80079cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d0:	3a30      	subs	r2, #48	; 0x30
 80079d2:	2a09      	cmp	r2, #9
 80079d4:	d903      	bls.n	80079de <_vfiprintf_r+0x1ee>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0c5      	beq.n	8007966 <_vfiprintf_r+0x176>
 80079da:	9105      	str	r1, [sp, #20]
 80079dc:	e7c3      	b.n	8007966 <_vfiprintf_r+0x176>
 80079de:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e2:	4604      	mov	r4, r0
 80079e4:	2301      	movs	r3, #1
 80079e6:	e7f0      	b.n	80079ca <_vfiprintf_r+0x1da>
 80079e8:	ab03      	add	r3, sp, #12
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	462a      	mov	r2, r5
 80079ee:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <_vfiprintf_r+0x258>)
 80079f0:	a904      	add	r1, sp, #16
 80079f2:	4630      	mov	r0, r6
 80079f4:	f3af 8000 	nop.w
 80079f8:	4607      	mov	r7, r0
 80079fa:	1c78      	adds	r0, r7, #1
 80079fc:	d1d6      	bne.n	80079ac <_vfiprintf_r+0x1bc>
 80079fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a00:	07d9      	lsls	r1, r3, #31
 8007a02:	d405      	bmi.n	8007a10 <_vfiprintf_r+0x220>
 8007a04:	89ab      	ldrh	r3, [r5, #12]
 8007a06:	059a      	lsls	r2, r3, #22
 8007a08:	d402      	bmi.n	8007a10 <_vfiprintf_r+0x220>
 8007a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a0c:	f7ff fc5b 	bl	80072c6 <__retarget_lock_release_recursive>
 8007a10:	89ab      	ldrh	r3, [r5, #12]
 8007a12:	065b      	lsls	r3, r3, #25
 8007a14:	f53f af12 	bmi.w	800783c <_vfiprintf_r+0x4c>
 8007a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a1a:	e711      	b.n	8007840 <_vfiprintf_r+0x50>
 8007a1c:	ab03      	add	r3, sp, #12
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	462a      	mov	r2, r5
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <_vfiprintf_r+0x258>)
 8007a24:	a904      	add	r1, sp, #16
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 f880 	bl	8007b2c <_printf_i>
 8007a2c:	e7e4      	b.n	80079f8 <_vfiprintf_r+0x208>
 8007a2e:	bf00      	nop
 8007a30:	08008278 	.word	0x08008278
 8007a34:	08008298 	.word	0x08008298
 8007a38:	08008258 	.word	0x08008258
 8007a3c:	080082b8 	.word	0x080082b8
 8007a40:	080082c2 	.word	0x080082c2
 8007a44:	00000000 	.word	0x00000000
 8007a48:	080077cb 	.word	0x080077cb
 8007a4c:	080082be 	.word	0x080082be

08007a50 <_printf_common>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4616      	mov	r6, r2
 8007a56:	4699      	mov	r9, r3
 8007a58:	688a      	ldr	r2, [r1, #8]
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	bfb8      	it	lt
 8007a64:	4613      	movlt	r3, r2
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	b10a      	cbz	r2, 8007a76 <_printf_common+0x26>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6033      	str	r3, [r6, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	0699      	lsls	r1, r3, #26
 8007a7a:	bf42      	ittt	mi
 8007a7c:	6833      	ldrmi	r3, [r6, #0]
 8007a7e:	3302      	addmi	r3, #2
 8007a80:	6033      	strmi	r3, [r6, #0]
 8007a82:	6825      	ldr	r5, [r4, #0]
 8007a84:	f015 0506 	ands.w	r5, r5, #6
 8007a88:	d106      	bne.n	8007a98 <_printf_common+0x48>
 8007a8a:	f104 0a19 	add.w	sl, r4, #25
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	6832      	ldr	r2, [r6, #0]
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc26      	bgt.n	8007ae6 <_printf_common+0x96>
 8007a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a9c:	1e13      	subs	r3, r2, #0
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	bf18      	it	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	0692      	lsls	r2, r2, #26
 8007aa6:	d42b      	bmi.n	8007b00 <_printf_common+0xb0>
 8007aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aac:	4649      	mov	r1, r9
 8007aae:	4638      	mov	r0, r7
 8007ab0:	47c0      	blx	r8
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d01e      	beq.n	8007af4 <_printf_common+0xa4>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	68e5      	ldr	r5, [r4, #12]
 8007aba:	6832      	ldr	r2, [r6, #0]
 8007abc:	f003 0306 	and.w	r3, r3, #6
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	bf08      	it	eq
 8007ac4:	1aad      	subeq	r5, r5, r2
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	bf0c      	ite	eq
 8007acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad0:	2500      	movne	r5, #0
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	bfc4      	itt	gt
 8007ad6:	1a9b      	subgt	r3, r3, r2
 8007ad8:	18ed      	addgt	r5, r5, r3
 8007ada:	2600      	movs	r6, #0
 8007adc:	341a      	adds	r4, #26
 8007ade:	42b5      	cmp	r5, r6
 8007ae0:	d11a      	bne.n	8007b18 <_printf_common+0xc8>
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	e008      	b.n	8007af8 <_printf_common+0xa8>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4649      	mov	r1, r9
 8007aec:	4638      	mov	r0, r7
 8007aee:	47c0      	blx	r8
 8007af0:	3001      	adds	r0, #1
 8007af2:	d103      	bne.n	8007afc <_printf_common+0xac>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afc:	3501      	adds	r5, #1
 8007afe:	e7c6      	b.n	8007a8e <_printf_common+0x3e>
 8007b00:	18e1      	adds	r1, r4, r3
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	2030      	movs	r0, #48	; 0x30
 8007b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b0a:	4422      	add	r2, r4
 8007b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b14:	3302      	adds	r3, #2
 8007b16:	e7c7      	b.n	8007aa8 <_printf_common+0x58>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	4638      	mov	r0, r7
 8007b20:	47c0      	blx	r8
 8007b22:	3001      	adds	r0, #1
 8007b24:	d0e6      	beq.n	8007af4 <_printf_common+0xa4>
 8007b26:	3601      	adds	r6, #1
 8007b28:	e7d9      	b.n	8007ade <_printf_common+0x8e>
	...

08007b2c <_printf_i>:
 8007b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	460c      	mov	r4, r1
 8007b32:	4691      	mov	r9, r2
 8007b34:	7e27      	ldrb	r7, [r4, #24]
 8007b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b38:	2f78      	cmp	r7, #120	; 0x78
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	469a      	mov	sl, r3
 8007b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b42:	d807      	bhi.n	8007b54 <_printf_i+0x28>
 8007b44:	2f62      	cmp	r7, #98	; 0x62
 8007b46:	d80a      	bhi.n	8007b5e <_printf_i+0x32>
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	f000 80d8 	beq.w	8007cfe <_printf_i+0x1d2>
 8007b4e:	2f58      	cmp	r7, #88	; 0x58
 8007b50:	f000 80a3 	beq.w	8007c9a <_printf_i+0x16e>
 8007b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b5c:	e03a      	b.n	8007bd4 <_printf_i+0xa8>
 8007b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b62:	2b15      	cmp	r3, #21
 8007b64:	d8f6      	bhi.n	8007b54 <_printf_i+0x28>
 8007b66:	a001      	add	r0, pc, #4	; (adr r0, 8007b6c <_printf_i+0x40>)
 8007b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b6c:	08007bc5 	.word	0x08007bc5
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007b55 	.word	0x08007b55
 8007b78:	08007b55 	.word	0x08007b55
 8007b7c:	08007b55 	.word	0x08007b55
 8007b80:	08007b55 	.word	0x08007b55
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007b55 	.word	0x08007b55
 8007b8c:	08007b55 	.word	0x08007b55
 8007b90:	08007b55 	.word	0x08007b55
 8007b94:	08007b55 	.word	0x08007b55
 8007b98:	08007ce5 	.word	0x08007ce5
 8007b9c:	08007c09 	.word	0x08007c09
 8007ba0:	08007cc7 	.word	0x08007cc7
 8007ba4:	08007b55 	.word	0x08007b55
 8007ba8:	08007b55 	.word	0x08007b55
 8007bac:	08007d07 	.word	0x08007d07
 8007bb0:	08007b55 	.word	0x08007b55
 8007bb4:	08007c09 	.word	0x08007c09
 8007bb8:	08007b55 	.word	0x08007b55
 8007bbc:	08007b55 	.word	0x08007b55
 8007bc0:	08007ccf 	.word	0x08007ccf
 8007bc4:	680b      	ldr	r3, [r1, #0]
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	600a      	str	r2, [r1, #0]
 8007bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0a3      	b.n	8007d20 <_printf_i+0x1f4>
 8007bd8:	6825      	ldr	r5, [r4, #0]
 8007bda:	6808      	ldr	r0, [r1, #0]
 8007bdc:	062e      	lsls	r6, r5, #24
 8007bde:	f100 0304 	add.w	r3, r0, #4
 8007be2:	d50a      	bpl.n	8007bfa <_printf_i+0xce>
 8007be4:	6805      	ldr	r5, [r0, #0]
 8007be6:	600b      	str	r3, [r1, #0]
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	da03      	bge.n	8007bf4 <_printf_i+0xc8>
 8007bec:	232d      	movs	r3, #45	; 0x2d
 8007bee:	426d      	negs	r5, r5
 8007bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf4:	485e      	ldr	r0, [pc, #376]	; (8007d70 <_printf_i+0x244>)
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	e019      	b.n	8007c2e <_printf_i+0x102>
 8007bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bfe:	6805      	ldr	r5, [r0, #0]
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	bf18      	it	ne
 8007c04:	b22d      	sxthne	r5, r5
 8007c06:	e7ef      	b.n	8007be8 <_printf_i+0xbc>
 8007c08:	680b      	ldr	r3, [r1, #0]
 8007c0a:	6825      	ldr	r5, [r4, #0]
 8007c0c:	1d18      	adds	r0, r3, #4
 8007c0e:	6008      	str	r0, [r1, #0]
 8007c10:	0628      	lsls	r0, r5, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xec>
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0xf2>
 8007c18:	0669      	lsls	r1, r5, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xe8>
 8007c1c:	881d      	ldrh	r5, [r3, #0]
 8007c1e:	4854      	ldr	r0, [pc, #336]	; (8007d70 <_printf_i+0x244>)
 8007c20:	2f6f      	cmp	r7, #111	; 0x6f
 8007c22:	bf0c      	ite	eq
 8007c24:	2308      	moveq	r3, #8
 8007c26:	230a      	movne	r3, #10
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c2e:	6866      	ldr	r6, [r4, #4]
 8007c30:	60a6      	str	r6, [r4, #8]
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	bfa2      	ittt	ge
 8007c36:	6821      	ldrge	r1, [r4, #0]
 8007c38:	f021 0104 	bicge.w	r1, r1, #4
 8007c3c:	6021      	strge	r1, [r4, #0]
 8007c3e:	b90d      	cbnz	r5, 8007c44 <_printf_i+0x118>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	d04d      	beq.n	8007ce0 <_printf_i+0x1b4>
 8007c44:	4616      	mov	r6, r2
 8007c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c4e:	5dc7      	ldrb	r7, [r0, r7]
 8007c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c54:	462f      	mov	r7, r5
 8007c56:	42bb      	cmp	r3, r7
 8007c58:	460d      	mov	r5, r1
 8007c5a:	d9f4      	bls.n	8007c46 <_printf_i+0x11a>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d10b      	bne.n	8007c78 <_printf_i+0x14c>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07df      	lsls	r7, r3, #31
 8007c64:	d508      	bpl.n	8007c78 <_printf_i+0x14c>
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6861      	ldr	r1, [r4, #4]
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	bfde      	ittt	le
 8007c6e:	2330      	movle	r3, #48	; 0x30
 8007c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c78:	1b92      	subs	r2, r2, r6
 8007c7a:	6122      	str	r2, [r4, #16]
 8007c7c:	f8cd a000 	str.w	sl, [sp]
 8007c80:	464b      	mov	r3, r9
 8007c82:	aa03      	add	r2, sp, #12
 8007c84:	4621      	mov	r1, r4
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fee2 	bl	8007a50 <_printf_common>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d14c      	bne.n	8007d2a <_printf_i+0x1fe>
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	b004      	add	sp, #16
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	4835      	ldr	r0, [pc, #212]	; (8007d70 <_printf_i+0x244>)
 8007c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	680e      	ldr	r6, [r1, #0]
 8007ca4:	061f      	lsls	r7, r3, #24
 8007ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007caa:	600e      	str	r6, [r1, #0]
 8007cac:	d514      	bpl.n	8007cd8 <_printf_i+0x1ac>
 8007cae:	07d9      	lsls	r1, r3, #31
 8007cb0:	bf44      	itt	mi
 8007cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007cb6:	6023      	strmi	r3, [r4, #0]
 8007cb8:	b91d      	cbnz	r5, 8007cc2 <_printf_i+0x196>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f023 0320 	bic.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	e7b0      	b.n	8007c28 <_printf_i+0xfc>
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	f043 0320 	orr.w	r3, r3, #32
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	2378      	movs	r3, #120	; 0x78
 8007cd0:	4828      	ldr	r0, [pc, #160]	; (8007d74 <_printf_i+0x248>)
 8007cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cd6:	e7e3      	b.n	8007ca0 <_printf_i+0x174>
 8007cd8:	065e      	lsls	r6, r3, #25
 8007cda:	bf48      	it	mi
 8007cdc:	b2ad      	uxthmi	r5, r5
 8007cde:	e7e6      	b.n	8007cae <_printf_i+0x182>
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	e7bb      	b.n	8007c5c <_printf_i+0x130>
 8007ce4:	680b      	ldr	r3, [r1, #0]
 8007ce6:	6826      	ldr	r6, [r4, #0]
 8007ce8:	6960      	ldr	r0, [r4, #20]
 8007cea:	1d1d      	adds	r5, r3, #4
 8007cec:	600d      	str	r5, [r1, #0]
 8007cee:	0635      	lsls	r5, r6, #24
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0x1cc>
 8007cf4:	6018      	str	r0, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0x1d2>
 8007cf8:	0671      	lsls	r1, r6, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0x1c8>
 8007cfc:	8018      	strh	r0, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6123      	str	r3, [r4, #16]
 8007d02:	4616      	mov	r6, r2
 8007d04:	e7ba      	b.n	8007c7c <_printf_i+0x150>
 8007d06:	680b      	ldr	r3, [r1, #0]
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	600a      	str	r2, [r1, #0]
 8007d0c:	681e      	ldr	r6, [r3, #0]
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	2100      	movs	r1, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7f8 fa74 	bl	8000200 <memchr>
 8007d18:	b108      	cbz	r0, 8007d1e <_printf_i+0x1f2>
 8007d1a:	1b80      	subs	r0, r0, r6
 8007d1c:	6060      	str	r0, [r4, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	6123      	str	r3, [r4, #16]
 8007d22:	2300      	movs	r3, #0
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	e7a8      	b.n	8007c7c <_printf_i+0x150>
 8007d2a:	6923      	ldr	r3, [r4, #16]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4640      	mov	r0, r8
 8007d32:	47d0      	blx	sl
 8007d34:	3001      	adds	r0, #1
 8007d36:	d0ab      	beq.n	8007c90 <_printf_i+0x164>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	079b      	lsls	r3, r3, #30
 8007d3c:	d413      	bmi.n	8007d66 <_printf_i+0x23a>
 8007d3e:	68e0      	ldr	r0, [r4, #12]
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	4298      	cmp	r0, r3
 8007d44:	bfb8      	it	lt
 8007d46:	4618      	movlt	r0, r3
 8007d48:	e7a4      	b.n	8007c94 <_printf_i+0x168>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4640      	mov	r0, r8
 8007d52:	47d0      	blx	sl
 8007d54:	3001      	adds	r0, #1
 8007d56:	d09b      	beq.n	8007c90 <_printf_i+0x164>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	68e3      	ldr	r3, [r4, #12]
 8007d5c:	9903      	ldr	r1, [sp, #12]
 8007d5e:	1a5b      	subs	r3, r3, r1
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	dcf2      	bgt.n	8007d4a <_printf_i+0x21e>
 8007d64:	e7eb      	b.n	8007d3e <_printf_i+0x212>
 8007d66:	2500      	movs	r5, #0
 8007d68:	f104 0619 	add.w	r6, r4, #25
 8007d6c:	e7f5      	b.n	8007d5a <_printf_i+0x22e>
 8007d6e:	bf00      	nop
 8007d70:	080082c9 	.word	0x080082c9
 8007d74:	080082da 	.word	0x080082da

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d06      	ldr	r5, [pc, #24]	; (8007d94 <_sbrk_r+0x1c>)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7f9 fc26 	bl	80015d4 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20004318 	.word	0x20004318

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f8ee 	bl	8007f80 <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f000 f868 	bl	8007ea8 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b817 	b.w	8007e20 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f855 	bl	8007ea8 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b813 	b.w	8007e44 <_close_r>
	...

08007e20 <_write_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	; (8007e40 <_write_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7f9 f86c 	bl	8000f0c <_write>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_write_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_write_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20004318 	.word	0x20004318

08007e44 <_close_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d06      	ldr	r5, [pc, #24]	; (8007e60 <_close_r+0x1c>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7f9 fb8b 	bl	800156a <_close>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_close_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_close_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20004318 	.word	0x20004318

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7f9 fb86 	bl	8001582 <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20004318 	.word	0x20004318

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7f9 fb85 	bl	80015a2 <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20004318 	.word	0x20004318

08007ea8 <_lseek_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d07      	ldr	r5, [pc, #28]	; (8007ec8 <_lseek_r+0x20>)
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7f9 fb7e 	bl	80015b8 <_lseek>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_lseek_r+0x1e>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_lseek_r+0x1e>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20004318 	.word	0x20004318

08007ecc <memcpy>:
 8007ecc:	440a      	add	r2, r1
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed4:	d100      	bne.n	8007ed8 <memcpy+0xc>
 8007ed6:	4770      	bx	lr
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d1f9      	bne.n	8007eda <memcpy+0xe>
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <memmove>:
 8007ee8:	4288      	cmp	r0, r1
 8007eea:	b510      	push	{r4, lr}
 8007eec:	eb01 0402 	add.w	r4, r1, r2
 8007ef0:	d902      	bls.n	8007ef8 <memmove+0x10>
 8007ef2:	4284      	cmp	r4, r0
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	d807      	bhi.n	8007f08 <memmove+0x20>
 8007ef8:	1e43      	subs	r3, r0, #1
 8007efa:	42a1      	cmp	r1, r4
 8007efc:	d008      	beq.n	8007f10 <memmove+0x28>
 8007efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f06:	e7f8      	b.n	8007efa <memmove+0x12>
 8007f08:	4402      	add	r2, r0
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	428a      	cmp	r2, r1
 8007f0e:	d100      	bne.n	8007f12 <memmove+0x2a>
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f1a:	e7f7      	b.n	8007f0c <memmove+0x24>

08007f1c <__malloc_lock>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	; (8007f24 <__malloc_lock+0x8>)
 8007f1e:	f7ff b9d1 	b.w	80072c4 <__retarget_lock_acquire_recursive>
 8007f22:	bf00      	nop
 8007f24:	20004310 	.word	0x20004310

08007f28 <__malloc_unlock>:
 8007f28:	4801      	ldr	r0, [pc, #4]	; (8007f30 <__malloc_unlock+0x8>)
 8007f2a:	f7ff b9cc 	b.w	80072c6 <__retarget_lock_release_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20004310 	.word	0x20004310

08007f34 <_realloc_r>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	4607      	mov	r7, r0
 8007f38:	4614      	mov	r4, r2
 8007f3a:	460e      	mov	r6, r1
 8007f3c:	b921      	cbnz	r1, 8007f48 <_realloc_r+0x14>
 8007f3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f42:	4611      	mov	r1, r2
 8007f44:	f7ff ba74 	b.w	8007430 <_malloc_r>
 8007f48:	b922      	cbnz	r2, 8007f54 <_realloc_r+0x20>
 8007f4a:	f7ff fa21 	bl	8007390 <_free_r>
 8007f4e:	4625      	mov	r5, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f54:	f000 f826 	bl	8007fa4 <_malloc_usable_size_r>
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d20f      	bcs.n	8007f7c <_realloc_r+0x48>
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f7ff fa66 	bl	8007430 <_malloc_r>
 8007f64:	4605      	mov	r5, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0f2      	beq.n	8007f50 <_realloc_r+0x1c>
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	f7ff ffad 	bl	8007ecc <memcpy>
 8007f72:	4631      	mov	r1, r6
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff fa0b 	bl	8007390 <_free_r>
 8007f7a:	e7e9      	b.n	8007f50 <_realloc_r+0x1c>
 8007f7c:	4635      	mov	r5, r6
 8007f7e:	e7e7      	b.n	8007f50 <_realloc_r+0x1c>

08007f80 <_read_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d07      	ldr	r5, [pc, #28]	; (8007fa0 <_read_r+0x20>)
 8007f84:	4604      	mov	r4, r0
 8007f86:	4608      	mov	r0, r1
 8007f88:	4611      	mov	r1, r2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	602a      	str	r2, [r5, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f7f9 face 	bl	8001530 <_read>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_read_r+0x1e>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_read_r+0x1e>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20004318 	.word	0x20004318

08007fa4 <_malloc_usable_size_r>:
 8007fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa8:	1f18      	subs	r0, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bfbc      	itt	lt
 8007fae:	580b      	ldrlt	r3, [r1, r0]
 8007fb0:	18c0      	addlt	r0, r0, r3
 8007fb2:	4770      	bx	lr

08007fb4 <_init>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	bf00      	nop
 8007fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fba:	bc08      	pop	{r3}
 8007fbc:	469e      	mov	lr, r3
 8007fbe:	4770      	bx	lr

08007fc0 <_fini>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	bf00      	nop
 8007fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc6:	bc08      	pop	{r3}
 8007fc8:	469e      	mov	lr, r3
 8007fca:	4770      	bx	lr
